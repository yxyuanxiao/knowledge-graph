input,subject,relation,object
从图的角度来看，知识图谱是一个语义网络，即一种用互联的节点和弧表示知识的一个结构[1]。,知识图谱,实现,语义网络
语义网络中的语义主要体现在图中边的含义。,语义网络中的语义,实现,图中边的含义
W3C采用了以描述逻辑为逻辑基础的本体语言OWL作为定义Web术语的标准语言。,OWL,实现,定义Web术语的标准语言
本章将对知识表示的常见方法进行介绍，并且讨论如何用这些知识表示方法对知识进行建模。,本章,实现,介绍知识表示的常见方法
本章将对知识表示的常见方法进行介绍，并且讨论如何用这些知识表示方法对知识进行建模。,本章,实现,讨论如何用这些知识表示方法对知识进行建模
●用于高效计算的数据结构（A_KR_is_a_medium_for_Efficient_Computation），即知识表示也是一种用于高效计算的数据结构。,知识表示的五大用途或特点,实现,用于高效计算的数据结构
有关知识表示的研究可以追溯到人工智能的早期研究。,有关知识表示的研究,实现,人工智能的早期研究
传统的专家系统通常包含知识库和推理引擎（InferenceEngine）两个核心模块。,传统的专家系统,实现,知识库和推理引擎（InferenceEngine）两个核心模块
为了解决这一问题，人们开始研究具有较好的理论模型基础和算法复杂度的知识表示框架。,OWL_2_QL,实现,较好的理论模型基础和算法复杂度的知识表示框架
描述逻辑是目前大多数本体语言（如OWL）的理论基础。,本体语言,实现,描述逻辑
由此催生了采用连续向量的方式来表示知识的研究。,连续向量的方式来表示知识,实现,采用连续向量的方式来表示知识的研究
基于向量的方式表示知识的研究由来已有。,基于向量的方式表示知识的研究,实现,表示知识的研究
通过嵌入将知识图谱中的实体和关系投射到一个低维的连续向量空间，可以为每一个实体和关系学习出一个低维度的向量表示。,向量空间,实现,将知识图谱中的实体和关系投射到一个低维的连续向量空间
如图2-1所示为基于离散符号的知识表示与基于连续向量的知识表示对比。,基于离散符号的知识表示,实现,基于连续向量的知识表示对比
与此类似，人工智能系统需要获取并运用知识。,人工智能系统,实现,获取并运用知识
Ø图灵奖得主（x）是一个否定公式（Negated_Formula）。,图灵奖得主（x）,实现,一个否定公式（Negated_Formula）
在上面的例子中，若x为John_MaCarthy，图灵奖得主（x）为第一个命题p。,图灵奖得主,实现,第一个命题p
若x为Tim_Berners-Lee，图灵奖得主（x）为第二个命题q。,图灵奖得主,实现,第二个命题q
1.一阶谓词逻辑优点●结构性。,一阶谓词逻辑优点,实现,结构性
●严密性。,严密性,实现,SPO三元组
●可实现性。,SPO,实现,可实现性
可以转换为计算机内部形式，以便用算法实现。,概念/SPO,实现,转换为计算机内部形式，以便用算法实现。
一阶逻辑的逻辑归结只是半可判定性的。,一阶逻辑,实现,半可判定性
一个子句是文字的析取。,子句,实现,文字的析取
例如，Øp1∨…∨Øpn∨_q是一个霍恩子句，它可以被等价地写为（p1∧…∧pn）→q。,Øp1∨…∨Øpn∨_q,实现,等价地写为（p1∧…∧pn）→q
Alfred_Horn于1951年撰文指出这种子句的重要性。,Alfred_Horn,实现,指出这种子句的重要性
霍恩逻辑（Horn_Logic）是一阶逻辑的子集。,霍恩逻辑,实现,一阶逻辑
基于霍恩逻辑的知识库是一个霍恩规则的集合。,基于霍恩逻辑的知识库,实现,霍恩规则的集合
例如，→图灵奖得主（Tim（Tim_Berners-Lee）。,图灵奖得主,实现,Tim（Tim_Berners-Lee）
例如，→图灵奖得主（Tim（Tim_Berners-Lee）。,图灵奖得主,属于,Tim_Berners-Lee
1.霍恩逻辑的优点●结构性。,霍恩逻辑的优点,实现,结构性
●严密性。,严密性,实现,SPO三元组
●易实现性。,易实现性,实现,概念/产品
可判定，可以转换为计算机内部形式，以便用算法实现。,OOA,实现,可判定
2.霍恩逻辑的缺点●有限的表达能力。,霍恩逻辑的缺点,实现,有限的表达能力
语义网络的单元是三元组：（节点1，联想弧，节点2）。,语义网络的单元,实现,三元组
例如（Tim_Berners-Lee，类型，图灵奖得主）和（Tim_Berners-Lee，发明，互联网）是三元组。,Tim_Berners-Lee,实现,图灵奖得主
例如（Tim_Berners-Lee，类型，图灵奖得主）和（Tim_Berners-Lee，发明，互联网）是三元组。,Tim_Berners-Lee,实现,互联网
由于所有的节点均通过联想弧彼此相连，语义网络可以通过图上的操作进行知识推理。,语义网络,实现,知识推理
它最初是作为人类联想记忆模型提出来的。,奥苏贝尔的联想记忆模型,实现,作为人类联想记忆模型提出
语义网络表示知识的手段多种多样，虽然灵活性很高，但同时也由于表示形式的不一致提高了对其处理的复杂性。,语义网络,实现,知识的表示
而图2-3则把“每个学生都读过一本书”表示成：任何一个学生s1都是属于读过一本书这个概念的元素。,读过一本书,实现,任何一个学生s1都是属于读过一本书这个概念的元素
通过推理网络而实现的推理不能保证其正确性。,推理网络,实现,通过推理网络而实现的推理不能保证其正确性。
框架是一种描述对象（事物、事件或概念等）属性的数据结构。,框架,实现,描述对象（事物、事件或概念等）属性的数据结构
在框架理论中，类是知识表示的基本单位。,类,实现,知识表示的基本单位
除此之外，框架还允许给属性设默认值，以及设立触发器以维护框架。,框架,实现,给属性设默认值
除此之外，框架还允许给属性设默认值，以及设立触发器以维护框架。,框架,实现,设立触发器以维护框架
1）下面是框架的基本组成的一个示例：2）表2-1给出一个带变量框架实例。,框架,实现,带变量框架实例
如果把框架“tx未遂杀人案”的变量赋值，可以得到下面的一个框架实例，如表2-2所示。,tx未遂杀人案,实现,框架实例
2）框架对于知识的描述比较全面，支持默认值以及触发器。,框架,实现,知识的描述比较全面，支持默认值以及触发器
描述逻辑可以被看成是利用一阶逻辑对语义网络和框架进行形式化后的产物。,描述逻辑,实现,一阶逻辑对语义网络和框架进行形式化
描述逻辑近年来受到广泛关注，被选为W3C互联网本体语言（OWL）的理论基础。,描述逻辑,实现,W3C互联网本体语言（OWL）
3）多样性。,多样性,实现,实现
4）易实现性。,易实现性,实现,概念/产品
可判定，可以转换为计算机内部形式，以便用算法实现。,OOA,实现,可判定
这两种语言的语法可以跟XML兼容。,两种语言的语法,实现,跟XML兼容
2.3.1RDF和RDFSRDF是W3C的RDF工作组制定的关于知识图谱的国际标准。,RDF,实现,知识图谱的国际标准
RDF是W3C一系列语义网标准的核心，如图2-4所示。,RDF,实现,W3C一系列语义网标准的核心
前两者主要是为RDF提供语法基础。,OWL_2_QL,实现,为RDF提供语法基础
统一逻辑目前还没有定论。,统一逻辑,实现,目前还没有定论
2007年，不少开放图谱实现与DBpedia链接。,开放图谱,实现,DBpedia链接
如图2-5为开放链接数据早期的发展。,开放链接数据,实现,早期的发展
"每一份知识可以被分解为如下形式：(subject,predicate,object)。",知识,实现,可以被分解为如下形式
"例如，“IBM邀请Jeff_Pan作为讲者，演讲主题是知识图谱”可以写成以下RDF三元组：（IBM-Talk,speaker,Jeff）,（IBM-Talk,theme,KG）。",IBM-Talk,实现,speaker
"例如，“IBM邀请Jeff_Pan作为讲者，演讲主题是知识图谱”可以写成以下RDF三元组：（IBM-Talk,speaker,Jeff）,（IBM-Talk,theme,KG）。",IBM-Talk,实现,theme
RDF中的主语是一个个体（Individual），个体是类的实例。,RDF,实现,主语是一个个体（Individual）
RDF中的谓语是一个属性。,谓语,实现,属性
"换言之，RDF中的宾语可以是一个个体，例如（IBM-Talk,speaker,Jeff）也可以是一个数据类型的实例，例如（IBM-Talk,talkDate,“05-10-2012”^xsd:date）。",RDF,实现,宾语是一个个体
例如，Jeff是某一次关于KG讲座的讲者，如图2-9所示。,Jeff,实现,一次关于KG讲座的讲者
也就是说，RDF的开放性特点和要求。,RDF的开放性特点,实现,要求
（IBM-图谱里的知识有可能是不完备的，这符合Web讲座只有一位讲者。,IBM-图谱,实现,知识不完备
采用开放世界假设意味着RDF图谱可以被分布式储存，如图2-11所示。,RDF图谱,实现,分布式储存
IBM图2-11RDF图谱可以被分布式储存同时，分布式定义的知识可以自动合并，如图2-12所示。,RDF图谱,实现,分布式储存同时，分布式定义的知识可以自动合并
这些类和属性由模式（schema）定义。,模式,实现,定义类及属性
更丰富的定义则需要用到OWL本体描述语言。,OWL本体描述语言,实现,更丰富的定义
举例来说，下面的三元组表示用户自定义的元数据Author是Dublin_Core的元数据Creator的子类，如图2-13所示。,Author,实现,Dublin_Core的元数据Creator的子类
RDF_Schema通过这样的方式描述不同词汇集的元数据之间的关系，从而为网络上统一格式的元数据交换打下基础。,RDF_Schema,实现,描述不同词汇集的元数据之间的关系，从而为网络上统一格式的元数据交换打下基础。
下面用图2-14说明RDFS，为了简便，边的标签省略了RDF或者RDFS。,RDFS,实现,边的标签
知识被分为两类，一类是数据层面的知识，例如haofen_type_Person（haofen是Person类的一个实例），另外一类是模式层面的知识，例如speaker_domainPerson（speaker属性的定义域是Person类）。,知识,实现,数据层面的知识
知识被分为两类，一类是数据层面的知识，例如haofen_type_Person（haofen是Person类的一个实例），另外一类是模式层面的知识，例如speaker_domainPerson（speaker属性的定义域是Person类）。,知识,实现,模式层面的知识
（2）类、属性、个体的等价性。,类,实现,属性、个体的等价性
（3）不相交类的定义。,不相交类的定义,实现,实现
（4）基数约束。,SPO,实现,基数约束
（5）关于属性特性的描述。,属性特性,实现,实现
OWL的子语言与RDF有以下关系。,OWL的子语言,实现,RDF
声明两个类、属性和实例是等价的。,等价,实现,声明两个类、属性和实例是等价的。
（2）属性传递性声明。,属性传递性声明,实现,实现
声明一个属性是传递关系。,传递关系,实现,实现中文名
例如，exp:ancestor_rdf:typeowl:TransitiveProperty指的是exp:ancestor_是一个传递关系。,ancestor_rdf:typeowl:TransitiveProperty,实现,是一个传递关系
例如exp：小明exp:ancestor_exp：小林；exp：小林_exp:ancestor_exp：小志，根据上述声明，可以推出exp：小明exp:ancestor_exp：小志。,exp：小明,实现,ancestor_exp：小志
（3）属性互逆声明。,属性互逆声明,实现,实现
如果exp：小明exp:ancestor_exp：小林，根据上述声明，可以推出exp：小林_exp:descendant_exp：小明。,exp：小明,实现,exp：小林_exp:descendant_exp：小明
（4）属性的函数性声明。,属性的函数性声明,实现,实现
声明一个属性是函数。,属性,实现,函数
例如，exp:hasMother_rdf:typeowl:FunctionalProperty指的是exp:hasMother是一个函数，即一个生物只能有一个母亲。,exp:hasMother,实现,owl:FunctionalProperty
（5）属性的对称性声明。,属性的对称性声明,实现,实现
例如rdf:typeowl:SymmetricProperty指的是exp:friend是一个具有对称性的属性；如果exp：小明exp:friendexp：小林，根据上述声明，有exp：小林_exp:friend_exp：小明。,owl:SymmetricProperty,实现,exp:friend是一个具有对称性的属性
例如rdf:typeowl:SymmetricProperty指的是exp:friend是一个具有对称性的属性；如果exp：小明exp:friendexp：小林，根据上述声明，有exp：小林_exp:friend_exp：小明。,exp:friend,被定义为,exp：小明exp：friendexp：小林
exp:friend（6）属性的全称限定声明。,friend属性的全称限定声明,实现,实现
（7）属性的存在限定声明。,属性的存在限定声明。,实现,实现
声明一个属性是存在限定。,属性,实现,存在限定
上面的三元组相当于：关于语义网的论文部分发表在AAAI上。,关于语义网的论文,实现,发表在AAAI上
（8）属性的基数限定声明。,属性的基数限定声明。,实现,实现
（9）相交的类声明。,相交的类声明,实现,实现三元组抽取
声明一个类是等价于两个类相交。,等价,实现,两个类相交
如：exp:Mother_owl:intersectionOf_tmp_tmp_rdf:type_rdfs:Collection_tmp_rdfs:member_exp:Person_tmp_rdfs:member_exp:HasChildren指tmp是临时资源，它是exp:Person和exp:HasChildren两个类的交集。,exp:Mother_owl:intersectionOf,实现,tmp是临时资源，它是exp:Person和exp:HasChildren两个类的交集。
exp:HasChildren。,SPO三元组,实现,HasChildren
它的查询复杂度是AC0，非常适合大规模处理。,Elasticsearch,实现,AC0
它是基于描述逻辑DL-Lite定义的。,OWL_2_QL,实现,基于描述逻辑DL-Lite
OWL_2_EL的分类复杂度是Ptime-Complete，它是基于描述逻辑语言EL++定义的。,OWL_2_EL,实现,Ptime-Complete
下面给出一个例子。,OIA,实现,等价
假设有一个本体，包含以下公理：公理1.Apple⊑∃beInvestedBy.(Fidelity⊓BlackStone)：苹果由富达和黑石投资。,公理1,实现,Apple⊑∃beInvestedBy.(Fidelity⊓BlackStone)
公理2.∃beFundedBy.Fidelity⊑InnovativeCompanies：借助富达融资的公司都是创新企业。,Fidelity,实现,借助富达融资的公司都是创新企业
公理3.∃beFundedBy.BlackStone⊑InnovativeCompanies：借助黑石融资的公司都是创新企业。,BlackStone,实现,借助黑石融资的公司都是创新企业
公理4.beInvestedBy⊑beFundedBy：投资即是帮助融资。,公理4.beInvestedBy⊑beFundedBy,实现,投资即是帮助融资
第一条规则表示如果属性p的定义域是类x，而且实例s和o有关系p（这里把属性与关系看成是一样的），那么实例s是类x的一个元素。,第一条规则,实现,如果属性p的定义域是类x，而且实例s和o有关系p
第二条规则表示如果属性p的值域是类x，而且实例s和o有关系p，那么实例o是类x的一个元素。,第二条规则,实现,如果属性p的值域是类x，而且实例s和o有关系p，那么实例o是类x的一个元素。
"例如exp:hasChild_rdfs:domain_exp:Person,exp:Helen_exp:hasChild_exp:Jack，由第一条规则可以推出_exp:Helen_rdf:type_exp:Person。",_exp:Helen_rdf:type,实现,_exp:Person
例如：指的是查询所有选修CS328课程的学生姓名，以及他们的邮箱。,SPO,实现,查询所有选修CS328课程的学生姓名，以及他们的邮箱
（2）FILTER。,FILTER,实现,查询多个关键词
过滤算子，指的是这个算子覆盖范围的查询语句可以用来过滤查询结果。,过滤算子,实现,覆盖范围的查询语句可以用来过滤查询结果
（3）UNION。,UNION,实现,查询多个数据库
并算子，指的是将两个查询的结果合并起来。,并算子,实现,将两个查询的结果合并起来
例如：指的是查询选修课程CS328或CS909的学生姓名以及邮件。,SPO,实现,查询选修课程CS328或CS909的学生姓名以及邮件
下面给出一个SPARQL查询的例子。,SPARQL查询,实现,根据语义进行查询
给定一个RDF数据集：以及一个SPARQL查询：这个SPARQL查询期望查询所有的收购关系，可以得到查询结果如表2-8所示。,收购关系,实现,SPARQL查询所有的收购关系
表2-8查询结果给定论文一个SPARQL查询：这个查询期望查询所有具备关联交易的公司。,SPARQL查询,实现,查询所有具备关联交易的公司
通过查询重写技术，可以得到下面的SPARQL查询：但是这个查询比较复杂，可以通过下面的SPARQL查询简化：在这个查询中，SPARQL允许嵌套查询，即WHERE子句中包含SELECT子句。,SPARQL查询,实现,嵌套查询
被谷歌知识图谱以及Schema.Org采用的语义Markup语言主要包括JSON-LD、RDFa和HTML5MicroData。,Schema.Org,实现,语义Markup语言
1.JSON-LDJSON-LD（JavaScript_Object_Notation_for_Linked_Data）是一种基于JSON表示和传输链接数据的方法。,JSON-LD,实现,基于JSON表示和传输链接数据的方法
JSON-LD描述了如何通过JSON表示有向图，以及如何在一个文档中混合表示链接数据及非链接数据。,JSON-LD,实现,通过JSON表示有向图
JSON-LD描述了如何通过JSON表示有向图，以及如何在一个文档中混合表示链接数据及非链接数据。,JSON-LD,实现,在一个文档中混合表示链接数据及非链接数据
JSON-LD的语法和JSON兼容。,JSON-LD,实现,JSON
下面是一个简单的JSON例子：JSON文档表示一个人。,JSON,实现,一个人
人们很容易推断这里的含义：“name”是人的名字，“homepage”是其主页，“image”是其某种照片。,name,实现,人的名字
例如，每个数据集不应该围绕“name”重复发明概念。,三元组,实现,不应该围绕“name”重复发明概念
RDFa也是W3C推荐标准。,RDFa,实现,W3C推荐标准
它扩充了XHTML的几个属性，网页制作者可以利用这些属性在网页中添加可供机器读取的资源。,XMLSchema,实现,在网页中添加可供机器读取的资源
RDFa通过引入名字空间的方法，在已有的标签中加入RDFa相应的属性，以便解析支持RDFa技术的浏览器或者搜索引擎，从而达到优化的目的。,RDFa,实现,"在已有的标签中加入RDFa相应的属性,以便解析支持RDFa技术的浏览器或者搜索引擎,从而达到优化的目的。"
这段代码示例说明了一篇文章，然后描述了和这篇文章相关的信息，例如标题、创建者和创建日期，就可以让支持RDFa的机器识别这些属性。,代码示例,实现,支持RDFa的机器识别这些属性
RDFa可以从机器可理解的层面优化搜索，提升访问体验以及网页数据的关联。,RDFa,实现,优化搜索，提升访问体验以及网页数据的关联
3.HTML5_MicrodataMicrodata（微数据）是在网页标记语言中嵌入机器可读的属性数据。,HTML5_Microdata,实现,在网页标记语言中嵌入机器可读的属性数据
下面是一个HTML5Microdata的示例。,HTML5Microdata,实现,等价
这个例子给出了Person类下一个叫Andy的人的照片和URL地址。,Person,实现,一个叫Andy的人的照片和URL地址
通过HTML5Microdata，浏览器可以很方便地从网页上提取微数据实体、属性及属性值。,HTML5Microdata,实现,从网页上提取微数据实体、属性及属性值
“Object”代表实体。,“Object”,实现,实体
每一个“Object”有唯一的（Machine_ID）。,Object,实现,唯一的（Machine_ID）
“Properties”用来描述“Facts”。,Properties,实现,描述Facts
例如，“Barack_Obama”是一个Object，并拥有一个唯一的MID:“/m/02mjmr”。,“Barack_Obama”,实现,Object
这个Object是“/government/us_president”，并有一个称的一个为“/government/us_president/presidency_number”的Property，其数值是“44”。,“/government/us_president”,实现,/government/us_president
这个Object是“/government/us_president”，并有一个称的一个为“/government/us_president/presidency_number”的Property，其数值是“44”。,“/government/us_president/presidency_number”,被定义为,44
"Freebase使用复合值类型（Compound_Value_Types,CVT）处理多元关系。",Freebase,实现,复合值类型处理多元关系
type如图2-16所示，示例的CVT描述了关于Obama的任职期限的多元关系“government_position_held”。,CVT,实现,关于Obama的任职期限的多元关系“government_position_held”
这个多元关系包含多个子二元关系：“office_holder”“office_position”“from”“to”等。,多元关系,实现,多个子二元关系
一个CVT就是有唯一MID的Object，也可以有多个Types。,CVT,实现,有唯一MID的Object
一个CVT就是有唯一MID的Object，也可以有多个Types。,CVT,实现,多个Types
Wikidata起源于Wikipedia，因此与Wikipedia一样，以页面“Page”为基本的组织单元。,Wikidata,实现,Wikipedia
每一个Entity都有一个独立的维基页面。,Entity,实现,独立的维基页面
Properties和Statements分别等价于RDF中的Property和Statement。,Properties,实现,RDF中的Property
修饰-Qualifiers用于处理复杂的多元表示。,Qualifiers,实现,复杂的多元表示
如一个陈述“spouse:Jane_Belson”描述了一个二元关系。,spo,实现,三元组
Wikidata允许给每个Statement增加三种权重：normal（缺省）、preferred和deprecated。,Wikidata,实现,给每个Statement增加三种权重
PropertyNoValueSnack类似于OWL中的Negation，表示类似于“Elizabeth_spouse”的知识。,PropertyNoValueSnack,实现,类似于OWL中的Negation
Concepts由Words或Phrases组成，构成了图谱中的节点。,Concepts,实现,Words或Phrases组成，构成了图谱中的节点
Edges类似于RDF中的Property。,Edges,实现,RDF中的Property
ConceptNet5示例如图2-17所示。,ConceptNet5,实现,示例如图2-17所示。
在处理表示“x_is_the_first_argument_of_y”这类多元关系的问题上，ConceptNet5把所有关于某条边的附加信息增加为边的属性，如图2-18所示。,ConceptNet5,实现,处理表示“x_is_the_first_argument_of_y”这类多元关系的问题
知识图谱中的向量表示方法也在此次有所借鉴。,知识图谱中的向量表示方法,实现,此次有所借鉴
"2.词袋模型词袋模型（Bag-of-Words,BoW）是一种对文本中词的表示方法。",词袋模型,实现,对文本中词的表示方法
●Predictive。,Predictive,实现,预测
基于预测的方法，既可以通过上下文预测中心词，也可以通过中心词预测上下文。,基于预测的方法,实现,通过上下文预测中心词
基于预测的方法，既可以通过上下文预测中心词，也可以通过中心词预测上下文。,基于预测的方法,实现,通过中心词预测上下文
整个模型在训练的过程就像是一个窗口在训练语料上进行滑动，所以被称为连续词袋模型。,连续词袋模型,实现,在训练语料上进行滑动
Skip-gram的思想与CBoW恰恰相反，其考虑用中心词来预测上下文词。,Skip-gram,实现,用中心词来预测上下文词
把这种将知识图谱中包括实体和关系的内容映射到连续向量空间方法的研究领域称为知识图谱嵌入（Knowledge_Graph（Representation_Learning）、知识表示学习。,知识图谱嵌入,实现,知识图谱中包括实体和关系的内容映射到连续向量空间方法的研究领域
增加了下游应用设计的多样性。,SPO,实现,增加下游应用设计的多样性
用向量表示后，知识图谱将更加适用于当前流行的机器学习算法，例如神经网络等方法。,知识图谱,实现,向量表示
当训练知识图谱嵌入的时候，考虑这样的三元组就可以将属性信息考虑到向量表示中。,三元组,实现,将属性信息考虑到向量表示中
联合模型在训练时降低来自三个子模型的损失之和。,联合模型,实现,降低来自三个子模型的损失之和
简单来说，就是讲规则学习和知识图谱嵌入学习互相迭代，最后使得知识图谱嵌入可以融入一定的规则信息。,知识图谱嵌入,实现,规则学习和知识图谱嵌入学习互相迭代
本小节将简单介绍一些典型的应用。,本小节,实现,简单介绍一些典型的应用
"简单来说，也就是（h,r,?）,（?,r,t）,（h,?,t）三种知识图谱的补全任务，被称为链接预测。",链接预测,实现,知识图谱的补全任务
当知识图谱的嵌入被学习完成后，知识图谱嵌入就可以通过排序完成。,知识图谱嵌入,实现,排序
链接预测也常被用于评测知识图谱嵌入。,链接预测,实现,评测知识图谱嵌入
3.实体对齐实体对齐（Entity_Resolution）也称为实体解析，任务是验证两个实体是否指代或者引用的是同一个事物或对象。,实体对齐,实现,验证两个实体是否指代或者引用的是同一个事物或对象
该任务可以删除同一个知识库中冗余的实体，也可以在知识库融合的时候从异构的数据源中找到相同的实体。,删除同一个知识库中冗余的实体,实现,可以在知识库融合的时候从异构的数据源中找到相同的实体
简单来说就是设计一种得分函数，使问题的向量表示和其正确答案的向量表示得分较高。,向量表示,实现,问题的向量表示和其正确答案的向量表示得分较高
简单来说，Wφ（q）和Wψ（a）可以分别表示问题和答案的向量表示。,Wφ（q）,实现,向量表示
简单来说，Wφ（q）和Wψ（a）可以分别表示问题和答案的向量表示。,Wψ（a）,实现,向量表示
"当a是q的正确答案时，得分函数S（q,a）被期望得到一个较高的分数，反之亦然。",得分函数S,实现,当a是q的正确答案时，得到一个较高的分数
协同过滤算法（Collaborative_Filtering）对用户和物品项目之间的交互进行建模并作为潜在表示取得了很好的效果。,协同过滤算法,实现,对用户和物品项目之间的交互进行建模并作为潜在表示取得了很好的效果
在知识图谱嵌入的发展下，推荐系统也尝试借助知识图谱的信息提高推荐系统的能力。,推荐系统,实现,借助知识图谱的信息提高推荐系统的能力
2.7本章小结本章比较全面地介绍了知识图谱的表示与建模方法。,知识图谱的表示与建模方法,实现,比较全面地介绍
最后，介绍了知识图谱的嵌入式方法。,知识图谱的嵌入式方法,实现,介绍
