input,subject,subject_type,relation,object,object_type
（4）插件管理器在Engine内起到插件管理作用，既包括GraphDB内部实现的插件，也包括各种外部工具连接器。,插件管理器,知识存储,,Engine内的插件管理作用,
7.商业RDF三元组数据库BlazegraphBlazegraph在1.5版本之前叫作Bigdata，但众所周知的“大数据”的兴起使得这个不温不火的RDF三元组库软件被淹没其中。,Blazegraph,知识存储,,商业RDF三元组数据库,
7.商业RDF三元组数据库BlazegraphBlazegraph在1.5版本之前叫作Bigdata，但众所周知的“大数据”的兴起使得这个不温不火的RDF三元组库软件被淹没其中。,Blazegraph,知识存储,,Bigdata,
但这个软件在“大数据”兴起前很多年就叫Bigdata，迫不得已改名叫Blazegraph之后，其开发理念也有所调整。,Blazegraph,知识存储,,Bigdata,
原来仅仅是支持RDF三元组存储和SPARQL，现在已经定位为全面支持Blueprints标准的图数据库。,图数据库,知识存储,,全面支持Blueprints标准的图数据库,
不过，其内部实现技术仍是面向RDF三元组和SPARQL的，因而可以理解为是“基于RDF三元组库的图数据库”。,图数据库,知识存储,,基于RDF三元组库的图数据库,
不过，其内部实现技术仍是面向RDF三元组和SPARQL的，因而可以理解为是“基于RDF三元组库的图数据库”。,图数据库,知识存储,,基于RDF三元组库的图数据库,
从2006年发布至今，Blazegraph一直由SYSTAP公司开发，虽然它既不是最知名的RDF三元组库，也不是最流行的图数据库，但开发进展稳扎稳打，积累了相对全面的功能。,Blazegraph,知识存储,,SYSTAP公司开发,
从2006年发布至今，Blazegraph一直由SYSTAP公司开发，虽然它既不是最知名的RDF三元组库，也不是最流行的图数据库，但开发进展稳扎稳打，积累了相对全面的功能。,Blazegraph,知识存储,,Blazegraph,
Blazegraph可以通过其官方网站下载。,Blazegraph,知识存储,,官方网站下载,
既可以将Blazegraph作为War包部署为Web程序，也可以将其配置为单机或分布式数据库服务器。,Blazegraph,知识存储,,War包部署为Web程序,
既可以将Blazegraph作为War包部署为Web程序，也可以将其配置为单机或分布式数据库服务器。,Blazegraph,知识存储,,单机或分布式数据库服务器,
图3-27Blazegraph的Web用户界面8.商业RDF三元组数据库StardogStardog是由美国Stardog_Union公司开发的RDF三元组数据库，其首个公开发布版本是2012年2月发布的Stardog_0.9。,Stardog,知识存储,,RDF三元组数据库,
图3-27Blazegraph的Web用户界面8.商业RDF三元组数据库StardogStardog是由美国Stardog_Union公司开发的RDF三元组数据库，其首个公开发布版本是2012年2月发布的Stardog_0.9。,Stardog,知识存储,,星图,
Stardog分为企业版和社区版，社区版可以免费用于非商业用途。,Stardog,知识存储,,企业版,
Stardog分为企业版和社区版，社区版可以免费用于非商业用途。,Stardog,知识存储,,社区版,
3.2.3原生图数据库1.最流行的图数据库Neo4jNeo4j的1.0版本发布于2010年。,Neo4j,知识存储,,最流行的图数据库,
3.2.3原生图数据库1.最流行的图数据库Neo4jNeo4j的1.0版本发布于2010年。,Neo4j,知识存储,,Neo4j,
Neo4j基于属性图模型，其存储管理层为属性图结构中的节点、节点属性、边、边属性等设计了专门的存储方案。,Neo4j,知识存储,,属性图模型,
Neo4j基于属性图模型，其存储管理层为属性图结构中的节点、节点属性、边、边属性等设计了专门的存储方案。,Neo4j,知识存储,,属性图模型,
这使得Neo4j在存储层对于图数据的存取效率天生就优于关系数据库。,Neo4j,知识存储,,关系数据库,
同时，Neo4j还具备OLTP数据库必需的ACID事务处理功能。,Neo4j,知识存储,,OLTP数据库,
如果图数据超过一定规模，系统性能就会因为磁盘、内存等限制而大幅降低。,图数据规模,知识存储,,系统性能降低,
Neo4j浏览器是功能完善的Neo4j可视化交互式客户端工具，可以用于执行Cypher语言。,Neo4j浏览器,知识存储,,功能完善的Neo4j可视化交互式客户端工具,
使用Neo4j内置的Movie图数据库执行Cypher查询，返回“TomHanks”所出演的全部电影，如图3-31所示。,Neo4j内置的Movie图数据库,知识存储,,Cypher查询,
使用Neo4j内置的Movie图数据库执行Cypher查询，返回“TomHanks”所出演的全部电影，如图3-31所示。,Neo4j,知识存储,,Movie图数据库,
此外，成功启动Neo4j服务器之后，会在7474和7473端口分别开启HTTP和HTTPS服务。,Neo4j,知识存储,,HTTP服务,
此外，成功启动Neo4j服务器之后，会在7474和7473端口分别开启HTTP和HTTPS服务。,Neo4j,知识存储,,HTTPS服务,
此外，成功启动Neo4j服务器之后，会在7474和7473端口分别开启HTTP和HTTPS服务。,7474,知识存储,,HTTP,
此外，成功启动Neo4j服务器之后，会在7474和7473端口分别开启HTTP和HTTPS服务。,7473,知识存储,,HTTPS,
例如，使用浏览器访问http://localhost:7474/进入Web界面，执行Cypher查询，其功能与Neo4j浏览器是一致的。,Neo4j浏览器,知识存储,,功能,
例如，使用浏览器访问http://localhost:7474/进入Web界面，执行Cypher查询，其功能与Neo4j浏览器是一致的。,Neo4j浏览器,知识存储,,Neo4j browser,
图3-31Neo4j浏览器界面2.分布式图数据库JanusGraphJanusGraph借助第三方分布式索引库Elasticsearch、Solr和Lucene实现各种类型数据的快速检索功能，包括地理信息数据、数值数据和全文搜索。,Neo4j,知识存储,,分布式图数据库,
JanusGraph的前身Titan是由Aurelius公司开发的，而该公司的创始人Rodriguez博士恰恰就是Blueprints标准及Gremlin语言的主要开发者，Titan对于Blueprints标准和Gremlin语言的全面支持便不难理解，JanusGraph基本上继承了Titan的这一特性。,JanusGraph,知识存储,,Titan,
同时，JanusGraph也是OLTP图数据库，其支持多用户并发访问和实时图遍历查询。,JanusGraph,知识存储,,OLTP图数据库,
另一方面，JanusGraph还具备基于Hadoop_MapReduce的图分析引擎，其可以将Gremlin导航查询自动转化为MapReduce任务。,JanusGraph,知识存储,,基于Hadoop_MapReduce的图分析引擎,
另一方面，JanusGraph还具备基于Hadoop_MapReduce的图分析引擎，其可以将Gremlin导航查询自动转化为MapReduce任务。,JanusGraph,知识存储,,基于Hadoop_MapReduce的图分析引擎,
从这个角度看，JanusGraph也可作为图计算引擎使用。,JanusGraph,知识存储,,图计算引擎,
从这个角度看，JanusGraph也可作为图计算引擎使用。,图计算引擎,知识存储,,JanusGraph,
3.图数据库OrientDBOrientDB对于数据模式的支持也相对灵活，可以管理无模式数据（Schema-less），也可以像关系数据库那样定义完整的模式（Schema-full），还可以适应介于两者之间的混合模式（Schema-mixed）数据。,OrientDB,知识存储,,对于数据模式的支持也相对灵活,
3.图数据库OrientDBOrientDB对于数据模式的支持也相对灵活，可以管理无模式数据（Schema-less），也可以像关系数据库那样定义完整的模式（Schema-full），还可以适应介于两者之间的混合模式（Schema-mixed）数据。,OrientDB,知识存储,,Schema-less,
3.图数据库OrientDBOrientDB对于数据模式的支持也相对灵活，可以管理无模式数据（Schema-less），也可以像关系数据库那样定义完整的模式（Schema-full），还可以适应介于两者之间的混合模式（Schema-mixed）数据。,OrientDB,知识存储,,Schema-full,
3.图数据库OrientDBOrientDB对于数据模式的支持也相对灵活，可以管理无模式数据（Schema-less），也可以像关系数据库那样定义完整的模式（Schema-full），还可以适应介于两者之间的混合模式（Schema-mixed）数据。,OrientDB,知识存储,,Schema-mixed,
在查询语言方面，OrientDB支持扩展的SQL和Gremlin用于图上的导航式查询；值得注意的是，在2.2版本引入的MATCH语句实现了声明式的模式匹配，这类似于Cypher语言查询模式。,OrientDB,知识存储,,查询语言,
在查询语言方面，OrientDB支持扩展的SQL和Gremlin用于图上的导航式查询；值得注意的是，在2.2版本引入的MATCH语句实现了声明式的模式匹配，这类似于Cypher语言查询模式。,OrientDB,知识存储,,OrientDB,
需要指出的是，Cayley虽然可以存储N-Quads格式的RDF文件，但目前尚不支持SPARQL查询。,Cayley,知识存储,,存储N-Quads格式的RDF文件,
需要指出的是，Cayley虽然可以存储N-Quads格式的RDF文件，但目前尚不支持SPARQL查询。,Cayley,知识存储,,Cayley,
总体来讲，基于关系的存储系统继承了关系数据库的优势，成熟度较高，在硬件性能和存储容量满足的前提下，通常能够适应千万到十亿级三元组规模的管理。,基于关系的存储系统,知识存储,,关系数据库的优势,
对于一般在百万到上亿级三元组的管理，使用稍高配置的单机系统和主流RDF三元组数据库（如Jena、RDF4J、Virtuoso等）完全可以胜任。,RDF三元组数据库,知识存储,,稍高配置的单机系统,
对于一般在百万到上亿级三元组的管理，使用稍高配置的单机系统和主流RDF三元组数据库（如Jena、RDF4J、Virtuoso等）完全可以胜任。,单机系统,知识存储,,single-machine-system,
对于一般在百万到上亿级三元组的管理，使用稍高配置的单机系统和主流RDF三元组数据库（如Jena、RDF4J、Virtuoso等）完全可以胜任。,RDF三元组数据库,知识存储,,主流RDF三元组数据库,
如果需要管理几亿到十几亿以上大规模的RDF三元组，则可尝试部署具备分布式存储与查询能力的数据库系统（如商业版的GraphDB和BlazeGraph、开源的JanusGraph等）。,GraphDB,知识存储,,具备分布式存储与查询能力的数据库系统,
近年来，以Neo4j为代表的图数据库系统发展迅猛，使用图数据库管理RDF三元组也是一种很好的选择；但目前大部分图数据库还不能直接支持RDF三元组存储，对于这种情况，可采用数据转换方式，先将RDF预处理为图数据库支持的数据格式（如属性图模型），再进行后续管理操作。,图数据库管理系统,知识存储,,RDF三元组管理,
近年来，以Neo4j为代表的图数据库系统发展迅猛，使用图数据库管理RDF三元组也是一种很好的选择；但目前大部分图数据库还不能直接支持RDF三元组存储，对于这种情况，可采用数据转换方式，先将RDF预处理为图数据库支持的数据格式（如属性图模型），再进行后续管理操作。,图数据库系统,知识存储,,graph database system,
近年来，以Neo4j为代表的图数据库系统发展迅猛，使用图数据库管理RDF三元组也是一种很好的选择；但目前大部分图数据库还不能直接支持RDF三元组存储，对于这种情况，可采用数据转换方式，先将RDF预处理为图数据库支持的数据格式（如属性图模型），再进行后续管理操作。,RDF三元组,知识存储,,RDF triples,
近年来，以Neo4j为代表的图数据库系统发展迅猛，使用图数据库管理RDF三元组也是一种很好的选择；但目前大部分图数据库还不能直接支持RDF三元组存储，对于这种情况，可采用数据转换方式，先将RDF预处理为图数据库支持的数据格式（如属性图模型），再进行后续管理操作。,图数据库,知识存储,,graph database,
本节首先以图数据库Neo4j为例介绍其内部存储方案，然后简要描述知识图谱数据库的两类索引技术。,Neo4j,知识存储,,内部存储方案,
本节首先以图数据库Neo4j为例介绍其内部存储方案，然后简要描述知识图谱数据库的两类索引技术。,Neo4j,知识存储,,图数据库,
3.3.1知识图谱数据库的存储：以Neo4j为例这一节将深入Neo4j图数据库底层，探究其原生的图存储方案。,知识图谱数据库的存储,知识存储,,Neo4j,
对于遵循属性图的图数据库，存储管理层的任务是将属性图编码表示为在磁盘上存储的数据格式。,存储管理层,知识存储,,将属性图编码表示为在磁盘上存储的数据格式,
虽然不同图数据库的具体存储方案各有差异，但一般认为具有“无索引邻接”特性（Index-FreeAdjacency）的图数据库才称为原生图数据库[35]。,原生图数据库,知识存储,,Index-FreeAdjacency,
在实现了“无索引邻接”的图数据库中，每个节点维护着指向其邻接节点的直接引用，这相当于每个节点都可看作是其邻接节点的一个“局部索引”，用其查找邻接节点比使用“全局索引”更能节省时间。,无索引邻接的图数据库,知识存储,,每个节点维护着指向其邻接节点的直接引用,
在实现了“无索引邻接”的图数据库中，每个节点维护着指向其邻接节点的直接引用，这相当于每个节点都可看作是其邻接节点的一个“局部索引”，用其查找邻接节点比使用“全局索引”更能节省时间。,局部索引,知识存储,,指向其邻接节点的直接引用,
这就意味着图导航操作代价与图大小无关，仅与图的遍历范围成正比。,图导航操作,知识存储,,图大小无关,
这就意味着图导航操作代价与图大小无关，仅与图的遍历范围成正比。,图导航操作代价,知识存储,,graph navigation cost,
作为对比，来看看在非原生图数据库中使用全局索引关联邻接节点的情形。,非原生图数据库,知识存储,,全局索引关联邻接节点,
如果觉得这样的查找代价还是可以接受的话，那么换一个问题，“谁认识张三”的查找代价是多少？显然，对于这个查询，需要通过全局索引检查每个节点，看其认识的人中有没有张三，总代价为O(nlogn)，这样的复杂度对于大图数据的遍历操作是不可接受的。,查找代价,知识存储,,通过全局索引检查每个节点，看其认识的人中有没有张三,
有人说，可为“被认识”关系再建一个同样的全局索引，但那样索引的维护开销就会翻倍，而且仍然不能做到图遍历操作代价与图规模无关。,“被认识”关系,知识存储,,equivalent,
只有将图数据的边表示的关系当作数据库的“一等公民”（即数据库中最基本、最核心的概念，如关系数据库中的“关系”），才能实现真正的“无索引邻接”特性。,图数据的边表示的关系,知识存储,,“一等公民”,
只有将图数据的边表示的关系当作数据库的“一等公民”（即数据库中最基本、最核心的概念，如关系数据库中的“关系”），才能实现真正的“无索引邻接”特性。,无索引邻接,知识存储,,“无索引邻接”特性,
图3-36邻接关系的全局索引示例图3-37将关系作为“一等公民”在Neo4j数据库中，属性图的不同部分是被分开存储在不同文件中的。,图3-36,知识存储,,邻接关系的全局索引,
图3-36邻接关系的全局索引示例图3-37将关系作为“一等公民”在Neo4j数据库中，属性图的不同部分是被分开存储在不同文件中的。,属性图,知识存储,,property graph,
正是这种将图结构与图上属性分开存储的策略，使得Neo4j具有高效率的图遍历操作。,Neo4j,知识存储,,将图结构与图上属性分开存储的策略,
首先，来看在Neo4j中是如何存储图节点和边的。,Neo4j,知识存储,,图数据库,
节点记录存储在文件neostore.nodestore.db中。,节点记录,知识存储,,文件neostore.nodestore.db,
节点记录的第0字节inUse是记录使用标志字节的，告诉数据库该记录是否在使用中，还是已经删除并可回收用来装载新的记录；第1～4字节nextRelId是与节点相连的第1条边的id；第5～8字节nextPropId是节点的第1个属性的id。,节点记录的第0字节inUse,知识存储,,记录使用标志字节,
节点记录的第0字节inUse是记录使用标志字节的，告诉数据库该记录是否在使用中，还是已经删除并可回收用来装载新的记录；第1～4字节nextRelId是与节点相连的第1条边的id；第5～8字节nextPropId是节点的第1个属性的id。,inUse,知识存储,,记录使用标志字节,
边记录存储在文件neostore.relationshipstore.db中。,neostore.relationshipstore.db,知识存储,,边记录存储,
边记录第0字节inUse含义与节点记录相同，表示是否正被数据库使用的标志；第1～4字节secondNode分别是该边的起始节点id和终止节点id；第9～12字节relType是指向该边的关系类型的指针；第13～16字节firstPrevRelId和第17～20字节firstNextRelId分别为指向起始节点上前一个和后一个边记录的指针；第21～24字节secPrevRelId和第25～28字节secNextRelId分别为指向终止节点上前一个和后一个边记录的指针；指向前后边记录的4个指针形成了两个“关系双向链”；第29～32字节nextPropId是边上的第1个属性的id。,inUse,知识存储,,是否正被数据库使用的标志,
和第5～8字节firstNode图3-38Neo4j中节点和边记录的物理存储结构Neo4j实现节点和边快速定位的关键是“定长记录”的存储方案，将具有定长记录的图结构与具有变长记录的属性数据分开存储。,定长记录,知识存储,,fixed-length record,
例如，一个节点记录长度是9字节，如果要查找id为99的节点记录所在位置（id从0开始），则可直接到节点存储文件第891个字节处访问（存储文件从第0个字节开始）。,节点记录长度,知识存储,,一个节点记录长度是9字节,
例如，一个节点记录长度是9字节，如果要查找id为99的节点记录所在位置（id从0开始），则可直接到节点存储文件第891个字节处访问（存储文件从第0个字节开始）。,节点记录长度,知识存储,,9字节,
例如，一个节点记录长度是9字节，如果要查找id为99的节点记录所在位置（id从0开始），则可直接到节点存储文件第891个字节处访问（存储文件从第0个字节开始）。,查找id为99的节点记录所在位置,知识存储,,节点存储文件第891个字节处访问（存储文件从第0个字节开始）,
边记录也是“定长记录”，长度为33字节。,边记录,知识存储,,定长记录,
这样，数据库已知记录id可以O(1)的代价直接计算其存储地址，而避免了全局索引中O(nlogn)的查找代价。,数据库已知记录id,知识存储,,O(1)的代价直接计算其存储地址,
这样，数据库已知记录id可以O(1)的代价直接计算其存储地址，而避免了全局索引中O(nlogn)的查找代价。,数据库已知记录id,知识存储,,O(1)的代价直接计算其存储地址,
这样，数据库已知记录id可以O(1)的代价直接计算其存储地址，而避免了全局索引中O(nlogn)的查找代价。,全局索引,知识存储,,O(nlogn)的查找代价,
图3-39展示了Neo4j中各种存储文件之间是如何交互的。,存储文件,知识存储,,交互,
存储在节点文件中的节点1和节点4均有指针指向存储在属性文件中各自的第1个属性记录；也有指针指向存储在边文件中各自的第1条边，分别为边7和边8。,节点文件,知识存储,,节点1和节点4,
存储在节点文件中的节点1和节点4均有指针指向存储在属性文件中各自的第1个属性记录；也有指针指向存储在边文件中各自的第1条边，分别为边7和边8。,节点文件中的节点1,知识存储,,指针指向存储在属性文件中各自的第1个属性记录,
存储在节点文件中的节点1和节点4均有指针指向存储在属性文件中各自的第1个属性记录；也有指针指向存储在边文件中各自的第1条边，分别为边7和边8。,节点文件中的节点4,知识存储,,指针指向存储在属性文件中各自的第1个属性记录,
存储在节点文件中的节点1和节点4均有指针指向存储在属性文件中各自的第1个属性记录；也有指针指向存储在边文件中各自的第1条边，分别为边7和边8。,节点文件中的节点1,知识存储,,指针指向存储在边文件中各自的第1条边,
存储在节点文件中的节点1和节点4均有指针指向存储在属性文件中各自的第1个属性记录；也有指针指向存储在边文件中各自的第1条边，分别为边7和边8。,节点文件中的节点4,知识存储,,指针指向存储在边文件中各自的第1条边,
存储在节点文件中的节点1和节点4均有指针指向存储在属性文件中各自的第1个属性记录；也有指针指向存储在边文件中各自的第1条边，分别为边7和边8。,节点1,知识存储,,节点文件中的节点1,
需要注意的是，每个边记录实际上维护着两个双向链表，一个是起始节点上的边，一个是终止节点上的边，可以将边记录想象为被起始节点和终止节点共同拥有，双向链表的优势在于不仅可在查找节点上的边时进行双向扫描，而且支持在两个节点间高效率地添加和删除边。,边记录,知识存储,,edge record,
这些操作除了记录字段的读取，就是定长记录地址的计算，均是O(1)时间的高效率操作。,操作,知识存储,,记录字段的读取,
这些操作除了记录字段的读取，就是定长记录地址的计算，均是O(1)时间的高效率操作。,操作,知识存储,,定长记录地址的计算,
这些操作除了记录字段的读取，就是定长记录地址的计算，均是O(1)时间的高效率操作。,操作,知识存储,,记录字段的读取,
这些操作除了记录字段的读取，就是定长记录地址的计算，均是O(1)时间的高效率操作。,操作,知识存储,,定长记录地址的计算,
可见，正是由于将边作为“一等公民”，将图结构实现为定长记录的存储方案，赋予了Neo4j作为原生图数据库的“无索引邻接”特性。,Neo4j,知识存储,,无索引邻接,
3.3.2知识图谱数据库的索引图数据上的索引一种是对节点或边上属性数据的索引，一种是对图结构的索引；前者可应用关系数据库中已有的B+树索引技术直接实现，而后者仍是业界没有达成共识的、开放的研究问题。,索引图数据上的索引,知识存储,,对节点或边上属性数据的索引,
3.3.2知识图谱数据库的索引图数据上的索引一种是对节点或边上属性数据的索引，一种是对图结构的索引；前者可应用关系数据库中已有的B+树索引技术直接实现，而后者仍是业界没有达成共识的、开放的研究问题。,索引图数据上的索引,知识存储,,对图结构的索引,
3.3.2知识图谱数据库的索引图数据上的索引一种是对节点或边上属性数据的索引，一种是对图结构的索引；前者可应用关系数据库中已有的B+树索引技术直接实现，而后者仍是业界没有达成共识的、开放的研究问题。,索引图数据上的索引,知识存储,,对节点或边上属性数据的索引,
3.3.2知识图谱数据库的索引图数据上的索引一种是对节点或边上属性数据的索引，一种是对图结构的索引；前者可应用关系数据库中已有的B+树索引技术直接实现，而后者仍是业界没有达成共识的、开放的研究问题。,索引图数据上的索引,知识存储,,对图结构的索引,
1.属性数据索引Neo4j数据库在前述存储方案的基础上还支持用户对属性数据建立索引，目的是加速针对某属性的查询处理性能。,属性数据索引,知识存储,,Neo4j数据库,
1.属性数据索引Neo4j数据库在前述存储方案的基础上还支持用户对属性数据建立索引，目的是加速针对某属性的查询处理性能。,属性数据索引,知识存储,,Neo4j数据库属性数据建立索引,
Neo4j索引的定义通过Cypher语句完成，目前支持对于同一个类型节点的某个属性构建索引。,Neo4j索引,知识存储,,Cypher语句完成,
Neo4j索引的定义通过Cypher语句完成，目前支持对于同一个类型节点的某个属性构建索引。,Neo4j索引,知识存储,,构建索引,
例如，对所有程序员节点的姓名属性构建索引。,对程序员节点姓名属性构建索引,知识存储,,对所有程序员节点的姓名属性构建索引,
在一般情况下，在查询中没有必要指定需要使用的索引，查询优化器会自动选择要用到的索引。,查询,知识存储,,查询优化器自动选择要用到的索引,
在一般情况下，在查询中没有必要指定需要使用的索引，查询优化器会自动选择要用到的索引。,查询优化器,知识存储,,自动选择要用到的索引,
例如，下面的查询查找姓名为张三的程序员，显然会用到刚刚建立的索引。,索引,知识存储,,查找姓名为张三的程序员,
应用该索引无疑会根据姓名属性的值快速定位到姓名是“张三”的节点，而无须扫描程序员节点的全部属性。,应用该索引,知识存储,,根据姓名属性的值快速定位到姓名是“张三”的节点,
删除索引的语句为：不难发现，为图节点或边的属性建立索引与为关系表的某一列建立索引在本质上并无不同之处，完全可以通过B+树或散列表实现。,为图节点或边的属性建立索引,知识存储,,为关系表的某一列建立索引,
删除索引的语句为：不难发现，为图节点或边的属性建立索引与为关系表的某一列建立索引在本质上并无不同之处，完全可以通过B+树或散列表实现。,为图节点或边的属性建立索引,知识存储,,为关系表的某一列建立索引,
这种索引并不涉及图数据上的任何图结构信息。,倒排索引,知识存储,,非图结构信息,
2.图结构索引图结构索引是为图数据中的点边结构信息建立索引的方法。,图结构索引,知识存储,,为图数据中的点边结构信息建立索引的方法,
2.图结构索引图结构索引是为图数据中的点边结构信息建立索引的方法。,图结构索引,知识存储,,graph structure index,
利用图结构索引可以对图查询中的结构信息进行快速匹配，从而大幅削减查询搜索空间。,图查询,知识存储,,利用图结构索引可以对图查询中的结构信息进行快速匹配，从而大幅削减查询搜索空间。,
大体上，图结构索引分为“基于路径的”和“基于子图的”两种。,图结构索引,知识存储,,基于路径的,
（1）基于路径的图索引。,基于路径的图索引,知识存储,,基于索引,
一种典型的基于路径的图索引叫作GraphGrep[36]。,GraphGrep,知识存储,,基于路径的图索引,
一种典型的基于路径的图索引叫作GraphGrep[36]。,GraphGrep,知识存储,,基于路径的图索引,
这种索引将图中长度小于或等于一个固定长度的全部路径构建为索引结构。,倒排索引,知识存储,,构建为索引结构,
索引的关键字可以是组成路径的节点或边上属性值或标签的序列。,索引的关键字,知识存储,,组成路径的节点或边上属性值或标签的序列,
图3-40是在图3-3的属性图上构建的GraphGrep索引。,GraphGrep,知识存储,,在图3-3的属性图上构建的索引,
这里构建的是长度小于或等于2的路径索引，关键字为路径上的边标签序列，值为路径经过的节点id序列。,路径索引,知识存储,,长度小于或等于2的路径索引,
这里构建的是长度小于或等于2的路径索引，关键字为路径上的边标签序列，值为路径经过的节点id序列。,路径索引,知识存储,,path index,
"例如，索引将关键字“认识.参加”映射到节点id序列(1,4,3)和(1,4,5)。",索引,知识存储,,关键字“认识.参加”映射,
"例如，索引将关键字“认识.参加”映射到节点id序列(1,4,3)和(1,4,5)。",索引,知识存储,,inxe,
利用该路径索引，类似前面出现过的“查询年龄为29的参加了项目3的程序员参加的其他项目及其直接或间接认识的程序员参加的项目”的查询处理效率会大幅提高，因为由节点1出发，根据关键字“认识.参加”，可以快速找到满足条件的节点3和节点5。,路径索引,知识存储,,查询处理效率提高,
利用该路径索引，类似前面出现过的“查询年龄为29的参加了项目3的程序员参加的其他项目及其直接或间接认识的程序员参加的项目”的查询处理效率会大幅提高，因为由节点1出发，根据关键字“认识.参加”，可以快速找到满足条件的节点3和节点5。,路径索引,知识存储,,path index,
（2）基于子图的索引。,基于子图的索引,知识存储,,基于概念的索引,
基于子图的索引可以看作是基于路径索引的一般化形式，是将图数据中的某些子图结构信息作为关键字，将该子图的实例数据作为值而构建的索引结构。,基于子图的索引,知识存储,,基于路径索引的一般化形式,
基于子图的索引可以看作是基于路径索引的一般化形式，是将图数据中的某些子图结构信息作为关键字，将该子图的实例数据作为值而构建的索引结构。,基于子图的索引,知识存储,,基于路径索引的一般化形式,
图3-41是在图3-3的属性图上构建的一种子图索引。,图3-41,知识存储,,在图3-3的属性图上构建的一种子图索引,
"满足第1个关键字子图的节点序列为(1,2,4)，满足第2个关键字子图的节点序列为(1,4,3)。",关键字子图,知识存储,,第1个关键字子图节点序列,
如果查询中包含某些作为关键字的子图结构，则可以利用该子图索引，快速找到与这些子图结构匹配的节点序列，这样可大幅度减小查询操作的搜索空间。,索引,知识存储,,快速找到与这些子图结构匹配的节点序列，这样可大幅度减小查询操作的搜索空间,
如果查询中包含某些作为关键字的子图结构，则可以利用该子图索引，快速找到与这些子图结构匹配的节点序列，这样可大幅度减小查询操作的搜索空间。,子图索引,知识存储,,subgraph index,
如果查询中包含某些作为关键字的子图结构，则可以利用该子图索引，快速找到与这些子图结构匹配的节点序列，这样可大幅度减小查询操作的搜索空间。,快速找到与这些子图结构匹配的节点序列,知识存储,,find the node sequence matching these subgraph structures,
图3-40基于路径的图索引示例图3-41基于子图的图索引示例不过，一个图数据的子图有指数个，将哪些子图作为关键字建立索引尚未得到很好的解决。,基于路径的图索引,知识存储,,基于图索引,
图3-40基于路径的图索引示例图3-41基于子图的图索引示例不过，一个图数据的子图有指数个，将哪些子图作为关键字建立索引尚未得到很好的解决。,基于路径的图索引,知识存储,,based on path,
一种叫作gIndex[37]的索引方法，首先利用数据挖掘方法，在图数据中发现出现次数超过一定阈值的频繁子图，再将去掉冗余之后的频繁子图作为关键字建立子图索引。,gIndex,知识存储,,索引方法,
一种叫作gIndex[37]的索引方法，首先利用数据挖掘方法，在图数据中发现出现次数超过一定阈值的频繁子图，再将去掉冗余之后的频繁子图作为关键字建立子图索引。,gIndex,知识存储,,g索引,
但gIndex建立索引的过程是相当耗时的，而且用户查询中还有可能没有包含任何一个频繁子图，这样就无法利用该子图索引。,gIndex,知识存储,,建立索引的过程是相当耗时的,
但gIndex建立索引的过程是相当耗时的，而且用户查询中还有可能没有包含任何一个频繁子图，这样就无法利用该子图索引。,gIndex,知识存储,,等价索引,
一种更合理的方法是从用户的查询日志中挖掘频繁使用的子图模式，并以此作为关键字建立索引。,频繁使用的子图模式,知识存储,,从用户的查询日志中挖掘,
一种更合理的方法是从用户的查询日志中挖掘频繁使用的子图模式，并以此作为关键字建立索引。,频繁使用的子图模式,知识存储,,从用户的查询日志中挖掘频繁使用的子图模式,
一种更合理的方法是从用户的查询日志中挖掘频繁使用的子图模式，并以此作为关键字建立索引。,关键字建立索引,知识存储,,以此作为关键字建立索引,
3.4开源工具实践3.4.1三元组数据库Apache_Jena1.开源工具简介Apache_Jena是Apache顶级项目，其前身为惠普实验室开发的Jena工具包。,Apache_Jena,知识存储,,三元组数据库,
3.4开源工具实践3.4.1三元组数据库Apache_Jena1.开源工具简介Apache_Jena是Apache顶级项目，其前身为惠普实验室开发的Jena工具包。,Apache_Jena,知识存储,,Jena工具包,
Jena是语义Web领域主要的开源框架和RDF三元组库，较好地遵循W3C标准，其功能包括：RDF数据管理、RDFS和OWL本体管理、SPARQL查询处理等。,Jena,知识存储,,语义Web领域主要的开源框架和RDF三元组库,
Jena具备一套原生存储引擎，可对RDF三元组进行基于磁盘或内存的存储管理；同时具有一套基于规则的推理引擎，用于执行RDFS和OWL本体推理任务。,Jena,知识存储,,一套原生存储引擎,
Jena具备一套原生存储引擎，可对RDF三元组进行基于磁盘或内存的存储管理；同时具有一套基于规则的推理引擎，用于执行RDFS和OWL本体推理任务。,Jena,知识存储,,一套基于规则的推理引擎,
Jena具备一套原生存储引擎，可对RDF三元组进行基于磁盘或内存的存储管理；同时具有一套基于规则的推理引擎，用于执行RDFS和OWL本体推理任务。,原生存储引擎,知识存储,,original storage engine,
Jena具备一套原生存储引擎，可对RDF三元组进行基于磁盘或内存的存储管理；同时具有一套基于规则的推理引擎，用于执行RDFS和OWL本体推理任务。,推理引擎,知识存储,,rule-based reasoning engine,
本实践相关工具、实验数据及操作说明由OpenKG提供，地址为http://openkg.cn。,本实践相关工具,知识存储,,OpenKG,
2.开源工具的技术架构ApacheJena框架如图3-42所示。,ApacheJena,知识存储,,开源工具的技术架构,
推理API为上层提供本体推理服务，可以使用Jena内置基于规则的推理机进行RDFS和OWL本体上的推理任务，或者选择通过接口调用第三方外部推理机。,推理API,知识存储,,上层提供本体推理服务,
推理API为上层提供本体推理服务，可以使用Jena内置基于规则的推理机进行RDFS和OWL本体上的推理任务，或者选择通过接口调用第三方外部推理机。,推理API,知识存储,,reasoning API,
Jena对外界应用程序的API包括实现基本三元组管理功能的RDFAPI、实现RDFS和OWL本体推理功能的本体API和实现查询处理功能的SPARQL_API。,Jena,知识存储,,对外界应用程序的API,
Jena对外界应用程序的API包括实现基本三元组管理功能的RDFAPI、实现RDFS和OWL本体推理功能的本体API和实现查询处理功能的SPARQL_API。,Jena,知识存储,,等价,
Java应用程序代码可以通过导入类库的形式直接调用这些API。,Java应用程序代码,知识存储,,导入类库的形式直接调用这些API,
Jena还提供了支持各种RDF三元组格式的解析器和编写器，支持的三元组格式包括：RDF/XML、Turtle、N-Triple和RDFa。,RDF/XML,知识存储,,RDF XML,
图3-42Apache_Jena框架实质上，Jena是一个Java框架类库。,Jena,知识存储,,一个Java框架类库,
在一般情况下，上述功能需要在Java程序中进行调用。,上述功能,知识存储,,Java程序中进行调用,
Jena为了用户使用方便，提供了一个名为Fuseki的独立RDF数据库Web应用程序。,Fuseki,知识存储,,Jena,
本实践将使用Fuseki作为认识知识图谱数据库的入门工具。,Fuseki,知识存储,,认识知识图谱数据库的入门工具,
Fuseki是基于Jena的SPARQL服务器，可以作为独立的服务由命令行启动，也可以作为操作系统服务或JavaWeb应用程序。,Fuseki,知识存储,,基于Jena的SPARQL服务器,
Fuseki是基于Jena的SPARQL服务器，可以作为独立的服务由命令行启动，也可以作为操作系统服务或JavaWeb应用程序。,Fuseki,知识存储,,基于Jena的SPARQL服务器,
Fuseki底层存储基于TDB，具有SPARQL查询处理的Web用户界面，同时提供服务器监控和管理功能界面。,Fuseki,知识存储,,TDB,
Fuseki支持最新的SPARQL1.1版本，同时支持SPARQL图存储HTTP协议。,Fuseki,知识存储,,SPARQL1.1版本同时支持SPARQL图存储HTTP协议,
访问OpenKG可以获取使用实例和整体配置细节。,访问OpenKG,知识存储,,使用实例和整体配置细节,
3.其他类似工具RDF4J是Eclipse基金会旗下的开源孵化项目，其前身是荷兰软件公司Aduna开发的Sesame框架，其功能包括：RDF数据的解析、存储、推理和查询等。,RDF4J,知识存储,,Eclipse基金会旗下的开源孵化项目,
RDF4J提供内存和磁盘两种RDF存储机制，支持SPARQL1.1查询和更新语言。,RDF4J,知识存储,,内存RDF存储机制,
RDF4J提供内存和磁盘两种RDF存储机制，支持SPARQL1.1查询和更新语言。,RDF4J,知识存储,,磁盘RDF存储机制,
RDF4J提供内存和磁盘两种RDF存储机制，支持SPARQL1.1查询和更新语言。,RDF4J,知识存储,,RDF for Java,
gStore是由北京大学开发的基于图的RDF三元组数据库。,gStore,知识存储,,北京大学开发的基于图的RDF三元组数据库,
AllegroGraph是Franz公司开发的RDF三元组数据库。,AllegroGraph,知识存储,,Franz公司开发的RDF三元组数据库,
AllegroGraph对语义推理功能具有较为完善的支持。,AllegroGraph,知识存储,,语义推理功能,
除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。,AllegroGraph_RDFS++推理机,知识存储,,三元组数据库的基本功能,
除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。,AllegroGraph_RDFS++推理机,知识存储,,AllegroGraph RDFS++ Reasoner,
除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。,OWL2RL推理机,知识存储,,OWL2RL Reasoner,
除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。,Prolog规则推理系统,知识存储,,Prolog Rule Reasoner,
除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。,时空推理机制,知识存储,,Temporal Reasoning Mechanism,
除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。,社会网络分析,知识存储,,Social Network Analysis,
GraphDB是由Ontotext软件公司开发的RDF三元组数据库。,GraphDB,知识存储,,Ontotext软件公司开发的RDF三元组数据库,
GraphDB实现了RDF4J框架的SAIL层，可以使用RDF4J的RDF模型、解析器和查询引擎直接访问GraphDB。,GraphDB,知识存储,,RDF4J框架的SAIL层,
GraphDB实现了RDF4J框架的SAIL层，可以使用RDF4J的RDF模型、解析器和查询引擎直接访问GraphDB。,GraphDB,知识存储,,RDF4J框架的SAIL层,
GraphDB的特色是对于RDF推理功能的良好支持。,GraphDB,知识存储,,对于RDF推理功能的良好支持,
3.4.2面向RDF的三元组数据库gStore1.开源工具简介gStore是由北京大学计算机科学技术研究所数据管理实验室自2011年开始研发的面向RDF知识图谱的开源图数据库系统，遵循Apache开源协议。,gStore,知识存储,,面向RDF的知识图谱的开源图数据库系统,
3.4.2面向RDF的三元组数据库gStore1.开源工具简介gStore是由北京大学计算机科学技术研究所数据管理实验室自2011年开始研发的面向RDF知识图谱的开源图数据库系统，遵循Apache开源协议。,gStore,知识存储,,面向RDF的知识图谱的开源图数据库系统,
不同于传统基于关系数据库的RDF数据管理方法，gStore原生基于图数据模型，在存储RDF数据时维持并根据其图结构构建了基于二进制位图索引的新型索引结构——VS树。,gStore,知识存储,,基于图数据模型的RDF数据管理方法,
本实践相关工具、实验数据及操作说明由OpenKG提供，下载链接为http://openkg.cn/tool/gstore。,本实践相关工具,知识存储,,OpenKG提供,
2.开源工具的技术架构如图3-43所示为gStore的整体处理流程，gStore的RDF数据管理可分为两部分：离线数据存储和在线查询处理。,gStore的整体处理流程,知识存储,,开源工具的技术架构,
图3-43gStore的整体处理流程在离线数据存储阶段，gStore将RDF数据解析成图格式并以邻接表的方式存储在键值数据库上。,gStore,知识存储,,离线数据存储,
图3-43gStore的整体处理流程在离线数据存储阶段，gStore将RDF数据解析成图格式并以邻接表的方式存储在键值数据库上。,gStore,知识存储,,gStore,
同时，gStore将RDF数据上的所有点和边通过二进制编码的方式编码成若干位图索引，并将这些位图索引组织成VS树。,gStore,知识存储,,RDF数据上的所有点和边通过二进制编码的方式编码成若干位图索引，并将这些位图索引组织成VS树,
同时，gStore将RDF数据上的所有点和边通过二进制编码的方式编码成若干位图索引，并将这些位图索引组织成VS树。,gStore,知识存储,,VS树,
在在线查询处理阶段，gStore也将SPARQL查询解析成查询图。,gStore,知识存储,,在线查询处理阶段,
然后，gStore按照对RDF数据图的编码方式，将SPARQL查询图进行编码以形成一个标签图，并在VS树和RDF数据图的邻接表上进行检索以得到每个查询变量的候选匹配。,gStore,知识存储,,对RDF数据图的编码方式,
然后，gStore按照对RDF数据图的编码方式，将SPARQL查询图进行编码以形成一个标签图，并在VS树和RDF数据图的邻接表上进行检索以得到每个查询变量的候选匹配。,SPARQL查询图,知识存储,,SPARQL query graph,
最后，gStore将所有查询变量的候选匹配连接成最终匹配。,gStore,知识存储,,查询变量的候选匹配连接成最终匹配,
目前，gStore只能在Linux系统上通过Shell命令编译、安装与运行。,gStore,知识存储,,Linux系统上通过Shell命令编译、安装与运行,
同时，gStore官网还提供了gStore_Workbench，方便用户操作RDF数据库。,gStore_Workbench,知识存储,,gStore官网,
具体包括：（1）环境配置。,SPO,知识存储,,环境配置,
可以从OpenKG网站或gStore官网上下载gStore源代码，然后通过make来编译得到gStore运行程序。,gStore,知识存储,,OpenKG网站或gStore官网上下载gStore源代码,
同时，通过OpenKG网站或gStore官网可以下载gStore_Workbench，进行编译安装后可以得到gStore_Workbench。,gStore_Workbench,知识存储,,OpenKG网站或gStore官网下载,
同时，通过OpenKG网站或gStore官网可以下载gStore_Workbench，进行编译安装后可以得到gStore_Workbench。,gStore_Workbench,知识存储,,gStore工作台,
（2）数据导入。,数据导入,知识存储,,SPO三元组,
gStore目前支持NT格式的RDF数据，利用gStore安装路径下bin目录中gbuild或者gStore_Workbench中的数据库管理页面导入数据。,gStore,知识存储,,NT格式的RDF数据,
gStore_Workbench中的数据库管理页面还记录目前gStore包括的数据库统计信息。,gStore_Workbench中的数据库管理页面,知识存储,,记录目前gStore包括的数据库统计信息,
（3）查询处理。,查询处理,知识存储,,SPO,
gStore目前完全支持SPARQL1.0查询语法，利用gStore安装路径下bin目录中gquery或者gStoreWorkbench中的图数据库查询页面，就可以输入查询然后得到结果。,gStore,知识存储,,SPARQL1.0查询语法,
gStore目前完全支持SPARQL1.0查询语法，利用gStore安装路径下bin目录中gquery或者gStoreWorkbench中的图数据库查询页面，就可以输入查询然后得到结果。,gStore,知识存储,,gStore,
gStore同时还提供HTTP接口，可以利用gStore安装路径下bin目录中ghttp启动HTTP服务，进而接收其他机器远程通过HTTP发来的SPARQL查询请求。,gStore,知识存储,,HTTP接口,
gStore同时还提供HTTP接口，可以利用gStore安装路径下bin目录中ghttp启动HTTP服务，进而接收其他机器远程通过HTTP发来的SPARQL查询请求。,gStore,知识存储,,gStore,
访问OpenKG网站可以获取使用实例和整体配置细节。,OpenKG,知识存储,,使用实例和整体配置细节,
3.其他类似工具Jena的前身是惠普实验室（HP_Labs）2000年开发的工具包。,Jena,知识存储,,惠普实验室（HP_Labs）2000年开发的工具包,
Jena从发布起就一直是语义Web领域最为流行的开源Java框架和RDF数据库之一，并始终遵循W3C标准，其提供的API功能包括：RDF数据管理、RDFS和OWL本体管理、SPARQL查询处理。,Jena,知识存储,,语义Web领域最为流行的开源Java框架和RDF数据库之一,
针对RDF数据，Jena维护了一张大的三元组表和三种属性表，包括单值属性表、多值属性表和属性类表。,Jena,知识存储,,维护三元组表和属性表,
针对RDF数据，Jena维护了一张大的三元组表和三种属性表，包括单值属性表、多值属性表和属性类表。,三元组表,知识存储,,三元组,
针对RDF数据，Jena维护了一张大的三元组表和三种属性表，包括单值属性表、多值属性表和属性类表。,属性表,知识存储,,属性表,
Virtuoso是OpenLink公司开发的知识图谱管理系统，有免费的社区版和收费的商业版。,Virtuoso,知识存储,,OpenLink公司开发的知识图谱管理系统,
Virtuoso是可以支持包括RDF在内的多种数据模型的混合数据库管理系统。,Virtuoso,知识存储,,混合数据库管理系统,
其基础源自开发了多年的传统关系数据库管理系统，因此具备较为完善的事务管理、并发控制和完整性机制。,ER模型,知识存储,,关系数据库管理系统,