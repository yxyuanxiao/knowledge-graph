第7章 语义搜索

王昊奋 上海乐言信息科技有限公司，王萌 东南大学

知识图谱能够赋予信息明确的结构和语义，使机器不仅可以直观地显示这些信息，更

能够理解、处理和整合它们。近年来，随着链接开放数据  LOD（Linked  Open  Data）、
OpenKG  等项目的全面展开，知识图谱数据源的数量激增，大量以  RDF  为数据模型的图

结构语义数据被发布，如 DBpedia[1]、Wikidata[2]、zhishi.me[3]等。互联网从仅包含网页和
网页之间超链接的文档万维网逐渐转变成包含大量描述各种实体和实体之间丰富关系的语

义万维网。在这种背景下，以谷歌为代表的各大搜索引擎公司纷纷构建知识图谱来改善搜

索质量，从而拉开了语义搜索的序幕。

与传统互联网中的文档检索不同，语义搜索需要处理粒度更细的结构化语义数据，因

此也面临着前所未有的挑战[4]。原有成熟的针对非结构化的、Web  文档的存储与索引技
术对知识图谱不再适用。现有的排序算法也不能直接应用到面向实体和关系的知识图谱语

义搜索中。以  SPARQL  查询为代表的结构化查询语言的出现，为支持知识图谱的语义搜
索提供了基础。此外，支持用户熟悉的关键词、自然语言查询对于知识图谱的语义搜索也

至关重要。本章旨在全面系统地介绍以  RDF  为数据模型的知识图谱语义搜索基础技术以
及面临的挑战。

7.1 语义搜索简介

搜索也称信息检索（Information  Retrieval），是从信息资源集合获得与信息需求相关

的信息资源的活动[1]。近年来，在互联网和企业应用上，搜索技术受到了广泛的关注和应

用。其中，最广泛的信息检索主要是面向文档为单位的检索（Document  Retrieval）。此
外，面向数据的检索（Data  Retrieval）也受到越来越多的关注，主要包括基于数据库的检

索和基于知识库的检索，其特点是能够提供更精确的答案[5]。

面向文档和面向数据两种模式间的技术差异大致可以分为三个部分，即对用户需求的

Model）、对底层数据的表示（Data 

表示（Query 
Technique）。面向文档的信息检索主要通过轻量级的语法模型（Lightweight 
Syntax-
Centric  Model）表示用户的检索需求和资源的内容，即目前占主导地位的关键词模式——
词袋模型（Bag-of-  Words）。这种技术对主题搜索（Topic  Search）的效果很好，即给定
一个主题检索相关的文档，但不能应对更加复杂的信息检索需求。相比来说，基于数据库

Model）和匹配技术（Matching

和基于知识库的检索系统能够通过使用表达能力更强的模型来表示用户的需求，并且利用

数据内在的结构和语义关联，允许更为复杂的查询，进而提供更加精确和具体的答案。

语义关注的是能用于搜索的资源的含义。这些含义是通过语义模型构建的，例如语言

学模型和概念模型。其中，语言学模型主要侧重对词语级别的关系建模、分类以及构建同

义词库，而概念模型主要侧重对论域中的语法元素的关系建模，以及从语法元素到论域的

映射。此外，语义模型要求必须具备表达能力，即语言和建模结构的数量。同时，语义模

型还必须能够形式化，即解析过程必须是可计算的。可见，不同的语义模型对应的搜索技

术也不同。也就是说，并不存在单一类型的语义搜索技术，而是利用各种不同表达能力的

语义模型的搜索系统。

显然，基于数据库和基于知识库的检索系统属于重量级语义搜索系统，因为它们采用

显式的和形式化的模型，例如关系数据库中的E-R图、RDF和OWL中的知识模型。近年
来，语义数据的数量不断增加，特别是  RDF  数据，通过标记的方式已经嵌入在许多网页
文档中，或与文档形成了关联。通过在检索过程中结合使用这些表达能力更强的类型数

据，纯粹面向文档的检索系统已经包含了一定程度的语义使用，已经变成了轻量级的语义

搜索系统。

如图7-1所示，一个语义搜索系统的基本框架包括查询构建、查询处理、结果展示、

查询优化、语义模型、资源及文档等。受益于结构化和语义数据的可用性的增加，重量级

语义搜索系统的使用不再局限于专用领域，可能在更大规模的场景（例如Web）中找到其
应用。目前，大量的语义网络搜索系统已经被构建，其目的是利用互联网上大量的  RDF
数据及表达Web上可用的OWL本体。一方面，可以采用应用于信息检索领域的方法和技
术来解决可扩展性问题，以克服  Web  数据的质量问题，并处理与长文本描述相关的数据

元素[6]。另一方面，也可以直接将数据库和语义网技术应用于信息检索问题，将丰富的结

构化和高度表达的数据的可用性提高到搜索过程中。总的来说，不同的技术路线和语义搜

索系统不仅在使用的数据方面存在趋同，而且在搜索中应用的技术也趋于一致。文档检索

与数据检索之间逐渐因为语义搜索的出现变得没有明确的界限，语义在一定程度上始终参

与检索过程。目前，最先进的语义搜索系统结合了一系列技术，包括结构化查询语言的构

建、基于统计的信息检索排序方法、有效索引和查询处理的数据库方法以及复杂推理等技

术。

图7-1 语义搜索基本框架

7.2 结构化的查询语言

语义搜索的核心在于查询的构建和理解，本小节主要介绍面向知识图谱的标准结构化

查询语言。回顾前面章节中的内容，知识图谱的数据模型为 RDF，它是 W3C 推荐的用于
表示语义信息的重要数据标准。RDF  的核心思想是通过  RDF  三元组的形式描述事实知
识。多个RDF三元组组成的集合构成了RDF数据集。目前，RDF已经成为知识图谱的主要
描述格式，越来越多的知识图谱数据以  RDF  三元组的形式发布出来。多个知识图谱通过
RDF三元组之间相互关联，形成了一个巨大的数据关联网络。以LOD为例，整个项目已经
包含超过1000多亿条RDF三元组并依然在快速增加，蕴含了丰富的信息资源。精确查询并
获取知识图谱中三元组中的有关信息是语义搜索的核心。

SPARQL查询语言是面向RDF图的结构化查询语言，目前已被W3C推荐为RDF数据的

标准查询语言[2]，其地位和查询形式都类似于关系数据库的 SQL 语言。W3C 推荐RDF 数
据集的发布者在发布数据的同时，能够提供相应的  SPARQL  检索引擎和查询接口。以

Apache  软件基金会的  Jena[3]项目为代表的一些  SPARQL  开源框架，进一步促进了组织机
构和个人快速方便地搭建自己的SPARQL查询服务。

SPARQL  查询的核心处理单元是类似  RDF  三元组形式的三元组模式（Triple
Pattern），不同之处在于 
SPARQL  的三元组模式中，主语、谓语或宾语可以是变量
（以“?”开头标识）。例如，三元组模式<?film, director, Tim burton>可以用来查询“蒂姆·伯
顿执导的电影有哪些？”同样，类似于  RDF  三元组可以组成  RDF  图的道理，由多个
SPARQL  三元组模式组成的集合称作基本图模式（Basic  Graph  Pattern,BGP），基本图模
式可以用来表示更为明确、复杂的查询需求。例如，基本图模式{<?film, 
director,  Tim
burton>,<?film,  released,  ?date>}可以用来查询“蒂姆·伯顿执导的电影和每部电影具体的上
映时间”。除此之外，SPARQL  查询还定义了多个基本图模式之间进行的运算操作，以及
基本图模式与  RDF  图匹配完成后的结果过滤操作（Filter  Operator），如可以用？date大
于1990（?date 
1990）对前面一个查询例子中的电影日期进行限制。最后，在
SPARQL1.1版本中，还增加了联合查询功能，即支持通过  FROM  和嵌套查询的方式，进

> 

行多个数据源联合查询。据不完全统计[4]，目前互联网上1.49×1011条三元组数据可以通过

总计557个SPARQL查询终端查询获取，占全部三元组的99.87%[7]。

为了便于读者更好地理解  SPARQL  查询、三元组模式、SPARQL  基本图模式以及约

束条件，图7-2展示了一个有关电影信息的知识图谱和SPARQL样例。

图7-2 有关电影信息的知识图谱和SPARQL样例

SPARQL查询包括查询、插入和删除操作。下面将以图7-2中的样例知识图谱和对应
的SPARQL查询实例，分别介绍如何使用SPARQL对知识图谱进行数据查询、数据插入以
及数据删除操作。注意，图中的f1342、f1336、f1333以及p2556用来代指电影节点的
IRIs。

7.2.1 数据查询

SPARQL  官方标准定义了四种最终返回给用户查询结果的形式，代表着四种基本的

查询功能，即SELECT、ASK、CONSTRUCT和DESCRIBE。其中，SELECT是唯一可以

返回知识图谱中图模式匹配具体结果给用户的形式，也是最常用的查询语句；ASK  查询
语句主要用于测试知识图谱中是否存在满足给定查询约束条件的数据，结果以  Yes  或  No
的形式返回，除此之外没有额外的信息返回；CONSTRUCT  查询语句主要用于将图模式
匹配结果生成新的  RDF  图；DESCRIBE  查询语句用于查询与指定  IRI  相关的数据，注意
和SELECT有区别。下面结合实例分别对四种查询形式进行介绍。

1.SELECT的基本语法

其中，“SELECT”指明了查询的形式。“SELECT”后面的“变量1  变量2…”表示图匹配
后想要查询的具体目标。“FROM”指明了数据源，在通常情况下，在单个知识图谱中查询
时，默认不指明数据集的名称，即可以省略 SPARQL 查询中的 FROM 字段（后续其他形
式的查询语句介绍中将不再提及  FROM  部分）。“WHERE”语句后面的大括号中就是具体
的基本图模式和约束条件（FILTER字段给出）。值得注意的是，“WHERE”语句后面至少
应该包含一个基本图模式（在查询语法中，不同的三元组模式在大括号中用英文句

点“.”间隔），而约束条件为可选项。最后的修饰符[5]（Modifier）同样是可选项，主要用
于对查询的结果进行一些处理，常见的有排序操作  ORDER、限制结果数量操作  LIMIT
等。图7-2中的 SPARQL 查询就是一个典型的 SELECT 查询，用来获取“蒂姆·伯顿1990年
之后执导的电影名称和每部电影具体的上映时间”。典型的 SELECT 查询如图7-3所示。

图7-3 典型的SELECT查询

2.ASK的基本语法

其中，“ASK”指明了查询的形式。“ASK”后面的内容和  SELECT  中的“WHERE”部分
类似。例如，如果想要查询图7-2中的知识图谱是否存在“Tim Burton”这个人，那么对应的
SPARQL查询语句为

上述查询的结果将为“Yes”；假如图7-2中没有“Tim Burton”节点，结果将为“No”。
3.CONSTRUCT的基本语法

其中，“CONSTRUCT”指明了查询的形式。“CONSTRUCT”后面的“图模板”类似于基
本图模式，指明了生成的RDF应该具有的基本三元组内容。而“WHERE”语句后面的基本
图模式和  SELECT  语句中的类似，用于图模式匹配和约束。CONSTRUCT  查询的基本流
程为：首先执行“WHERE”语句进行图模式匹配，从知识图谱中抽取满足条件的目标变
量；随后，针对每一个目标变量，替换图模板中的对应变量，生成最终的 
如，在图7-2中的知识图谱上运行如下CONSTRUCT查询语句：

RDF图。例

将得到如下新的RDF图：

4.DESCRIBE的基本语法

其中，“DESCRIBE”指明了查询的形式。在“DESCRIBE”后面可以直接指明资源标识
符，也可以用变量标识。“WHERE”语句后面的基本图模式和  SELECT  语句中的类似，用

于图模式匹配和约束，不同之处在于  DESCRIBE  中的  WHERE  部分是可选项。例如，想
要在图7-2的知识图谱中获取所有和“Tim  Burton”相关的信息，可以运行如下的DESCRIBE
查询语句：

对应的结果为：

7.2.2 数据插入

SPARQL支持通过INSERT  DATA语句，将新的RDF三元组插入已有的RDF图中。具

体的基本语法为：

其中，INSERT  DATA  指明了查询的形式。在  INSERT  DATA  后面可以是单条三元

组，也可以是多条三元组构成的RDF图。在查询语法中，英文分号“;”可以用来连续插入
头实体相同的三元组。如果  RDF  图中已经存在某条将要插入的三元组，那么该条三元组
将被忽略。例如，可以将如下的三元组插入图7-2的知识图谱中。

对应的查询语句为：

7.2.3 数据删除

SPARQL的删除语句支持通过DELETE  DATA语句将RDF图中已有的某些三元组删

除。具体的基本语法为：

其中，DELETE  DATA指明了查询的形式。与插入语句类似，在DELETE  DATA后可
以是单条三元组，也可以是多条三元组构成的RDF图。如果RDF图中已经存在将要删除的
三元组或RDF图，那么该条三元组或RDF图在语句执行后将被删除。例如，可以将如下的
三元组从图7-3所示的知识图谱中删除：

对应的查询语句为：

以上主要介绍了  SPARQL  的查询、插入以及删除方法，这是最基本的三种查询形
式。SPARQL  虽然没有支持更新操作的语法，不过可以通过  DELETE  DATA  和  INSERT
DATA  结合使用来实现。此外，在  SPARQL1.1版本中增加了联合查询、简单蕴涵推理等
内容，感兴趣的读者可以查阅相关标准规范。

7.3 语义数据搜索

目前，得益于 W3C 完成RDF语言和协议的标准化，互联网上的不同 RDF数据能够以
RDF  链接的形式链接在一起，形成一个完整的语义链接数据网络，也称作数据  Web。并
且，不同的场景都能够有一个公共的术语词汇表，以及精确的术语含义说明。数据  Web
提供了丰富的信息，很多传统的搜索引擎都尝试将链接数据整合到其搜索结果中，如图7-
4所示。

图7-4 基于链接数据的语义搜索

然而，有效地对整个数据Web进行精准的语义搜索还面临如下挑战：
●可扩展性。对数据 Web 的有效利用要求基础架构能在大规模和不断增长的内链数据

上扩展和应用。

●异构性。如图7-5所示，主要包括：如何进一步整合数据源（补充  RDF  链接）；如

何从不同的数据源中找到与查询相关的数据；如何合并来自不同数据源的查询结果。

图7-5 多源知识图谱的异构性

●不确定性。用户事先不能准确地了解自己的需求，所以需求的描述往往不完整。这
就要求语义搜索系统支持以不精确的方式匹配需求和数据，并对结果进行排序，能够足够

灵活以应对条件的变化。

当前，链接数据比较成熟的语义搜索主要包括：面向本体的搜索引擎，如

Swoogle[8]、Watson[9]；面向实体的搜索引擎，如Sigma  on  Sindice[10]、FalconS[11]；以及

面向细粒度数据 Web 的搜索引擎，如 SWSE[12]、Hermes（SearchWebDB）[13]。这些搜索
引擎的基本组成都包括三元组存储、索引构建、查询处理及排序等，具体内容如下：

1.三元组存储
基于  IR  的存储方式，即单一的数据结构和查询算法，针对文本数据进行排序检索来
优化。其优点是高度可压缩、可访问，且排序是整个存储索引的组成部分，缺点是不能处

理结构化查询中简单的选择、联结等操作。

基于 DB 的存储方式，即多种索引和查询算法，以适应各种结构化数据的复杂查询需
求。其优点是能够完成复杂的选择、联结等操作，进而支持  SPARQL  结构化查询，并且
能应对高动态场景（许多插入或删除），缺点是空间开销增大和访问有一定的局限性，并

且无法集成对检索结果的排序。

原生存储（Native  Stores）即直接以RDF图形式的存储方式。其优点是高度可压缩，
可访问类似  IR  的检索排序，支持选择、联结等操作，并且可在亚秒级时间内在单台机器
上完成对TB级数据的查询，以及支持高动态场景，缺点是没有事务、恢复等功能。

2.索引构建
目前主要的方式都是重用  IR  索引来索引  RDF  语义数据。IR  索引主要包括以下几个
核心概念：文档、字段（例如，标题、摘要、正文……）、词语、Posting  list  和  Position

list[6]。而利用IR索引来索引RDF数据的核心思想是将RDF转换成具有fields和terms的虚拟
文档，如图7-6所示。

图7-6 基于IR索引的RDF语义数据索引示例

值得一提的是，语义  Web  上的链接数据规模已经非常庞大，不可能对其完全重建索
引，需要采用增量索引的方法。在增量索引的过程中，因为移动大量元素非常耗时，所以

还需要设计基于块的索引扩展，同时考虑块大小对索引性能的影响，最后做到权衡索引更

新、搜索和索引块大小之间的平衡。

3.查询处理和排序
首先，查询处理的核心步骤是给定查询输入，将其构建成复杂的结构化查询。在此基

础上，执行生成的结构化查询。不同拓扑结构的结构化查询的查询效率往往有很大不

同[7]，如图7-7所示，从DBpedia和LUBM[14]的查询日志中抽取的5个典型的查询拓扑结
构，其相应时间明显不同。所以，合理利用缓存可以大大提高效率，精心设计的查询功能

的优化算法也可以缩短响应时间，效率和查询表达式的复杂程度之间总是有一个折衷点。

图7-7 不同拓扑结构的查询和其相应时间

对于查询结果的排序，通常需要考虑以下原则：

●质量传播（Quality  Propagation）。一个元素的分数可以看成是其质量的度量，质量

传播即通过更新这个分数，反映该元素的相邻元素的质量。例如，当查找匹配关键字“战
争”的美国总统的接班人时，肯尼迪应该排在前面，因为他的前任总统艾森豪威尔与“战
争”紧密相关。

●数量聚合。除质量外，还要考虑邻居的数量。因此，如果有更多的邻居，元素排名
会更高。例如，在查询“找到图灵奖获得者工作的机构”,CMU、UC  伯克利和  IBM  是排在
前三名的机构，因为他们拥有最多的图灵奖获得者。并且，排序方案需要满足单调性。

数据Web的查询及答案在通常情况下都涉及多个数据源，如图7-8所示。

图7-8 涉及多数源的查询及答案

针对多数据源的情况，前提是对分布在不同数据源的数据进行融合，进而查询及处

理，在多数据源、多存储的场景下进行语义数据搜索。Hermes  系统[13]就是一个典型的多
数据源语义数据搜索框架，如图7-9所示，包括数据源融合，用户意图理解以及搜索和优

化。各个环节的详细内容感兴趣的读者可以查阅相关论文。

图7-9 Hermes多数据源语义数据搜索框架

语义数据搜索有多种研究原型，既可以直接应用  IR  技术以增强原有搜索系统的扩展
性，也可以直接设计支持处理复杂查询的语义搜索系统，但是数据质量依然是一个问题，

如何针对多数据源进行高质量的映射、理解用户的查询意图以及集成  IR  和  DB  排序以处
理复杂查询，是未来设计语义数据搜索的关键。

7.4 语义搜索的交互范式

理解用户的查询意图在于将用户的查询输入构建成结构化的查询语言  SPARQL，或
者让用户直接提出结构化的查询，然而这种方式需要用户具备以下基本能力：熟悉知识图

谱数据源，熟悉知识图谱的数据模式，了解知识图谱中数据大致包含哪些内容，熟练掌握

结构化的查询语言。

然而，大部分的情形是普通用户往往不具备以上的能力，即使是知识图谱的专家或开

发者，也很难完全熟悉每一个图谱的模式和内容。所以，知识图谱的有效语义搜索需要一

种简单高效的搜索范式，即允许用户以直观的、透明的、易用的方式对数据进行查询和浏

览[13]。此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查

询、可视化查询以及混合方式查询等[15]。

目前，最先进的语义搜索系统会结合一系列技术，从基于统计的  IR  排序方法、有效
索引和查询处理的数据库方法到推理的复杂推理技术。在设计相应的交互范式和语义搜索

系统时，需要明白语义搜索的核心在于能够支持表现形式丰富的信息需求，即查询的表达

能力至关重要。然而，用户需求的表示通常不完整，表现在用户事先并不能准确了解自己

的信息需求，进而无法完全准确地描述查询输入。所以，需要设计一种直观且支持复杂信

息需求表达的方式，以不精确的方式匹配需求和数据，并对结果进行排序，足够灵活以应

对条件的变化。在此基础上，设计查询处理、结果展示以及查询优化等其他环节。

7.4.1 基于关键词的知识图谱语义搜索方法

近年来，各大商业搜索引擎的成功表明用户使用关键字进行搜索非常舒适，这是由于

关键词能够直观地表达信息需求[16]。基于关键词查询和自然语言自动问答形式的知识图

谱语义搜索引起广泛关注。知识图谱上的关键词查询主要可以分为两类[17]：基于关键词

直接在知识图谱上搜索答案；基于关键词生成结构化的查询，进而提交给查询引擎得到结

果。

1.基于关键词直接在知识图谱上搜索答案
将关键词在知识图谱上直接进行搜索的方法，其核心思想是采用知识图谱子图定位的

策略。基本流程是建立有效的关键词和知识图谱子图的索引，对于给定的关键字查询，首

先在索引上匹配得到候选的知识图谱子图，进而实现对搜索空间的剪枝。最后，在小范围

的知识图谱子图上进行搜索，找到最终的查询答案。该类方法的核心在于索引的构建，其

构建方式直接决定搜索的效率和结果的质量。常见的索引方式有：

（1）关键词倒排索引。通过构建索引，快速定位知识图谱中包含关键词的实体。
（2）摘要索引。主要是构建一些包含结构化查询实体和关系类别的索引，在线上处

理时根据类别摘要进行扩充。

（3）路径索引。主要借助关键词中包含的查询起始和终止结点，在图上按路径搜索

提高查询效率。

基于关键词直接在知识图谱上搜索答案主要可以解决简单的语义搜索，即查询答案仅

仅出现在单条知识图谱三元组中，对于复杂的语义查询往往无法适用。基于此需求，将关

键词转化为结构化的查询方法应运而生。

2.基于关键词生成结构化的查询
将关键词集合转化为结构化的查询方法主要包括三个步骤：

（1）关键词映射。进行映射的主要原因是用户输入的关键词和知识图谱上的实体关
系往往存在语义鸿沟，例如，关键词“妻子”在知识图谱可能对应的是“配偶”。所以，需要
将关键词映射到知识图谱上实体、关系以及文本内容等。在此过程中，需要对知识图谱进

行预处理，构建关键词和知识图谱实体和边的索引，进而在知识图谱上快速定位与关键词

相关的实体和关系。

（2）候选结构化查询构建。映射关键词后，生成了对应的实体和关系。在知识图谱
中，基于生成的实体和关系拓展，能够生成局部的知识图谱子图，就得到了结构化查询需

要的查询图结构。在此基础上，根据查询意图，将局部子图中的部分实体和关系替换位变

量，进而生成结构化的查询。

（3）候选结构化查询排序。在关键词映射过程中，一个关键词往往会映射到知识图
谱中的多个实体或关系，进而发现多个局部子图，生成多个结构化的查询。因此，需要对

生成的结构化查询集合进行排序。例如，可以基于关键词搜索相似度、实体的拓扑度分布

等指标来计算排序评分。

值得一提的是，基于关键词的语义搜索还需要考虑对查询结果进行排序，让用户通过

观察排序结果进而更新关键词。常见的TF/IDF等排序方法均可以采用，这里不再赘述。

7.4.2 基于分面的知识图谱语义搜索

分面（Facet）概念最早是由“印度图书馆学之父”S.R.Ranganathan  提出来的，用于表

示图书文献的多维属性，并在此基础上提出了第一种图书分面分类法——冒号分类法
（Colon  Classification)。在该分面分类法中，每一个大类图书由五个基本的分面组成：主

体、物质、动力、空间和时间。此后，很多文献进一步给出分面这一概念的特性和定义。

典型的定义将分面描述为属性或一组分类体系（category），或将分面定义为某个主题的
维度或侧面。基于分面的语义搜索已经在工业界取得了广泛应用，如图7-10所示的是
Ebay的商品分面搜索系统。

图7-10 Ebay的商品分面搜索系统

具体到知识图谱上的分面搜索，可以根据  RDF  三元组定义分面和值，即分面可以被
object  是分面的

看作一个在当前结果集中的RDF资源（实体）的属性，这些属性的 

值[18,19]，如图7-11所示。

图7-11 知识图谱分面实例

图7-12展示了面向  RDF  数据分面搜索系统  Dataplorer[18]的主要功能，可以看出构建
知识图谱的分面搜索系统的主要环节包括：即时的计算生成分面、实时地计算分面的值以

及根据用户的交互点击找到相关的分面。

图7-12 知识图谱分面搜索系统Dataplorer

由于分面搜索的技术多种多样，本节不再详细展开。值得一提的是，一些高级的分面

搜索系统还需要具备以下特征：

（1）考虑特定领域的分面、分面值和计数。分面能够根据它们的起点进行分组。
（2）支持全面的浏览。通过浏览可以达到每个分面的值，即没有值被跳过。
（3）支持动态分面和值的聚类。
此外，每一个当前浏览的知识图谱实体可能有大量分面，还需要对分面进行排序和分

面隐藏。最终在整个分面搜索的过程中，分面应该以非常小的、相等的进度“引导”用户
的，用户进而可以直观和明显地（用最少的必需知识）选择一类给定的分面。

7.4.3 基于表示学习的知识图谱语义搜索

近年来，知识图谱表示学习技术的出现，在知识图谱存储、构建、补全以及应用层面

都产生了深远的影响。利用知识图谱表示学习技术来改善语义搜索的质量，也逐渐引起学

术界和工业界的兴趣。知识图谱表示学习旨在通过机器学习技术，将知识图谱中的实体和

关系投射到连续低维的向量空间中，同时保持原有知识图谱的基本结构和性质[20]。在知

识图谱表示学习技术出现之前，通常以图数据库的形式组织和存储知识图谱。然而，随着

开放知识图谱数据规模越来越大，即使是中等规模的知识图谱也可能包含了数以千计的关

系类型、数百万的实体和数亿的三元组。传统的基于图存储和图算法的知识图谱应用越来

越受限于数据稀疏性和计算效率低下的问题[21]。

通过知识图谱表示学习技术，将其投射到低维连续的向量空间中，对于语义搜索领域

主要有两个好处。一是在连续向量空间中，可以直接进行数值型计算，对查询术语或者关

键字进行扩展，效率极高。例如，衡量两个实体之间的相似度可以通过直接计算两个实体

在向量空间中的欧式距离来实现。二是低维连续的知识图谱向量表示是通过机器学习技术

学习得到的，其学习过程既考虑了知识图谱的局部特征，又考虑了全局特征，生成的实体

和关系的向量在本质上是一种蕴涵语义更丰富的表示，可以进行高效率的简单查询推理。

下面从基于表示学习的结构化语义查询和基于表示学习的自然语言语义查询两个方

面，介绍知识图谱表示学习技术可以带来哪些改进。

1.基于表示学习的结构化语义查询
表示学习在结构化语义查询的应用主要是可以有效、高速地进行近似语义搜索。如图

7-13所示[22]，初始的结构化查询可以看作是一个查询图，虽然查询图中的查询目标在数
据层中不存在，但可以基于查询图，利用翻译机制等表示学习算子计算出其在向量空间中

的坐标（如图7-13中点 A 所示），进而通过最近邻搜索找到近似结果（如图7-13中点 B所
示），该近似结果很可能接近用户的初始查询意图。

图7-13 基于表示学习的知识图谱结构化查询示意图

2.基于表示学习的自然语言语义查询
自然语言形式的语义查询的核心在于短语（phrase）到知识图谱上实体或边的映射，

进而生成结构化的查询。在映射的过程中，主要难点在于关系（实体之间的边或实体属

性）歧义的消除和查询图的构建。表示学习技术在这两个过程中都可以充分发挥作用。整

个流程如图7-14中的例子所示[23]。

图7-14 基于表示学习的知识图谱自然语言语义查询示意图

首先，在离线阶段，生成知识图谱的实值向量，并且将关系短语词典和知识图谱中的

关系在向量空间中对齐。在线上阶段，将首先通过关键字检索的方式发现知识图谱中和自

然语言短语对应的候选实体和边的集合。传统的语义搜索方法将对候选的实体和边进行消

歧，容易出错；并且，在消歧后进行实体和边的组合，计算最优查询图，进而提交给查询

引擎，效率较低。知识图谱的向量空间可以帮助模型省略消歧的过程，方法是将每一个候

选实体集合中的实体平均实值向量作为查询图生成时的实体表示，进而并不需要某一个具

体的实体向量。在计算查询图时，也可以利用翻译机制等原理提前预估查询图的评分好

坏，提高生成效率和质量。

以上两个案例在本质上是在传统语义搜索的数据和查询之间提供了全新的向量空间维

度，进而利用实值向量计算的优势对查询进行改进。以近似查询来说，基于表示学习的搜

索可以在不修改初始查询的前提下直接返回近似结果，极大地提高近似查询的质量，为知

识图谱近似查询提供了全新的思路。值得一提的是，表示学习技术为知识图谱的语义搜索

提供了新思路，但同时面临三项挑战，需要在实际使用中予以考虑：

（1）最近邻搜索效率问题。无论是近似查询，还是自然语言问答中的关系拓展和候

选查询图构建，在向量空间中进行最近邻搜索存在维度灾难造成的效率问题。

（2）链接预测的合取问题。在向量空间中利用基于链接预测的思想，对语义搜索的
目标进行预估，但是当搜索目标受多个实体和关系共同约束时，需要考虑不同链接预测的

结果进行叠加时的合取问题。

（3）结果可解释性问题。表示学习技术可以让语义检索绕过对查询本身的修改拓

展，直接得到近似结果，在提高效率和精度的同时又带来结果的可解释问题。

7.5 开源工具实践

本节将简述基于  Elasticsearch[6]搭建一个简易实体语义搜索引擎的流程。该搜索引擎
可以按照名称搜索实体、实体属性、多跳搜索以及搜索符合多对属性要求的实体。在功能

逻辑完成后，可搭建网站将其可视化。本实践的相关工具、实验数据及操作说明由

OpenKG提供，地址为http://openkg.cn。

7.5.1 功能介绍

1.实体搜索
实体搜索即输入实体名称，返回该实体的知识卡片（实体在知识图谱中的所有属性和

属性值），如图7-15所示。

图7-15 实体搜索功能示意图

2.实体的属性搜索
输入实体名称和一个属性名称，如果该实体存在该属性值，则返回该属性值，如图7-

16所示。

图7-16 实体属性值搜索功能示意图

3.多跳搜索
多跳搜索可以输入多个属性，实现多跳搜索，即形如“姚明的女儿的母亲的身高”，其
中“姚明：女儿”查询得到的是实体“姚明”的一个属性，但同时这个属性值也作为一个实体
存在于数据集中，那么就可以接着对该实体继续查询其属性和值，如图7-17所示。

图7-17 多跳搜索功能示意图

4.按照多种属性条件检索实体
输入多对 [属性名 opearotr 属性值]，它们之间的关系可以是 AND、OR、NOT，同时
属性值是等于、大于、小于一个输入值，返回满足这些属性限制的实体。例如，“职业：
篮球运动员 or 职业：足球运动员 And Not 国籍：中国 And 身高>=180”，如图7-18所示。

图7-18 根据属性值检索实体示意图

7.5.2 环境搭建及数据准备

1.安装Elasticsearch
在 

Elasticsearch  官网下载 

Elasticsearch  的安装包。运行安装包目录下
的/bin/Elasticsearch.sh（在  Windows  系统中运行/bin/Elasticsearch.bat，本小节的实验内容
在Ubuntu系统上完成，后续步骤会涉及一些Linux 指令）。

注意：该命令已经运行了Elasticsearch。可能提示不能在Root账户下运行，此时请

切换到非Root账户下运行。如果想让Elasticsearch在后台一直运行，在上述命令最后加

参数-d即可。

至此安装完成，可以通过访问本地9200端口 

curl 

'http://localhost:9200’来访问

Elasticsearch。

注意：可通过修改配置文件使Elasticsearch实现远程访问。

7.5.3 数据准备

使用的数据集是一个基于  cnschema  标准的人物属性数据集。该数据集由三元组组
成，每个三元组描述一个人物实体的某个属性。在将此数据集导入  Elasticsearch  之前，需
要考虑其在 Elasticsearch  中存储的方式。最简单的方式是将每个三元组视作一个文档，其
中包含3个字段，分别为三元组的(subject,  predicate,  object)，但本书采取的是另一种方
式，即一个实体的所有属性和属性值为一个文档。

1.知识库格式转换（preprocess.py）

数据集的格式如所示。

Elasticsearch要求文档的输入格式为JSON。将实验数据集转化为JSON格式后，每个

实体对应一个JSON的 object，也即Elasticsearch中的一个文档。

数据集中"A.J.万德"的所有属性及属性值汇总在一起，存储在一个  JSON  对象中作为

一篇文档导入 Elasticsearch，其他的实体类似。

其中，所有属性除了"height"及"weight"两个属性，都存在一个名为"po"的list对象中，

每个属性及其属性值作为一个小的object，分别用键"pred"和"obj"标识属性名和属性值。

之所以要将"height"和"weight"单独考虑，而不是和其他属性一样存储在  list  中，是因

为这两个属性要支持范围搜索，即"height>200"的搜索。因此，要求它们在存储时的数据
类型为 integer，而 list 中的所有属性的属性值的存储类型都为 keyword（不分词的string，
只支持全文匹配）。

之所以每一对(属性名，属性值)存储为一个  object，并放入一个  list  中，是因为这是
Elasticsearch  定义的一种  nested  object  的数据类型。这种数据类型能存储大量拥有相同的
key  的对象，并且可以对之进行有效的检索。这样，无论数据集中有多少种不同的属性，

都能以相同的格式存储。

之所以不是每一个三元组存储为一篇文档，而是一个实体相关的所有属性及属性值存

储为一篇文档，是因为要支持通过多对(属性，属性值)联合检索满足要求的实体，以这种
格式存储，能提高检索效率。

另外，数据集中某些属性的属性值不是很规范，例如  height、weight  的属性值存在单
位不同、包含无关字符等问题，其他属性的属性值也存在多个值以空格等字符连接作为一

个值（例如，"职业：运动员  足球运动员"，这个为了检索时匹配方便，应该将其拆成两
个）的问题，因此在格式转换的同时也要对属性值做一些清理。

2.属性同义词扩展 (attr_mapping.txt)
因为实验的数据集较小，包含的属性种类不多，因此可以人工增加一些同义的属性

词。下面的文件中每一行第一个词为数据中存在的属性，后面的是后添加的同义属性词。

在解析查询语句的时候，如遇到同义属性词，可将其映射到数据集中存在的属性上。

7.5.4 导入Elasticsearch

1.Elasticsearch的index和type简介
Elasticsearch用index和type管理导入的文档。其中index可以类比为一个单独的数据
库，存放的是结构相似的文档；type是index的一个子结构，可以存放不同部分的数据，可
以类比为一张表，而每一篇文档都存储在一个type中，类似于一条记录存储在一张表中。

2.在Elasticsearch中新建index和type
为实验数据集新建index('demo')和type('person')。Elasticsearch使用RESTful  API可以方

便地交互，通过Elasticsearch的mapping文件可以创建index和type，并指定每个字段在
Elasticsearch中存储的类型。

下述示例用  curl  命令在命令行中与  Elasticsearch  交互。其中，height、weight  存储为
integer  数据类型，而实体名  subj  和其他属性存储为  keyword  类型。所有其他属性存储在
一个nested object对象中。打开命令行，运行如下代码。

3.导入数据 (insert.py)
向新建的 

type  中导入实验数据集，导入时同样使用  RESTful  API，可以使用

Elasticsearch提供的insert方法。

到这一步，已经可以检索该知识库了，解析查询中的实体名和属性名，以实体名为

keyword  检索实体，并解析出答案中属性名对应的属性值。例如，查询“姚明”，构造类似
如下查询来检索实体。查询“姚明：身高”，先检索实体“姚明”，再获取结果中的“身高”属
性的值。

注意：Elasticsearch的查询除了常见的get斱式，即将参数和参数值作为链接的一部

分提交，也支持如上所示将查询参数写入一个JSON结构体，用该请求体查询的斱式。这种

斱式由于表达斱式更加灵活，因此可以表达较为复杂的查询。

7.5.5 功能实现

1.按名称检索实体
按名称检索实体，并返回该实体的所有属性和属性值。这种检索的查询在第3步其实
已经实现，只需要将查询的结果解析一下，写入一个  python  dict  对象返回即可。代码如
下：

2.检索实体的属性以及多跳查询
检索一个实体的某个属性的值，也是先检索该实体，然后判断返回的结果中是否包含

检索的属性，如果包含，则返回对应的值。因此，这种检索的查询语句同上。如果是多跳

查询，则在检索出一个属性对应的属性值后，需要再判断知识库中是否存在以该属性值为

名称的实体，如果存在，则以该属性值为实体名称检索对应的实体，再判断结果是否包含

检索的第2个属性。如此循环，直到得到最终结果，如下所示。

3.根据多对(属性名，属性值)检索实体
该功能首先需要进行查询构建，在构建出查询语句后执行该查询，解析查询结果即

可。

在查询构建部分要稍微复杂一些。假设已经解析好了查询语句的组成部分，即每对属

性值对，它们之间的and或or关系、not操作以及每个属性值对的操作是等于还是范围检
索，可以构造出一个查询直接返回满足这些要求的实体。这里注意部分属性，例如

height、weight支持范围搜索，例如“身高 >= 200”对应的部分查询为：

检索除  height、weight  外的其他存储在  nested  object  中的属性，例如“Not  国籍：中

国”。

如果关系是or，那么对应Elasticsearch的should关键字；如果在属性值对前加了否定

not，那么对应的Elasticsearch关键字是must_not，如下所示。

7.5.6 执行查询

以上实现了几种不同种类的查询，对于用户的查询输入，先进行分类，判断属于哪一

种查询，再调用对应的查询函数：

●首先，由于定义的查询格式比较简单，可以在将查询按照操作符分割后，判断第一

个词是否是属性名，操作符为And、Or、Not、=、<、>等。
●如果是，代表当前查询是依据属性条件检索实体。
●否则代表当前的查询数据实体或实体的属性进行检索。
上述过程中判断一个词是否是属性词可以通过查询 Elasticsearch  完成。在对用户查询

分类后，基于每种查询问题的模板，填充解析时识别出来的实体名和属性名，生成

Elasticsearch查询。构造并执行用户查询对应的Elasticsearch查询后，解析查询结果。

上述只是基于 Elasticsearch  实现了基本的查询功能，感兴趣的读者还可以在此基础上

可通过一些扩展使其支持更复杂的查询，如别名检索、反向检索、路径检索等。

