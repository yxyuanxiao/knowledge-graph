input,subject,subject_type,relation,object,object_type
本章旨在全面系统地介绍以RDF为数据模型的知识图谱语义搜索基础技术以及面临的挑战。,本章,,,知识图谱语义搜索基础技术以及面临的挑战,
7.1语义搜索简介搜索也称信息检索（Information_Retrieval），是从信息资源集合获得与信息需求相关的信息资源的活动[1]。,搜索,,,信息检索,
7.1语义搜索简介搜索也称信息检索（Information_Retrieval），是从信息资源集合获得与信息需求相关的信息资源的活动[1]。,搜索,,,Information_Retrieval,
近年来，在互联网和企业应用上，搜索技术受到了广泛的关注和应用。,搜索技术,,,在互联网和企业应用上，搜索技术受到了广泛的关注和应用,
其中，最广泛的信息检索主要是面向文档为单位的检索（Document_Retrieval）。,面向文档为单位的检索,,,信息检索,
其中，最广泛的信息检索主要是面向文档为单位的检索（Document_Retrieval）。,面向文档为单位的检索,,,Document_Retrieval,
此外，面向数据的检索（Data_Retrieval）也受到越来越多的关注，主要包括基于数据库的检索和基于知识库的检索，其特点是能够提供更精确的答案[5]。,面向数据的检索,,,基于数据库的检索,
此外，面向数据的检索（Data_Retrieval）也受到越来越多的关注，主要包括基于数据库的检索和基于知识库的检索，其特点是能够提供更精确的答案[5]。,面向数据的检索,,,基于知识库的检索,
此外，面向数据的检索（Data_Retrieval）也受到越来越多的关注，主要包括基于数据库的检索和基于知识库的检索，其特点是能够提供更精确的答案[5]。,面向数据的检索,,,Data_Retrieval,
面向文档和面向数据两种模式间的技术差异大致可以分为三个部分，即对用户需求的Model）、对底层数据的表示（Data表示（Query_Technique）。,面向文档和面向数据两种模式间的技术差异,,,Model、Data、Query_Technique,
面向文档和面向数据两种模式间的技术差异大致可以分为三个部分，即对用户需求的Model）、对底层数据的表示（Data表示（Query_Technique）。,面向文档和面向数据两种模式间的技术差异,,,Model、Data、Query_Technique,
面向文档的信息检索主要通过轻量级的语法模型（Lightweight_Syntax-Centric_Model）表示用户的检索需求和资源的内容，即目前占主导地位的关键词模式——词袋模型（Bag-of-Words）。,面向文档的信息检索,,,关键词模式——词袋模型,
面向文档的信息检索主要通过轻量级的语法模型（Lightweight_Syntax-Centric_Model）表示用户的检索需求和资源的内容，即目前占主导地位的关键词模式——词袋模型（Bag-of-Words）。,关键词模式,,,词袋模型,
这种技术对主题搜索（Topic_Search）的效果很好，即给定一个主题检索相关的文档，但不能应对更加复杂的信息检索需求。,SPO,,,主题搜索（Topic_Search）,
这种技术对主题搜索（Topic_Search）的效果很好，即给定一个主题检索相关的文档，但不能应对更加复杂的信息检索需求。,SPO,,,主题检索,
相比来说，基于数据库Model）和匹配技术（Matching和基于知识库的检索系统能够通过使用表达能力更强的模型来表示用户的需求，并且利用数据内在的结构和语义关联，允许更为复杂的查询，进而提供更加精确和具体的答案。,SPO,,,主题检索,
语义关注的是能用于搜索的资源的含义。,语义,,,能用于搜索的资源的含义,
这些含义是通过语义模型构建的，例如语言学模型和概念模型。,语义模型构建的,,,概念/产品,
其中，语言学模型主要侧重对词语级别的关系建模、分类以及构建同义词库，而概念模型主要侧重对论域中的语法元素的关系建模，以及从语法元素到论域的映射。,语言学模型,,,对词语级别的关系建模、分类以及构建同义词库,
其中，语言学模型主要侧重对词语级别的关系建模、分类以及构建同义词库，而概念模型主要侧重对论域中的语法元素的关系建模，以及从语法元素到论域的映射。,概念模型,,,对论域中的语法元素的关系建模，以及从语法元素到论域的映射,
此外，语义模型要求必须具备表达能力，即语言和建模结构的数量。,语义模型的表达能力,,,语言和建模结构的数量,
此外，语义模型要求必须具备表达能力，即语言和建模结构的数量。,表达能力,,,expressiveness,
同时，语义模型还必须能够形式化，即解析过程必须是可计算的。,语义模型,,,可计算,
可见，不同的语义模型对应的搜索技术也不同。,语义模型,,,搜索技术,
也就是说，并不存在单一类型的语义搜索技术，而是利用各种不同表达能力的语义模型的搜索系统。,语义搜索技术,,,利用各种不同表达能力的语义模型的搜索系统,
也就是说，并不存在单一类型的语义搜索技术，而是利用各种不同表达能力的语义模型的搜索系统。,语义搜索技术,,,语义搜索,
显然，基于数据库和基于知识库的检索系统属于重量级语义搜索系统，因为它们采用显式的和形式化的模型，例如关系数据库中的E-R图、RDF和OWL中的知识模型。,基于数据库的检索系统,,,基于数据库的检索系统,
近年来，语义数据的数量不断增加，特别是RDF数据，通过标记的方式已经嵌入在许多网页文档中，或与文档形成了关联。,语义数据,,,标记的方式或形成关联,
通过在检索过程中结合使用这些表达能力更强的类型数据，纯粹面向文档的检索系统已经包含了一定程度的语义使用，已经变成了轻量级的语义搜索系统。,语义检索,,,面向文档的检索系统,
通过在检索过程中结合使用这些表达能力更强的类型数据，纯粹面向文档的检索系统已经包含了一定程度的语义使用，已经变成了轻量级的语义搜索系统。,语义检索,,,semantic search system,
如图7-1所示，一个语义搜索系统的基本框架包括查询构建、查询处理、结果展示、查询优化、语义模型、资源及文档等。,语义搜索系统,,,查询构建、查询处理、结果展示、查询优化、语义模型、资源及文档等,
如图7-1所示，一个语义搜索系统的基本框架包括查询构建、查询处理、结果展示、查询优化、语义模型、资源及文档等。,语义搜索系统,,,semantic search system,
受益于结构化和语义数据的可用性的增加，重量级语义搜索系统的使用不再局限于专用领域，可能在更大规模的场景（例如Web）中找到其应用。,语义搜索系统,,,重量级语义搜索系统应用于更大规模的场景,
目前，大量的语义网络搜索系统已经被构建，其目的是利用互联网上大量的RDF数据及表达Web上可用的OWL本体。,语义网络搜索系统,,,构建,
目前，大量的语义网络搜索系统已经被构建，其目的是利用互联网上大量的RDF数据及表达Web上可用的OWL本体。,语义网络搜索系统,,,semantic network search system,
一方面，可以采用应用于信息检索领域的方法和技术来解决可扩展性问题，以克服Web数据的质量问题，并处理与长文本描述相关的数据元素[6]。,可扩展性问题,,,应用于信息检索领域的方法和技术来解决可扩展性问题，以克服Web数据的质量问题，并处理与长文本描述相关的数据元素[6]。,
另一方面，也可以直接将数据库和语义网技术应用于信息检索问题，将丰富的结构化和高度表达的数据的可用性提高到搜索过程中。,数据库,,,信息检索,
另一方面，也可以直接将数据库和语义网技术应用于信息检索问题，将丰富的结构化和高度表达的数据的可用性提高到搜索过程中。,数据库,,,database,
总的来说，不同的技术路线和语义搜索系统不仅在使用的数据方面存在趋同，而且在搜索中应用的技术也趋于一致。,语义搜索系统,,,使用的数据,
文档检索与数据检索之间逐渐因为语义搜索的出现变得没有明确的界限，语义在一定程度上始终参与检索过程。,文档检索,,,语义搜索,
目前，最先进的语义搜索系统结合了一系列技术，包括结构化查询语言的构建、基于统计的信息检索排序方法、有效索引和查询处理的数据库方法以及复杂推理等技术。,语义搜索系统,,,结合了一系列技术,
回顾前面章节中的内容，知识图谱的数据模型为RDF，它是W3C推荐的用于表示语义信息的重要数据标准。,知识图谱的数据模型,,,RDF,
RDF的核心思想是通过RDF三元组的形式描述事实知识。,RDF,,,通过RDF三元组的形式描述事实知识,
多个RDF三元组组成的集合构成了RDF数据集。,RDF三元组组成的集合,,,RDF数据集,
目前，RDF已经成为知识图谱的主要描述格式，越来越多的知识图谱数据以RDF三元组的形式发布出来。,RDF,,,知识图谱的描述格式,
多个知识图谱通过RDF三元组之间相互关联，形成了一个巨大的数据关联网络。,知识图谱,,,RDF三元组之间相互关联形成的数据关联网络,
以LOD为例，整个项目已经包含超过1000多亿条RDF三元组并依然在快速增加，蕴含了丰富的信息资源。,LOD,,,信息资源,
以LOD为例，整个项目已经包含超过1000多亿条RDF三元组并依然在快速增加，蕴含了丰富的信息资源。,LOD,,,链接数据,
精确查询并获取知识图谱中三元组中的有关信息是语义搜索的核心。,语义搜索,,,精确查询并获取知识图谱中三元组中的有关信息,
SPARQL查询语言是面向RDF图的结构化查询语言，目前已被W3C推荐为RDF数据的标准查询语言[2]，其地位和查询形式都类似于关系数据库的SQL语言。,SPARQL查询语言,,,面向RDF图的结构化查询语言,
SPARQL查询语言是面向RDF图的结构化查询语言，目前已被W3C推荐为RDF数据的标准查询语言[2]，其地位和查询形式都类似于关系数据库的SQL语言。,SPARQL查询语言,,,结构化查询语言,
W3C推荐RDF数据集的发布者在发布数据的同时，能够提供相应的SPARQL检索引擎和查询接口。,W3C推荐RDF数据集的发布者,,,提供相应的SPARQL检索引擎和查询接口,
以Apache软件基金会的Jena[3]项目为代表的一些SPARQL开源框架，进一步促进了组织机构和个人快速方便地搭建自己的SPARQL查询服务。,SPARQL开源框架,,,以Apache软件基金会的Jena项目为代表的一些,
SPARQL查询的核心处理单元是类似RDF三元组形式的三元组模式（TriplePattern），不同之处在于SPARQL的三元组模式中，主语、谓语或宾语可以是变量（以“?”开头标识）。,SPARQL查询的核心处理单元,,,三元组形式的三元组模式,
SPARQL查询的核心处理单元是类似RDF三元组形式的三元组模式（TriplePattern），不同之处在于SPARQL的三元组模式中，主语、谓语或宾语可以是变量（以“?”开头标识）。,SPARQL查询的核心处理单元,,,TriplePattern,
除此之外，SPARQL查询还定义了多个基本图模式之间进行的运算操作，以及基本图模式与RDF图匹配完成后的结果过滤操作（Filter_Operator），如可以用？date大于1990（?date>1990）对前面一个查询例子中的电影日期进行限制。,SPARQL查询,,,基本图模式之间进行的运算操作以及基本图模式与RDF图匹配完成后的结果过滤操作,
除此之外，SPARQL查询还定义了多个基本图模式之间进行的运算操作，以及基本图模式与RDF图匹配完成后的结果过滤操作（Filter_Operator），如可以用？date大于1990（?date>1990）对前面一个查询例子中的电影日期进行限制。,等价,,,operate,
除此之外，SPARQL查询还定义了多个基本图模式之间进行的运算操作，以及基本图模式与RDF图匹配完成后的结果过滤操作（Filter_Operator），如可以用？date大于1990（?date>1990）对前面一个查询例子中的电影日期进行限制。,Filter_Operator,,,过滤操作,
最后，在SPARQL1.1版本中，还增加了联合查询功能，即支持通过FROM和嵌套查询的方式，进>行多个数据源联合查询。,SPARQL1.1,,,联合查询功能,
最后，在SPARQL1.1版本中，还增加了联合查询功能，即支持通过FROM和嵌套查询的方式，进>行多个数据源联合查询。,SPARQL,,,SPARQL1.1,
据不完全统计[4]，目前互联网上1.49×1011条三元组数据可以通过总计557个SPARQL查询终端查询获取，占全部三元组的99.87%[7]。,SPARQL查询终端,,,互联网上的三元组数据,
据不完全统计[4]，目前互联网上1.49×1011条三元组数据可以通过总计557个SPARQL查询终端查询获取，占全部三元组的99.87%[7]。,SPARQL查询终端,,,SPARQL查询终端,
为了便于读者更好地理解SPARQL查询、三元组模式、SPARQL基本图模式以及约束条件，图7-2展示了一个有关电影信息的知识图谱和SPARQL样例。,SPARQL查询、三元组模式、SPARQL基本图模式以及约束条件,,,一个有关电影信息的知识图谱和SPARQL样例,
为了便于读者更好地理解SPARQL查询、三元组模式、SPARQL基本图模式以及约束条件，图7-2展示了一个有关电影信息的知识图谱和SPARQL样例。,SPARQL查询,,,SPARQL查询,
图7-2有关电影信息的知识图谱和SPARQL样例SPARQL查询包括查询、插入和删除操作。,SPARQL查询,,,查询、插入和删除操作,
图7-2有关电影信息的知识图谱和SPARQL样例SPARQL查询包括查询、插入和删除操作。,SPARQL查询,,,查询、插入和删除操作。,
下面将以图7-2中的样例知识图谱和对应的SPARQL查询实例，分别介绍如何使用SPARQL对知识图谱进行数据查询、数据插入以及数据删除操作。,SPARQL查询实例,,,数据查询数据插入数据删除操作,
注意，图中的f1342、f1336、f1333以及p2556用来代指电影节点的IRIs。,f1342,,,图中的f1342,
7.2.1数据查询SPARQL官方标准定义了四种最终返回给用户查询结果的形式，代表着四种基本的查询功能，即SELECT、ASK、CONSTRUCT和DESCRIBE。,SPARQL,,,四种最终返回给用户查询结果的形式,
7.2.1数据查询SPARQL官方标准定义了四种最终返回给用户查询结果的形式，代表着四种基本的查询功能，即SELECT、ASK、CONSTRUCT和DESCRIBE。,SELECT,,,查询功能,
其中，SELECT是唯一可以返回知识图谱中图模式匹配具体结果给用户的形式，也是最常用的查询语句；ASK查询语句主要用于测试知识图谱中是否存在满足给定查询约束条件的数据，结果以Yes或No的形式返回，除此之外没有额外的信息返回；CONSTRUCT查询语句主要用于将图模式匹配结果生成新的RDF图；DESCRIBE查询语句用于查询与指定IRI相关的数据，注意和SELECT有区别。,SELECT,,,返回知识图谱中图模式匹配具体结果给用户的形式,
其中，SELECT是唯一可以返回知识图谱中图模式匹配具体结果给用户的形式，也是最常用的查询语句；ASK查询语句主要用于测试知识图谱中是否存在满足给定查询约束条件的数据，结果以Yes或No的形式返回，除此之外没有额外的信息返回；CONSTRUCT查询语句主要用于将图模式匹配结果生成新的RDF图；DESCRIBE查询语句用于查询与指定IRI相关的数据，注意和SELECT有区别。,ASK查询语句,,,测试知识图谱中是否存在满足给定查询约束条件的数据,
其中，SELECT是唯一可以返回知识图谱中图模式匹配具体结果给用户的形式，也是最常用的查询语句；ASK查询语句主要用于测试知识图谱中是否存在满足给定查询约束条件的数据，结果以Yes或No的形式返回，除此之外没有额外的信息返回；CONSTRUCT查询语句主要用于将图模式匹配结果生成新的RDF图；DESCRIBE查询语句用于查询与指定IRI相关的数据，注意和SELECT有区别。,CONSTRUCT查询语句,,,将图模式匹配结果生成新的RDF图,
其中，SELECT是唯一可以返回知识图谱中图模式匹配具体结果给用户的形式，也是最常用的查询语句；ASK查询语句主要用于测试知识图谱中是否存在满足给定查询约束条件的数据，结果以Yes或No的形式返回，除此之外没有额外的信息返回；CONSTRUCT查询语句主要用于将图模式匹配结果生成新的RDF图；DESCRIBE查询语句用于查询与指定IRI相关的数据，注意和SELECT有区别。,DESCRIBE查询语句,,,查询与指定IRI相关的数据,
下面结合实例分别对四种查询形式进行介绍。,四种查询形式,,,介绍,
1.SELECT的基本语法其中，“SELECT”指明了查询的形式。,SELECT,,,查询的形式,
1.SELECT的基本语法其中，“SELECT”指明了查询的形式。,SELECT,,,查询,
“SELECT”后面的“变量1变量2…”表示图匹配后想要查询的具体目标。,“SELECT”,,,图匹配后想要查询的具体目标,
“FROM”指明了数据源，在通常情况下，在单个知识图谱中查询时，默认不指明数据集的名称，即可以省略SPARQL查询中的FROM字段（后续其他形式的查询语句介绍中将不再提及FROM部分）。,FROM,,,SPARQL查询,
“FROM”指明了数据源，在通常情况下，在单个知识图谱中查询时，默认不指明数据集的名称，即可以省略SPARQL查询中的FROM字段（后续其他形式的查询语句介绍中将不再提及FROM部分）。,FROM,,,FROM,
“WHERE”语句后面的大括号中就是具体的基本图模式和约束条件（FILTER字段给出）。,“WHERE”语句,,,基本图模式和约束条件（FILTER字段给出）,
“WHERE”语句后面的大括号中就是具体的基本图模式和约束条件（FILTER字段给出）。,“WHERE”语句,,,英文名,
值得注意的是，“WHERE”语句后面至少应该包含一个基本图模式（在查询语法中，不同的三元组模式在大括号中用英文句点“.”间隔），而约束条件为可选项。,WHERE语句,,,英文句点“.”,
最后的修饰符[5]（Modifier）同样是可选项，主要用于对查询的结果进行一些处理，常见的有排序操作ORDER、限制结果数量操作LIMIT等。,最后的修饰符,,,可选项,
最后的修饰符[5]（Modifier）同样是可选项，主要用于对查询的结果进行一些处理，常见的有排序操作ORDER、限制结果数量操作LIMIT等。,最后的修饰符,,,Modifier,
典型的SELECT查询如图7-3所示。,SELECT查询,,,典型的SELECT查询,
图7-3典型的SELECT查询2.ASK的基本语法其中，“ASK”指明了查询的形式。,SELECT查询,,,典型的SELECT查询,
图7-3典型的SELECT查询2.ASK的基本语法其中，“ASK”指明了查询的形式。,ASK,,,查询,
“ASK”后面的内容和SELECT中的“WHERE”部分类似。,“ASK”,,,SELECT,
例如，如果想要查询图7-2中的知识图谱是否存在“Tim_Burton”这个人，那么对应的SPARQL查询语句为上述查询的结果将为“Yes”；假如图7-2中没有“Tim_Burton”节点，结果将为“No”。,SPARQL查询语句,,,查询图7-2中的知识图谱是否存在“Tim_Burton”这个人,
例如，如果想要查询图7-2中的知识图谱是否存在“Tim_Burton”这个人，那么对应的SPARQL查询语句为上述查询的结果将为“Yes”；假如图7-2中没有“Tim_Burton”节点，结果将为“No”。,等价,,,等价,
3.CONSTRUCT的基本语法其中，“CONSTRUCT”指明了查询的形式。,CONSTRUCT,,,查询的形式,
3.CONSTRUCT的基本语法其中，“CONSTRUCT”指明了查询的形式。,查询的形式,,,CONSTRUCT,
“CONSTRUCT”后面的“图模板”类似于基本图模式，指明了生成的RDF应该具有的基本三元组内容。,“CONSTRUCT”后面的“图模板”,,,基本图模式,
而“WHERE”语句后面的基本图模式和SELECT语句中的类似，用于图模式匹配和约束。,WHERE语句,,,基本图模式和SELECT语句,
而“WHERE”语句后面的基本图模式和SELECT语句中的类似，用于图模式匹配和约束。,“WHERE”语句,,,等价模式匹配和约束,
CONSTRUCT查询的基本流程为：首先执行“WHERE”语句进行图模式匹配，从知识图谱中抽取满足条件的目标变量；随后，针对每一个目标变量，替换图模板中的对应变量，生成最终的如，在图7-2中的知识图谱上运行如下CONSTRUCT查询语句：RDF图。,CONSTRUCT查询,,,图模板中变量的抽取和生成最终的RDF图,
CONSTRUCT查询的基本流程为：首先执行“WHERE”语句进行图模式匹配，从知识图谱中抽取满足条件的目标变量；随后，针对每一个目标变量，替换图模板中的对应变量，生成最终的如，在图7-2中的知识图谱上运行如下CONSTRUCT查询语句：RDF图。,等价,,,match,
CONSTRUCT查询的基本流程为：首先执行“WHERE”语句进行图模式匹配，从知识图谱中抽取满足条件的目标变量；随后，针对每一个目标变量，替换图模板中的对应变量，生成最终的如，在图7-2中的知识图谱上运行如下CONSTRUCT查询语句：RDF图。,英文名,,,图模式匹配,
例将得到如下新的RDF图：4.DESCRIBE的基本语法其中，“DESCRIBE”指明了查询的形式。,DESCRIBE,,,查询,
在“DESCRIBE”后面可以直接指明资源标识符，也可以用变量标识。,DESCRIBE,,,“DESCRIBE”,
“WHERE”语句后面的基本图模式和SELECT语句中的类似，用于图模式匹配和约束，不同之处在于DESCRIBE中的WHERE部分是可选项。,DESCRIBE,,,WHERE语句后面的基本图模式和SELECT语句中的类似，用于图模式匹配和约束,
“WHERE”语句后面的基本图模式和SELECT语句中的类似，用于图模式匹配和约束，不同之处在于DESCRIBE中的WHERE部分是可选项。,WHERE,,,where,
例如，想要在图7-2的知识图谱中获取所有和“Tim_Burton”相关的信息，可以运行如下的DESCRIBE查询语句：对应的结果为：7.2.2数据插入SPARQL支持通过INSERTDATA语句，将新的RDF三元组插入已有的RDF图中。,等价,,,equivalent,
例如，想要在图7-2的知识图谱中获取所有和“Tim_Burton”相关的信息，可以运行如下的DESCRIBE查询语句：对应的结果为：7.2.2数据插入SPARQL支持通过INSERTDATA语句，将新的RDF三元组插入已有的RDF图中。,英文名,,,equivalent,
具体的基本语法为：其中，INSERT_DATA指明了查询的形式。,SPO,,,具体的基本语法,
在INSERT_DATA后面可以是单条三元组，也可以是多条三元组构成的RDF图。,INSERT_DATA,,,单条三元组,
在INSERT_DATA后面可以是单条三元组，也可以是多条三元组构成的RDF图。,INSERT_DATA,,,插入数据,
在查询语法中，英文分号“;”可以用来连续插入头实体相同的三元组。,INSERT_DATA,,,插入数据,
如果RDF图中已经存在某条将要插入的三元组，那么该条三元组将被忽略。,RDF图中将要插入的三元组,,,忽略,
如果RDF图中已经存在某条将要插入的三元组，那么该条三元组将被忽略。,忽略,,,ignore,
例如，可以将如下的三元组插入图7-2的知识图谱中。,SPO,,,知识图谱,
例如，可以将如下的三元组插入图7-2的知识图谱中。,等价,,,equivalence,
对应的查询语句为：7.2.3数据删除SPARQL的删除语句支持通过DELETE_DATA语句将RDF图中已有的某些三元组删除。,SPARQL的删除语句,,,删除三元组,
对应的查询语句为：7.2.3数据删除SPARQL的删除语句支持通过DELETE_DATA语句将RDF图中已有的某些三元组删除。,DELETE_DATA,,,删除语句,
具体的基本语法为：其中，DELETE_DATA指明了查询的形式。,SPO,,,具体的基本语法,
具体的基本语法为：其中，DELETE_DATA指明了查询的形式。,具体的基本语法,,,等价查询,
与插入语句类似，在DELETE_DATA后可以是单条三元组，也可以是多条三元组构成的RDF图。,DELETE_DATA,,,插入语句,
与插入语句类似，在DELETE_DATA后可以是单条三元组，也可以是多条三元组构成的RDF图。,DELETE_DATA,,,插入语句,
如果RDF图中已经存在将要删除的三元组或RDF图，那么该条三元组或RDF图在语句执行后将被删除。,删除三元组或RDF图,,,如果RDF图中已经存在将要删除的三元组或RDF图,
如果RDF图中已经存在将要删除的三元组或RDF图，那么该条三元组或RDF图在语句执行后将被删除。,删除三元组或RDF图,,,如果RDF图中已经存在将要删除的三元组或RDF图，那么该条三元组或RDF图在语句执行后将被删除。,
例如，可以将如下的三元组从图7-3所示的知识图谱中删除：对应的查询语句为：以上主要介绍了SPARQL的查询、插入以及删除方法，这是最基本的三种查询形式。,SPARQL,,,SPARQL,
SPARQL虽然没有支持更新操作的语法，不过可以通过DELETE_DATA和INSERT_DATA结合使用来实现。,SPARQL,,,不支持更新操作的语法,
SPARQL虽然没有支持更新操作的语法，不过可以通过DELETE_DATA和INSERT_DATA结合使用来实现。,SPARQL,,,sparql,
此外，在SPARQL1.1版本中增加了联合查询、简单蕴涵推理等内容，感兴趣的读者可以查阅相关标准规范。,SPARQL,,,SPARQL1.1版本,
此外，在SPARQL1.1版本中增加了联合查询、简单蕴涵推理等内容，感兴趣的读者可以查阅相关标准规范。,SPARQL,,,联合查询,
此外，在SPARQL1.1版本中增加了联合查询、简单蕴涵推理等内容，感兴趣的读者可以查阅相关标准规范。,SPARQL,,,简单蕴涵推理,
7.3语义数据搜索目前，得益于W3C完成RDF语言和协议的标准化，互联网上的不同RDF数据能够以RDF链接的形式链接在一起，形成一个完整的语义链接数据网络，也称作数据Web。,语义数据搜索,,,数据Web,
7.3语义数据搜索目前，得益于W3C完成RDF语言和协议的标准化，互联网上的不同RDF数据能够以RDF链接的形式链接在一起，形成一个完整的语义链接数据网络，也称作数据Web。,语义数据搜索,,,data Web,
并且，不同的场景都能够有一个公共的术语词汇表，以及精确的术语含义说明。,概念/术语词汇表,,,不同的场景,
并且，不同的场景都能够有一个公共的术语词汇表，以及精确的术语含义说明。,公共的术语词汇表,,,common term vocabulary list,
并且，不同的场景都能够有一个公共的术语词汇表，以及精确的术语含义说明。,精确的术语含义说明,,,precise term meaning explanation,
数据Web提供了丰富的信息，很多传统的搜索引擎都尝试将链接数据整合到其搜索结果中，如图7-4所示。,数据Web,,,将链接数据整合到其搜索结果中,
数据Web提供了丰富的信息，很多传统的搜索引擎都尝试将链接数据整合到其搜索结果中，如图7-4所示。,数据Web,,,dataWeb,
图7-4基于链接数据的语义搜索然而，有效地对整个数据Web进行精准的语义搜索还面临如下挑战：●可扩展性。,语义搜索,,,整个数据Web,
图7-4基于链接数据的语义搜索然而，有效地对整个数据Web进行精准的语义搜索还面临如下挑战：●可扩展性。,语义搜索,,,semantic search,
对数据Web的有效利用要求基础架构能在大规模和不断增长的内链数据上扩展和应用。,数据Web,,,基础架构,
●异构性。,异构性,,,SPO三元组,
如图7-5所示，主要包括：如何进一步整合数据源（补充RDF链接）；如何从不同的数据源中找到与查询相关的数据；如何合并来自不同数据源的查询结果。,SPO,,,如何进一步整合数据源（补充RDF链接）,
如图7-5所示，主要包括：如何进一步整合数据源（补充RDF链接）；如何从不同的数据源中找到与查询相关的数据；如何合并来自不同数据源的查询结果。,SPO,,,如何从不同的数据源中找到与查询相关的数据,
如图7-5所示，主要包括：如何进一步整合数据源（补充RDF链接）；如何从不同的数据源中找到与查询相关的数据；如何合并来自不同数据源的查询结果。,SPO,,,如何合并来自不同数据源的查询结果。,
如图7-5所示，主要包括：如何进一步整合数据源（补充RDF链接）；如何从不同的数据源中找到与查询相关的数据；如何合并来自不同数据源的查询结果。,SPO,,,三元组,
图7-5多源知识图谱的异构性●不确定性。,多源知识图谱的异构性,,,不确定性,
用户事先不能准确地了解自己的需求，所以需求的描述往往不完整。,需求的描述,,,用户不能准确地了解自己的需求,
这就要求语义搜索系统支持以不精确的方式匹配需求和数据，并对结果进行排序，能够足够灵活以应对条件的变化。,语义搜索系统,,,以不精确的方式匹配需求和数据，并对结果进行排序,
这就要求语义搜索系统支持以不精确的方式匹配需求和数据，并对结果进行排序，能够足够灵活以应对条件的变化。,语义搜索系统,,,semantic search system,
这些搜索引擎的基本组成都包括三元组存储、索引构建、查询处理及排序等，具体内容如下：1.三元组存储基于IR的存储方式，即单一的数据结构和查询算法，针对文本数据进行排序检索来优化。,搜索引擎,,,三元组存储、索引构建、查询处理及排序,
这些搜索引擎的基本组成都包括三元组存储、索引构建、查询处理及排序等，具体内容如下：1.三元组存储基于IR的存储方式，即单一的数据结构和查询算法，针对文本数据进行排序检索来优化。,三元组存储,,,基于IR的存储方式,
其优点是高度可压缩、可访问，且排序是整个存储索引的组成部分，缺点是不能处理结构化查询中简单的选择、联结等操作。,倒排索引,,,存储索引的优点,
其优点是高度可压缩、可访问，且排序是整个存储索引的组成部分，缺点是不能处理结构化查询中简单的选择、联结等操作。,压缩索引,,,compressed index,
基于DB的存储方式，即多种索引和查询算法，以适应各种结构化数据的复杂查询需求。,基于DB的存储方式,,,多种索引和查询算法,
其优点是能够完成复杂的选择、联结等操作，进而支持SPARQL结构化查询，并且能应对高动态场景（许多插入或删除），缺点是空间开销增大和访问有一定的局限性，并且无法集成对检索结果的排序。,SPARQL结构化查询,,,能够完成复杂的选择、联结等操作,
其优点是能够完成复杂的选择、联结等操作，进而支持SPARQL结构化查询，并且能应对高动态场景（许多插入或删除），缺点是空间开销增大和访问有一定的局限性，并且无法集成对检索结果的排序。,SPARQL,,,结构化查询,
原生存储（Native_Stores）即直接以RDF图形式的存储方式。,原生存储,,,直接以RDF图形式的存储方式,
原生存储（Native_Stores）即直接以RDF图形式的存储方式。,原生存储,,,Native_Stores,
其优点是高度可压缩，可访问类似IR的检索排序，支持选择、联结等操作，并且可在亚秒级时间内在单台机器上完成对TB级数据的查询，以及支持高动态场景，缺点是没有事务、恢复等功能。,Elasticsearch,,,检索排序,
其优点是高度可压缩，可访问类似IR的检索排序，支持选择、联结等操作，并且可在亚秒级时间内在单台机器上完成对TB级数据的查询，以及支持高动态场景，缺点是没有事务、恢复等功能。,倒排索引,,,inverted index,
2.索引构建目前主要的方式都是重用IR索引来索引RDF语义数据。,索引构建,,,重用IR索引来索引RDF语义数据,
IR索引主要包括以下几个核心概念：文档、字段（例如，标题、摘要、正文……）、词语、Posting_list和Positionlist[6]。,IR索引,,,几个核心概念,
IR索引主要包括以下几个核心概念：文档、字段（例如，标题、摘要、正文……）、词语、Posting_list和Positionlist[6]。,Posting_list,,,IR索引中Posting_list的概念,
而利用IR索引来索引RDF数据的核心思想是将RDF转换成具有fields和terms的虚拟文档，如图7-6所示。,IR索引RDF数据,,,将RDF转换成具有fields和terms的虚拟文档,
而利用IR索引来索引RDF数据的核心思想是将RDF转换成具有fields和terms的虚拟文档，如图7-6所示。,IR索引RDF数据,,,将RDF转换成具有fields和terms的虚拟文档,
图7-6基于IR索引的RDF语义数据索引示例值得一提的是，语义Web上的链接数据规模已经非常庞大，不可能对其完全重建索引，需要采用增量索引的方法。,基于IR索引的RDF语义数据索引,,,based on IR index of RDF semantic data index,
在增量索引的过程中，因为移动大量元素非常耗时，所以还需要设计基于块的索引扩展，同时考虑块大小对索引性能的影响，最后做到权衡索引更新、搜索和索引块大小之间的平衡。,基于块的索引扩展,,,设计基于块的索引扩展,
3.查询处理和排序首先，查询处理的核心步骤是给定查询输入，将其构建成复杂的结构化查询。,查询处理,,,给定查询输入，将其构建成复杂的结构化查询,
3.查询处理和排序首先，查询处理的核心步骤是给定查询输入，将其构建成复杂的结构化查询。,查询处理,,,query processing,
在此基础上，执行生成的结构化查询。,SPO,,,生成结构化查询,
不同拓扑结构的结构化查询的查询效率往往有很大不同[7]，如图7-7所示，从DBpedia和LUBM[14]的查询日志中抽取的5个典型的查询拓扑结构，其相应时间明显不同。,查询拓扑结构,,,query topology structure,
所以，合理利用缓存可以大大提高效率，精心设计的查询功能的优化算法也可以缩短响应时间，效率和查询表达式的复杂程度之间总是有一个折衷点。,查询功能的优化算法,,,缩短响应时间，效率和查询表达式的复杂程度之间总是有一个折衷点,
所以，合理利用缓存可以大大提高效率，精心设计的查询功能的优化算法也可以缩短响应时间，效率和查询表达式的复杂程度之间总是有一个折衷点。,查询功能的优化算法,,,optimization algorithm,
图7-7不同拓扑结构的查询和其相应时间对于查询结果的排序，通常需要考虑以下原则：●质量传播（Quality_Propagation）。,查询结果的排序,,,考虑以下原则,
图7-7不同拓扑结构的查询和其相应时间对于查询结果的排序，通常需要考虑以下原则：●质量传播（Quality_Propagation）。,查询结果的排序,,,Quality_Propagation,
图7-7不同拓扑结构的查询和其相应时间对于查询结果的排序，通常需要考虑以下原则：●质量传播（Quality_Propagation）。,查询,,,质量传播,
一个元素的分数可以看成是其质量的度量，质量传播即通过更新这个分数，反映该元素的相邻元素的质量。,元素的分数,,,质量的度量,
●数量聚合。,SPO,,,数量聚合,
除质量外，还要考虑邻居的数量。,SPO,,,考虑邻居的数量,
因此，如果有更多的邻居，元素排名会更高。,元素排名,,,更多的邻居,
因此，如果有更多的邻居，元素排名会更高。,元素排名,,,element ranking,
"例如，在查询“找到图灵奖获得者工作的机构”,CMU、UC伯克利和IBM是排在前三名的机构，因为他们拥有最多的图灵奖获得者。",CMU,,,卡内基梅隆大学,
"例如，在查询“找到图灵奖获得者工作的机构”,CMU、UC伯克利和IBM是排在前三名的机构，因为他们拥有最多的图灵奖获得者。",UC伯克利,,,加州大学伯克利分校,
"例如，在查询“找到图灵奖获得者工作的机构”,CMU、UC伯克利和IBM是排在前三名的机构，因为他们拥有最多的图灵奖获得者。",IBM,,,国际商业机器公司,
并且，排序方案需要满足单调性。,排序方案,,,单调性,
数据Web的查询及答案在通常情况下都涉及多个数据源，如图7-8所示。,数据Web的查询及答案,,,数据查询,
图7-8涉及多数源的查询及答案针对多数据源的情况，前提是对分布在不同数据源的数据进行融合，进而查询及处理，在多数据源、多存储的场景下进行语义数据搜索。,图7-8,,,语义数据搜索,
Hermes系统[13]就是一个典型的多数据源语义数据搜索框架，如图7-9所示，包括数据源融合，用户意图理解以及搜索和优化。,Hermes系统,,,多数据源语义数据搜索框架,
Hermes系统[13]就是一个典型的多数据源语义数据搜索框架，如图7-9所示，包括数据源融合，用户意图理解以及搜索和优化。,Hermes系统,,,一个典型的多数据源语义数据搜索框架,
各个环节的详细内容感兴趣的读者可以查阅相关论文。,SPO,,,各个环节的详细内容,
图7-9Hermes多数据源语义数据搜索框架语义数据搜索有多种研究原型，既可以直接应用IR技术以增强原有搜索系统的扩展性，也可以直接设计支持处理复杂查询的语义搜索系统，但是数据质量依然是一个问题，如何针对多数据源进行高质量的映射、理解用户的查询意图以及集成IR和DB排序以处理复杂查询，是未来设计语义数据搜索的关键。,语义数据搜索,,,设计语义数据搜索的关键,
图7-9Hermes多数据源语义数据搜索框架语义数据搜索有多种研究原型，既可以直接应用IR技术以增强原有搜索系统的扩展性，也可以直接设计支持处理复杂查询的语义搜索系统，但是数据质量依然是一个问题，如何针对多数据源进行高质量的映射、理解用户的查询意图以及集成IR和DB排序以处理复杂查询，是未来设计语义数据搜索的关键。,语义数据搜索,,,semantic data search,
7.4语义搜索的交互范式理解用户的查询意图在于将用户的查询输入构建成结构化的查询语言SPARQL，或者让用户直接提出结构化的查询，然而这种方式需要用户具备以下基本能力：熟悉知识图谱数据源，熟悉知识图谱的数据模式，了解知识图谱中数据大致包含哪些内容，熟练掌握结构化的查询语言。,语义搜索的交互范式,,,将用户的查询输入构建成结构化的查询语言SPARQL或者让用户直接提出结构化的查询,
7.4语义搜索的交互范式理解用户的查询意图在于将用户的查询输入构建成结构化的查询语言SPARQL，或者让用户直接提出结构化的查询，然而这种方式需要用户具备以下基本能力：熟悉知识图谱数据源，熟悉知识图谱的数据模式，了解知识图谱中数据大致包含哪些内容，熟练掌握结构化的查询语言。,语义搜索的交互范式,,,semantic search interaction paradigm,
然而，大部分的情形是普通用户往往不具备以上的能力，即使是知识图谱的专家或开发者，也很难完全熟悉每一个图谱的模式和内容。,知识图谱,,,普通用户,
所以，知识图谱的有效语义搜索需要一种简单高效的搜索范式，即允许用户以直观的、透明的、易用的方式对数据进行查询和浏览[13]。,知识图谱的有效语义搜索,,,简单高效的搜索范式,
所以，知识图谱的有效语义搜索需要一种简单高效的搜索范式，即允许用户以直观的、透明的、易用的方式对数据进行查询和浏览[13]。,知识图谱的有效语义搜索,,,semantic search of knowledge graph,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,关键词查询,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,自然语言查询,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,分面查询,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,表单查询,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,可视化查询,
此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。,交互范式,,,混合方式查询,
目前，最先进的语义搜索系统会结合一系列技术，从基于统计的IR排序方法、有效索引和查询处理的数据库方法到推理的复杂推理技术。,语义搜索系统,,,最先进的IR排序方法、有效索引和查询处理的数据库方法、推理的复杂推理技术,
目前，最先进的语义搜索系统会结合一系列技术，从基于统计的IR排序方法、有效索引和查询处理的数据库方法到推理的复杂推理技术。,语义搜索系统,,,semantic search system,
在设计相应的交互范式和语义搜索系统时，需要明白语义搜索的核心在于能够支持表现形式丰富的信息需求，即查询的表达能力至关重要。,语义搜索,,,查询的表达能力,
在设计相应的交互范式和语义搜索系统时，需要明白语义搜索的核心在于能够支持表现形式丰富的信息需求，即查询的表达能力至关重要。,语义搜索,,,semantic search,
然而，用户需求的表示通常不完整，表现在用户事先并不能准确了解自己的信息需求，进而无法完全准确地描述查询输入。,查询输入,,,用户需求的表示,
所以，需要设计一种直观且支持复杂信息需求表达的方式，以不精确的方式匹配需求和数据，并对结果进行排序，足够灵活以应对条件的变化。,查询语言,,,不精确的方式匹配需求和数据，并对结果进行排序，足够灵活以应对条件的变化,
所以，需要设计一种直观且支持复杂信息需求表达的方式，以不精确的方式匹配需求和数据，并对结果进行排序，足够灵活以应对条件的变化。,SPO,,,supports complex information needs expression,
在此基础上，设计查询处理、结果展示以及查询优化等其他环节。,查询处理,,,SPO查询,
7.4.1基于关键词的知识图谱语义搜索方法近年来，各大商业搜索引擎的成功表明用户使用关键字进行搜索非常舒适，这是由于关键词能够直观地表达信息需求[16]。,基于关键词的知识图谱语义搜索方法,,,商业搜索引擎的成功,
基于关键词查询和自然语言自动问答形式的知识图谱语义搜索引起广泛关注。,基于关键词查询和自然语言自动问答形式的知识图谱语义搜索,,,广泛关注,
1.基于关键词直接在知识图谱上搜索答案将关键词在知识图谱上直接进行搜索的方法，其核心思想是采用知识图谱子图定位的策略。,基于关键词直接在知识图谱上搜索答案,,,知识图谱上直接进行搜索的方法,
1.基于关键词直接在知识图谱上搜索答案将关键词在知识图谱上直接进行搜索的方法，其核心思想是采用知识图谱子图定位的策略。,基于关键词直接在知识图谱上搜索答案,,,直接在知识图谱上搜索答案,
基本流程是建立有效的关键词和知识图谱子图的索引，对于给定的关键字查询，首先在索引上匹配得到候选的知识图谱子图，进而实现对搜索空间的剪枝。,知识图谱索引,,,建立有效的关键词和知识图谱子图的索引,
基本流程是建立有效的关键词和知识图谱子图的索引，对于给定的关键字查询，首先在索引上匹配得到候选的知识图谱子图，进而实现对搜索空间的剪枝。,建立有效的关键词和知识图谱子图的索引,,,build effective keyword and knowledge graph subgraph index,
最后，在小范围的知识图谱子图上进行搜索，找到最终的查询答案。,知识图谱搜索,,,在小范围的知识图谱子图上进行搜索,
该类方法的核心在于索引的构建，其构建方式直接决定搜索的效率和结果的质量。,索引构建方式,,,该类方法的核心,
常见的索引方式有：（1）关键词倒排索引。,索引方式,,,关键词倒排索引,
通过构建索引，快速定位知识图谱中包含关键词的实体。,SPO,,,构建索引,
（2）摘要索引。,摘要索引,,,SPO三元组,
主要是构建一些包含结构化查询实体和关系类别的索引，在线上处理时根据类别摘要进行扩充。,倒排索引,,,构建索引,
（3）路径索引。,路径索引,,,SPO三元组,
主要借助关键词中包含的查询起始和终止结点，在图上按路径搜索提高查询效率。,图搜索,,,提高查询效率,
基于关键词直接在知识图谱上搜索答案主要可以解决简单的语义搜索，即查询答案仅仅出现在单条知识图谱三元组中，对于复杂的语义查询往往无法适用。,基于关键词直接在知识图谱上搜索答案,,,简单的语义搜索,
基于此需求，将关键词转化为结构化的查询方法应运而生。,关键词转化,,,将关键词转化为结构化的查询,
2.基于关键词生成结构化的查询将关键词集合转化为结构化的查询方法主要包括三个步骤：（1）关键词映射。,基于关键词生成结构化的查询,,,将关键词集合转化为结构化的查询方法,
2.基于关键词生成结构化的查询将关键词集合转化为结构化的查询方法主要包括三个步骤：（1）关键词映射。,基于关键词生成结构化的查询,,,基于关键词生成结构化的查询,
进行映射的主要原因是用户输入的关键词和知识图谱上的实体关系往往存在语义鸿沟，例如，关键词“妻子”在知识图谱可能对应的是“配偶”。,进行映射,,,用户输入的关键词和知识图谱上的实体关系,
所以，需要将关键词映射到知识图谱上实体、关系以及文本内容等。,概念/三元组,,,将关键词映射到知识图谱上实体、关系以及文本内容,
在此过程中，需要对知识图谱进行预处理，构建关键词和知识图谱实体和边的索引，进而在知识图谱上快速定位与关键词相关的实体和关系。,知识图谱预处理,,,构建关键词和知识图谱实体和边的索引,
在此过程中，需要对知识图谱进行预处理，构建关键词和知识图谱实体和边的索引，进而在知识图谱上快速定位与关键词相关的实体和关系。,知识图谱预处理,,,在知识图谱上快速定位与关键词相关的实体和关系,
在此过程中，需要对知识图谱进行预处理，构建关键词和知识图谱实体和边的索引，进而在知识图谱上快速定位与关键词相关的实体和关系。,构建关键词和知识图谱实体和边的索引,,,"build index of keywords, entities and edges",
（2）候选结构化查询构建。,候选结构化查询构建,,,SPO三元组,
映射关键词后，生成了对应的实体和关系。,映射关键词,,,生成对应的实体和关系,
映射关键词后，生成了对应的实体和关系。,等价,,,map keywords to entities and relations,
在知识图谱中，基于生成的实体和关系拓展，能够生成局部的知识图谱子图，就得到了结构化查询需要的查询图结构。,查询图结构,,,基于生成的实体和关系拓展,
在知识图谱中，基于生成的实体和关系拓展，能够生成局部的知识图谱子图，就得到了结构化查询需要的查询图结构。,查询图结构,,,query graph structure,
在此基础上，根据查询意图，将局部子图中的部分实体和关系替换位变量，进而生成结构化的查询。,基于图查询的局部子图,,,变量替换生成查询,
在此基础上，根据查询意图，将局部子图中的部分实体和关系替换位变量，进而生成结构化的查询。,局部子图,,,基于查询意图的结构化查询,
（3）候选结构化查询排序。,候选结构化查询排序,,,SPO三元组,
在关键词映射过程中，一个关键词往往会映射到知识图谱中的多个实体或关系，进而发现多个局部子图，生成多个结构化的查询。,关键词映射,,,知识图谱中的多个实体或关系,
在关键词映射过程中，一个关键词往往会映射到知识图谱中的多个实体或关系，进而发现多个局部子图，生成多个结构化的查询。,关键词映射,,,map keywords to entities or relations,
因此，需要对生成的结构化查询集合进行排序。,生成的结构化查询集合,,,对生成的结构化查询集合进行排序,
例如，可以基于关键词搜索相似度、实体的拓扑度分布等指标来计算排序评分。,排序评分,,,基于关键词搜索相似度、实体的拓扑度分布等指标来计算排序评分,
例如，可以基于关键词搜索相似度、实体的拓扑度分布等指标来计算排序评分。,相似度,,,similarity,
值得一提的是，基于关键词的语义搜索还需要考虑对查询结果进行排序，让用户通过观察排序结果进而更新关键词。,基于关键词的语义搜索,,,对查询结果进行排序,
常见的TF/IDF等排序方法均可以采用，这里不再赘述。,TF/IDF,,,常见的排序方法,
7.4.2基于分面的知识图谱语义搜索分面（Facet）概念最早是由“印度图书馆学之父”S.R.Ranganathan提出来的，用于表示图书文献的多维属性，并在此基础上提出了第一种图书分面分类法——冒号分类法（Colon_Classification)。,分面,,,Facet,
7.4.2基于分面的知识图谱语义搜索分面（Facet）概念最早是由“印度图书馆学之父”S.R.Ranganathan提出来的，用于表示图书文献的多维属性，并在此基础上提出了第一种图书分面分类法——冒号分类法（Colon_Classification)。,分面分类法,,,冒号分类法,
在该分面分类法中，每一个大类图书由五个基本的分面组成：主体、物质、动力、空间和时间。,五大分面,,,分类法,
此后，很多文献进一步给出分面这一概念的特性和定义。,分面,,,很多文献进一步给出分面这一概念的特性,
典型的定义将分面描述为属性或一组分类体系（category），或将分面定义为某个主题的维度或侧面。,分面,,,属性或一组分类体系（category）,
典型的定义将分面描述为属性或一组分类体系（category），或将分面定义为某个主题的维度或侧面。,分面,,,facet,
基于分面的语义搜索已经在工业界取得了广泛应用，如图7-10所示的是Ebay的商品分面搜索系统。,基于分面的语义搜索,,,工业界广泛应用,
"图7-10Ebay的商品分面搜索系统具体到知识图谱上的分面搜索，可以根据RDF三元组定义分面和值，即分面可以被object是分面的看作一个在当前结果集中的RDF资源（实体）的属性，这些属性的值[18,19]，如图7-11所示。",分面搜索,,,在当前结果集中的RDF资源（实体）的属性,
"图7-10Ebay的商品分面搜索系统具体到知识图谱上的分面搜索，可以根据RDF三元组定义分面和值，即分面可以被object是分面的看作一个在当前结果集中的RDF资源（实体）的属性，这些属性的值[18,19]，如图7-11所示。",分面,,,属性的值,
"图7-10Ebay的商品分面搜索系统具体到知识图谱上的分面搜索，可以根据RDF三元组定义分面和值，即分面可以被object是分面的看作一个在当前结果集中的RDF资源（实体）的属性，这些属性的值[18,19]，如图7-11所示。",分面,,,facet,
图7-11知识图谱分面实例图7-12展示了面向RDF数据分面搜索系统Dataplorer[18]的主要功能，可以看出构建知识图谱的分面搜索系统的主要环节包括：即时的计算生成分面、实时地计算分面的值以及根据用户的交互点击找到相关的分面。,面向RDF数据分面搜索系统,,,构建知识图谱的分面搜索系统,
图7-11知识图谱分面实例图7-12展示了面向RDF数据分面搜索系统Dataplorer[18]的主要功能，可以看出构建知识图谱的分面搜索系统的主要环节包括：即时的计算生成分面、实时地计算分面的值以及根据用户的交互点击找到相关的分面。,面向RDF数据分面搜索系统,,,Dataplorer,
图7-12知识图谱分面搜索系统Dataplorer由于分面搜索的技术多种多样，本节不再详细展开。,分面搜索,,,faceted search,
值得一提的是，一些高级的分面搜索系统还需要具备以下特征：（1）考虑特定领域的分面、分面值和计数。,分面搜索系统,,,高级的分面搜索系统,
值得一提的是，一些高级的分面搜索系统还需要具备以下特征：（1）考虑特定领域的分面、分面值和计数。,分面搜索系统,,,facet search system,
分面能够根据它们的起点进行分组。,分面,,,根据它们的起点进行分组,
（2）支持全面的浏览。,支持全面的浏览,,,SPO,
通过浏览可以达到每个分面的值，即没有值被跳过。,通过浏览,,,每个分面的值,
（3）支持动态分面和值的聚类。,支持动态分面和值的聚类,,,SPO三元组,
此外，每一个当前浏览的知识图谱实体可能有大量分面，还需要对分面进行排序和分面隐藏。,当前浏览的知识图谱实体,,,对分面进行排序和分面隐藏,
此外，每一个当前浏览的知识图谱实体可能有大量分面，还需要对分面进行排序和分面隐藏。,分面排序,,,sorting,
最终在整个分面搜索的过程中，分面应该以非常小的、相等的进度“引导”用户的，用户进而可以直观和明显地（用最少的必需知识）选择一类给定的分面。,分面,,,整个分面搜索,
最终在整个分面搜索的过程中，分面应该以非常小的、相等的进度“引导”用户的，用户进而可以直观和明显地（用最少的必需知识）选择一类给定的分面。,分面,,,facet,
7.4.3基于表示学习的知识图谱语义搜索近年来，知识图谱表示学习技术的出现，在知识图谱存储、构建、补全以及应用层面都产生了深远的影响。,基于表示学习的知识图谱语义搜索,,,知识图谱表示学习技术,
利用知识图谱表示学习技术来改善语义搜索的质量，也逐渐引起学术界和工业界的兴趣。,语义搜索,,,改善语义搜索的质量,
知识图谱表示学习旨在通过机器学习技术，将知识图谱中的实体和关系投射到连续低维的向量空间中，同时保持原有知识图谱的基本结构和性质[20]。,知识图谱表示学习,,,将知识图谱中的实体和关系投射到连续低维的向量空间中，同时保持原有知识图谱的基本结构和性质,
知识图谱表示学习旨在通过机器学习技术，将知识图谱中的实体和关系投射到连续低维的向量空间中，同时保持原有知识图谱的基本结构和性质[20]。,知识图谱表示学习,,,represent learning of knowledge graph,
在知识图谱表示学习技术出现之前，通常以图数据库的形式组织和存储知识图谱。,知识图谱,,,图数据库的形式组织和存储知识图谱,
在知识图谱表示学习技术出现之前，通常以图数据库的形式组织和存储知识图谱。,知识图谱,,,knowledge graph,
然而，随着开放知识图谱数据规模越来越大，即使是中等规模的知识图谱也可能包含了数以千计的关系类型、数百万的实体和数亿的三元组。,知识图谱,,,关系类型、实体、三元组,
然而，随着开放知识图谱数据规模越来越大，即使是中等规模的知识图谱也可能包含了数以千计的关系类型、数百万的实体和数亿的三元组。,等价,,,equivalence,
传统的基于图存储和图算法的知识图谱应用越来越受限于数据稀疏性和计算效率低下的问题[21]。,基于图存储和图算法的知识图谱应用,,,数据稀疏性和计算效率低下的问题,
通过知识图谱表示学习技术，将其投射到低维连续的向量空间中，对于语义搜索领域主要有两个好处。,语义搜索,,,知识图谱表示学习技术,
通过知识图谱表示学习技术，将其投射到低维连续的向量空间中，对于语义搜索领域主要有两个好处。,语义搜索,,,语义搜索,
一是在连续向量空间中，可以直接进行数值型计算，对查询术语或者关键字进行扩展，效率极高。,向量空间检索,,,直接进行数值型计算，对查询术语或者关键字进行扩展，效率极高,
一是在连续向量空间中，可以直接进行数值型计算，对查询术语或者关键字进行扩展，效率极高。,向量空间索引,,,vector space index,
例如，衡量两个实体之间的相似度可以通过直接计算两个实体在向量空间中的欧式距离来实现。,衡量两个实体之间的相似度,,,直接计算两个实体在向量空间中的欧式距离来实现,
例如，衡量两个实体之间的相似度可以通过直接计算两个实体在向量空间中的欧式距离来实现。,相似度,,,similarity,
二是低维连续的知识图谱向量表示是通过机器学习技术学习得到的，其学习过程既考虑了知识图谱的局部特征，又考虑了全局特征，生成的实体和关系的向量在本质上是一种蕴涵语义更丰富的表示，可以进行高效率的简单查询推理。,低维连续的知识图谱向量表示,,,low-dimensional continuous knowledge graph vector representation,
下面从基于表示学习的结构化语义查询和基于表示学习的自然语言语义查询两个方面，介绍知识图谱表示学习技术可以带来哪些改进。,基于表示学习的结构化语义查询,,,知识图谱表示学习技术,
下面从基于表示学习的结构化语义查询和基于表示学习的自然语言语义查询两个方面，介绍知识图谱表示学习技术可以带来哪些改进。,基于表示学习的结构化语义查询,,,基于表示学习的结构化语义查询的等价查询技术,
下面从基于表示学习的结构化语义查询和基于表示学习的自然语言语义查询两个方面，介绍知识图谱表示学习技术可以带来哪些改进。,基于表示学习的自然语言语义查询,,,基于表示学习的自然语言语义查询的等价查询技术,
1.基于表示学习的结构化语义查询表示学习在结构化语义查询的应用主要是可以有效、高速地进行近似语义搜索。,基于表示学习的结构化语义查询,,,有效、高速地进行近似语义搜索,
图7-13基于表示学习的知识图谱结构化查询示意图2.基于表示学习的自然语言语义查询自然语言形式的语义查询的核心在于短语（phrase）到知识图谱上实体或边的映射，进而生成结构化的查询。,基于表示学习的自然语言语义查询,,,知识图谱结构化查询,
图7-13基于表示学习的知识图谱结构化查询示意图2.基于表示学习的自然语言语义查询自然语言形式的语义查询的核心在于短语（phrase）到知识图谱上实体或边的映射，进而生成结构化的查询。,基于表示学习的自然语言语义查询,,,基于表示学习的知识图谱结构化查询,
在映射的过程中，主要难点在于关系（实体之间的边或实体属性）歧义的消除和查询图的构建。,映射,,,关系歧义的消除和查询图的构建,
在映射的过程中，主要难点在于关系（实体之间的边或实体属性）歧义的消除和查询图的构建。,关系,,,歧义的消除,
在映射的过程中，主要难点在于关系（实体之间的边或实体属性）歧义的消除和查询图的构建。,查询图的构建,,,关系的构建,
表示学习技术在这两个过程中都可以充分发挥作用。,表示学习技术,,,两个过程,
整个流程如图7-14中的例子所示[23]。,SPO,,,整个流程,
图7-14基于表示学习的知识图谱自然语言语义查询示意图首先，在离线阶段，生成知识图谱的实值向量，并且将关系短语词典和知识图谱中的关系在向量空间中对齐。,向量空间对齐,,,关系短语词典和知识图谱中的关系,
图7-14基于表示学习的知识图谱自然语言语义查询示意图首先，在离线阶段，生成知识图谱的实值向量，并且将关系短语词典和知识图谱中的关系在向量空间中对齐。,向量空间对齐,,,align vector space,
在线上阶段，将首先通过关键字检索的方式发现知识图谱中和自然语言短语对应的候选实体和边的集合。,线上阶段,,,关键字检索的方式发现知识图谱中和自然语言短语对应的候选实体和边的集合,
在线上阶段，将首先通过关键字检索的方式发现知识图谱中和自然语言短语对应的候选实体和边的集合。,关键字检索,,,关键字检索,
传统的语义搜索方法将对候选的实体和边进行消歧，容易出错；并且，在消歧后进行实体和边的组合，计算最优查询图，进而提交给查询引擎，效率较低。,语义搜索,,,传统的语义搜索方法,
知识图谱的向量空间可以帮助模型省略消歧的过程，方法是将每一个候选实体集合中的实体平均实值向量作为查询图生成时的实体表示，进而并不需要某一个具体的实体向量。,查询图生成时的实体表示,,,average entity value vector as query graph generation,
在计算查询图时，也可以利用翻译机制等原理提前预估查询图的评分好坏，提高生成效率和质量。,查询图,,,翻译机制等原理提前预估查询图的评分好坏，提高生成效率和质量,
以上两个案例在本质上是在传统语义搜索的数据和查询之间提供了全新的向量空间维度，进而利用实值向量计算的优势对查询进行改进。,语义搜索,,,传统语义搜索的数据和查询之间提供了全新的向量空间维度,
以上两个案例在本质上是在传统语义搜索的数据和查询之间提供了全新的向量空间维度，进而利用实值向量计算的优势对查询进行改进。,语义搜索的数据,,,向量空间维度,
以上两个案例在本质上是在传统语义搜索的数据和查询之间提供了全新的向量空间维度，进而利用实值向量计算的优势对查询进行改进。,语义搜索的数据,,,查询改进,
以近似查询来说，基于表示学习的搜索可以在不修改初始查询的前提下直接返回近似结果，极大地提高近似查询的质量，为知识图谱近似查询提供了全新的思路。,基于表示学习的搜索,,,知识图谱近似查询,
以近似查询来说，基于表示学习的搜索可以在不修改初始查询的前提下直接返回近似结果，极大地提高近似查询的质量，为知识图谱近似查询提供了全新的思路。,基于表示学习的搜索,,,based on representation learning search,
值得一提的是，表示学习技术为知识图谱的语义搜索提供了新思路，但同时面临三项挑战，需要在实际使用中予以考虑：（1）最近邻搜索效率问题。,表示学习技术,,,知识图谱的语义搜索,
无论是近似查询，还是自然语言问答中的关系拓展和候选查询图构建，在向量空间中进行最近邻搜索存在维度灾难造成的效率问题。,向量空间中进行最近邻搜索,,,维度灾难造成的效率问题,
无论是近似查询，还是自然语言问答中的关系拓展和候选查询图构建，在向量空间中进行最近邻搜索存在维度灾难造成的效率问题。,向量空间中进行最近邻搜索,,,最近邻搜索,
（2）链接预测的合取问题。,链接预测的合取问题。,,,SPO三元组,
在向量空间中利用基于链接预测的思想，对语义搜索的目标进行预估，但是当搜索目标受多个实体和关系共同约束时，需要考虑不同链接预测的结果进行叠加时的合取问题。,语义搜索的目标预估,,,基于链接预测的思想,
在向量空间中利用基于链接预测的思想，对语义搜索的目标进行预估，但是当搜索目标受多个实体和关系共同约束时，需要考虑不同链接预测的结果进行叠加时的合取问题。,语义搜索的目标,,,语义搜索的目标进行预估,
（3）结果可解释性问题。,SPO,,,结果可解释性问题,
表示学习技术可以让语义检索绕过对查询本身的修改拓展，直接得到近似结果，在提高效率和精度的同时又带来结果的可解释问题。,表示学习技术,,,语义检索绕过对查询本身的修改拓展，直接得到近似结果,
表示学习技术可以让语义检索绕过对查询本身的修改拓展，直接得到近似结果，在提高效率和精度的同时又带来结果的可解释问题。,表示学习技术,,,语义检索绕过对查询本身的修改拓展,
7.5开源工具实践本节将简述基于Elasticsearch[6]搭建一个简易实体语义搜索引擎的流程。,基于Elasticsearch搭建一个简易实体语义搜索引擎,,,开源工具实践,
该搜索引擎可以按照名称搜索实体、实体属性、多跳搜索以及搜索符合多对属性要求的实体。,搜索引擎,,,按照名称搜索实体、实体属性、多跳搜索以及搜索符合多对属性要求的实体,
在功能逻辑完成后，可搭建网站将其可视化。,可视化,,,功能逻辑,
本实践的相关工具、实验数据及操作说明由OpenKG提供，地址为http://openkg.cn。,本实践,,,OpenKG,
7.5.1功能介绍1.实体搜索实体搜索即输入实体名称，返回该实体的知识卡片（实体在知识图谱中的所有属性和属性值），如图7-15所示。,实体搜索,,,实体搜索功能,
7.5.1功能介绍1.实体搜索实体搜索即输入实体名称，返回该实体的知识卡片（实体在知识图谱中的所有属性和属性值），如图7-15所示。,实体搜索,,,entity search,
图7-15实体搜索功能示意图2.实体的属性搜索输入实体名称和一个属性名称，如果该实体存在该属性值，则返回该属性值，如图7-16所示。,实体的属性搜索,,,实体名称和一个属性名称,
图7-15实体搜索功能示意图2.实体的属性搜索输入实体名称和一个属性名称，如果该实体存在该属性值，则返回该属性值，如图7-16所示。,实体的属性搜索,,,entity search function,
图7-16实体属性值搜索功能示意图3.多跳搜索多跳搜索可以输入多个属性，实现多跳搜索，即形如“姚明的女儿的母亲的身高”，其中“姚明：女儿”查询得到的是实体“姚明”的一个属性，但同时这个属性值也作为一个实体存在于数据集中，那么就可以接着对该实体继续查询其属性和值，如图7-17所示。,多跳搜索,,,实体属性值搜索功能,
图7-17多跳搜索功能示意图4.按照多种属性条件检索实体输入多对[属性名opearotr属性值]，它们之间的关系可以是AND、OR、NOT，同时属性值是等于、大于、小于一个输入值，返回满足这些属性限制的实体。,多跳搜索功能,,,按照多种属性条件检索实体,
图7-17多跳搜索功能示意图4.按照多种属性条件检索实体输入多对[属性名opearotr属性值]，它们之间的关系可以是AND、OR、NOT，同时属性值是等于、大于、小于一个输入值，返回满足这些属性限制的实体。,多跳搜索,,,multi-hop search,
例如，“职业：篮球运动员or职业：足球运动员AndNot国籍：中国And身高>=180”，如图7-18所示。,“职业：篮球运动员or职业：足球运动员AndNot国籍：中国And身高>=180”,,,SPO三元组,
例如，“职业：篮球运动员or职业：足球运动员AndNot国籍：中国And身高>=180”，如图7-18所示。,等价,,,equivalence,
例如，“职业：篮球运动员or职业：足球运动员AndNot国籍：中国And身高>=180”，如图7-18所示。,英文名,,,英文名,