{"text": "为了更好地进行三元组数据的存储，语义万维网领域发展出专门存储RDF数据的三元组库；数据库领域发展出用于管理属性图的图数据库。", "relation": [{"head": "语义万维网领域", "head_type": "概念", "relation": "研究", "tail": "专门存储RDF数据的三元组库", "tail_type": "概念"}, {"head": "数据库领域", "head_type": "概念", "relation": "研究", "tail": "用于管理属性图的图数据库", "tail_type": "概念"}]}
{"text": "本章首先介绍图数据模型和图查询语言等基本知识；以演示操作的方式讲解各种主流知识图谱数据库，包括基于关系数据库的存储方案、面向RDF的三元组数据库和原生图数据库；以图数据库Neo4j为例介绍图模型数据的底层存储细节，同时梳理图数据索引和查询处理等关键技术；最后，以Apache_Jena为例，针对知识图谱数据库开源工具进行实践。", "relation": [{"head": "各种主流知识图谱数据库", "head_type": "概念", "relation": "包含", "tail": "基于关系数据库的存储方案", "tail_type": "概念"}, {"head": "各种主流知识图谱数据库", "head_type": "概念", "relation": "包含", "tail": "面向RDF的三元组数据库", "tail_type": "概念"}, {"head": "各种主流知识图谱数据库", "head_type": "概念", "relation": "包含", "tail": "原生图数据库", "tail_type": "概念"}]}
{"text": "3.1知识图谱数据库基本知识本节首先介绍目前表示知识图谱的两种主要图数据模型：RDF图和属性图。", "relation": [{"head": "目前表示知识图谱的两种主要图数据模型", "head_type": "概念", "relation": "包含", "tail": "RDF图", "tail_type": "概念"}, {"head": "目前表示知识图谱的两种主要图数据模型", "head_type": "概念", "relation": "包含", "tail": "属性图", "tail_type": "概念"}]}
{"text": "3.1.1知识图谱数据模型从数据模型角度来看，知识图谱本质上是一种图数据。", "relation": [{"head": "知识图谱", "head_type": "概念", "relation": "被定义为", "tail": "一种图数据", "tail_type": "概念"}]}
{"text": "往往一个数据模型的生命力要看其数学基础的强弱，关系模型长盛不衰的一个重要原因是其数学基础为关系代数。", "relation": [{"head": "一个数据模型的生命力", "head_type": "概念", "relation": "依靠", "tail": "其数学基础", "tail_type": "概念"}, {"head": "关系模型", "head_type": "概念", "relation": "被定义为", "tail": "关系代数", "tail_type": "概念"}]}
{"text": "知识图谱数据模型的数学基础源于有着近300年历史的数学分支——图论。", "relation": [{"head": "知识图谱数据模型的数学基础", "head_type": "概念", "relation": "源于", "tail": "图论", "tail_type": "概念"}]}
{"text": "在图论中，图是二元组G=（V,E），其中V是节点集合，E是边集合。", "relation": [{"head": "图", "head_type": "概念", "relation": "被定义为", "tail": "二元组G=（V,E）", "tail_type": "概念"}, {"head": "二元组G=（V,E）", "head_type": "概念", "relation": "包含", "tail": "V", "tail_type": "概念"}, {"head": "二元组G=（V,E）", "head_type": "概念", "relation": "包含", "tail": "E", "tail_type": "概念"}]}
{"text": "知识图谱数据模型基于图论中图的定义，用节点集合表示实体，用边集合表示实体间的联系，这种一般和通用的数据表示恰好能够自然地刻画现实世界中事物的广泛联系。", "relation": [{"head": "知识图谱数据模型", "head_type": "概念", "relation": "依靠", "tail": "图论中图的定义", "tail_type": "概念"}, {"head": "节点集合", "head_type": "概念", "relation": "实现", "tail": "实体", "tail_type": "概念"}, {"head": "边集合", "head_type": "概念", "relation": "实现", "tail": "实体间的联系", "tail_type": "概念"}, {"head": "数据表示", "head_type": "概念", "relation": "实现", "tail": "现实世界中事物的广泛联系", "tail_type": "概念"}]}
{"text": "1.RDF图RDF是W3C制定的在语义万维网上表示和交换机器可理解信息的标准数据模型[1]。", "relation": [{"head": "RDF图RDF", "head_type": "概念", "relation": "被定义为", "tail": "W3C制定的在语义万维网上表示和交换机器可理解信息的标准数据模型", "tail_type": "概念"}]}
{"text": "在RDF三元组集合中，每个Web资源具有一个HTTP_URI作为其唯一的id；一个RDF图定义为三元组(s,p,o)的有限集合；每个三元组代表一个陈述句，其中s是主语，p是谓语，o是宾语；(s,p,o)表示资源s与资源o之间具有联系p，或表示资源s具有属性p且其取值为o。", "relation": [{"head": "RDF图", "head_type": "概念", "relation": "被定义为", "tail": "三元组(s,p,o)的有限集合", "tail_type": "概念"}, {"head": "三元组(s,p,o)", "head_type": "概念", "relation": "等价", "tail": "一个陈述句", "tail_type": "概念"}, {"head": "陈述句", "head_type": "概念", "relation": "包含", "tail": "s主语", "tail_type": "概念"}, {"head": "陈述句", "head_type": "概念", "relation": "包含", "tail": "p谓语", "tail_type": "概念"}, {"head": "陈述句", "head_type": "概念", "relation": "包含", "tail": "o宾语", "tail_type": "概念"}]}
{"text": "实际上，RDF三元组集合即为图中的有向边集合。", "relation": [{"head": "RDF三元组集合", "head_type": "概念", "relation": "属于", "tail": "图中的有向边集合", "tail_type": "概念"}]}
{"text": "节点属性可用三元组表示，这类三元组的宾语称为字面量，即图中的矩形。", "relation": [{"head": "节点属性", "head_type": "概念", "relation": "依靠", "tail": "三元组", "tail_type": "概念"}, {"head": "三元组的宾语", "head_type": "概念", "relation": "被定义为", "tail": "字面量", "tail_type": "概念"}]}
{"text": "目前，RDF图上的查询语言是SPARQL；属性图上的查询语言常用的是Cypher和Gremlin。", "relation": [{"head": "RDF图查询语言", "head_type": "概念", "relation": "依靠", "tail": "SPARQL", "tail_type": "产品"}, {"head": "属性图查询语言常用的", "head_type": "概念", "relation": "是", "tail": "Cypher", "tail_type": "产品"}, {"head": "属性图查询语言常用的", "head_type": "概念", "relation": "是", "tail": "Gremlin", "tail_type": "产品"}]}
{"text": "1.SPARQLSPARQL是W3C制定的RDF图数据的标准查询语言[4]。", "relation": [{"head": "SPARQL", "head_type": "产品", "relation": "属于", "tail": "W3C制定的RDF图数据的标准查询语言[4]", "tail_type": "概念"}]}
{"text": "SPARQL从语法上借鉴了SQL，同样属于声明式查询语言。", "relation": [{"head": "SPARQL", "head_type": "产品", "relation": "源于", "tail": "SQL", "tail_type": "产品"}, {"head": "SPARQL", "head_type": "产品", "relation": "属于", "tail": "声明式查询语言", "tail_type": "概念"}]}
{"text": "最新的SPARQL1.1版本为有效查询RDF图专门设计了三元组模式、子图模式、属性路径等多种查询机制。", "relation": [{"head": "最新的SPARQL1.1版本", "head_type": "产品", "relation": "实现", "tail": "三元组模式查询机制", "tail_type": "概念"}, {"head": "最新的SPARQL1.1版本", "head_type": "产品", "relation": "实现", "tail": "子图模式查询机制", "tail_type": "概念"}, {"head": "最新的SPARQL1.1版本", "head_type": "产品", "relation": "实现", "tail": "属性路径查询机制", "tail_type": "概念"}]}
{"text": "几乎全部的RDF三元组数据库都实现了SPARQL语言。", "relation": [{"head": "RDF三元组数据库", "head_type": "概念", "relation": "实现", "tail": "SPARQL语言", "tail_type": "产品"}]}
{"text": "三元组模式查询是最基本的SPARQL查询。", "relation": [{"head": "三元组模式查询", "head_type": "概念", "relation": "属于", "tail": "最基本的SPARQL查询", "tail_type": "概念"}]}
{"text": "这里既有?p和?pr分别作为两个三元组模式的宾语和主语连接起来的链式模式，也有?p作为两个三元组模式的主语连接起来的星形结构，该查询是一个更加一般的BGP查询。", "relation": [{"head": "两个三元组模式的宾语和主语连接起来的链式模式", "head_type": "概念", "relation": "属于", "tail": "BGP查询", "tail_type": "概念"}, {"head": "?p作为两个三元组模式的主语连接起来的星形结构", "head_type": "概念", "relation": "属于", "tail": "BGP查询", "tail_type": "概念"}]}
{"text": "实际上，BGP查询相当于一个带有变量的查询图，查询过程是在数据图中寻找与查询图映射Isomorphism）或子图同态匹配的所有子图，等价于图论中的子图同构（Subgraph_Homomorphism）问题[5]，所以也将BGP查询称为子图匹配查询。", "relation": [{"head": "BGP查询", "head_type": "概念", "relation": "等价", "tail": "一个带有变量的查询图", "tail_type": "概念"}, {"head": "BGP查询", "head_type": "概念", "relation": "等价", "tail": "子图匹配查询", "tail_type": "概念"}]}
{"text": "1.1引入的属性路径（Property_SPARQL)实际上是一整套知识服务标准体系。", "relation": [{"head": "属性路径", "head_type": "概念", "relation": "英文名", "tail": "Property_SPARQL", "tail_type": "概念"}, {"head": "属性路径", "head_type": "概念", "relation": "属于", "tail": "一整套知识服务标准体系", "tail_type": "概念"}]}
{"text": "SPARQL1.1语言的语法和语义的完整定义请参见W3C的推荐标准“SPARQL1.1查询语言”[4]，该标准连同其他10个推荐标准共同组成了SPARQL知识平台，包括查询[4]、更新[6]、服务描述[7]、联邦查询[8]、查询结果格式[9]、蕴涵推理[10]和接口协议[11]等。", "relation": [{"head": "SPARQL1.1语言的语法和语义的完整定义", "head_type": "概念", "relation": "依靠", "tail": "W3C的推荐标准“SPARQL1.1查询语言”", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "查询", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "更新", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "服务描述", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "联邦查询", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "查询结果格式", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "蕴涵推理", "tail_type": "概念"}, {"head": "SPARQL知识平台", "head_type": "概念", "relation": "包含", "tail": "接口协议", "tail_type": "概念"}]}
{"text": "开放的SPARQL学习教程有WikiBooks_SPARQL教程[12]、Wikidata_SPARQL教程[13]和Apache_Jena_SPARQL教程[14]等。", "relation": [{"head": "开放的SPARQL学习教程", "head_type": "概念", "relation": "包含", "tail": "WikiBooks_SPARQL教程", "tail_type": "概念"}, {"head": "开放的SPARQL学习教程", "head_type": "概念", "relation": "包含", "tail": "Wikidata_SPARQL教程", "tail_type": "概念"}, {"head": "开放的SPARQL学习教程", "head_type": "概念", "relation": "包含", "tail": "Apache_Jena_SPARQL教程", "tail_type": "概念"}]}
{"text": "2.CypherCypher最初是图数据库Neo4j中实现的属性图数据查询语言[15]。", "relation": [{"head": "Cypher", "head_type": "产品", "relation": "属于", "tail": "图数据库Neo4j中实现的属性图数据查询语言", "tail_type": "概念"}]}
{"text": "2015年，Neo4j公司发起开源项目openCypher[16]，旨在对Cypher进行标准化工作，为其他实现者提供语法和语义的参考标准。", "relation": [{"head": "Neo4j公司", "head_type": "产品", "relation": "研究", "tail": "开源项目openCypher", "tail_type": "产品"}]}
{"text": "虽然Cypher的发展目前仍由Neo4j主导，但包括SAP_HANA_Graph[17]、Redis_Graph[18]、AgensGraph[19]和Memgraph[20]等在内的图数据库产品已经实现了Cypher。", "relation": [{"head": "图数据库产品", "head_type": "概念", "relation": "实现了", "tail": "Cypher", "tail_type": "产品"}]}
{"text": "3.GremlinGremlin是Apache_TinkerPop图计算框架[21]提供的属性图查询语言[22]。", "relation": [{"head": "Gremlin", "head_type": "产品", "relation": "属于", "tail": "Apache_TinkerPop图计算框架提供的属性图查询语言", "tail_type": "概念"}]}
{"text": "ApacheTinkerPop被设计为访问图数据库的通用API接口，其作用类似于关系数据库上的JDBC接口。", "relation": [{"head": "ApacheTinkerPop", "head_type": "产品", "relation": "属于", "tail": "访问图数据库的通用API接口", "tail_type": "概念"}]}
{"text": "Gremlin的定位是图遍历语言，其执行机制好比是一个人置身于图中沿着有向边，从一个节点到另一个节点进行导航式的游走。", "relation": [{"head": "Gremlin", "head_type": "产品", "relation": "属于", "tail": "图遍历语言", "tail_type": "概念"}]}
{"text": "这种执行方式决定了用户使用Gremlin需要指明具体的导航步骤，这和自己驾驶汽车到一个目的地需要知道行车路线是一个道理，所以将Gremlin归为过程式语言，即需要明确“怎么做”。", "relation": [{"head": "Gremlin", "head_type": "产品", "relation": "属于", "tail": "过程式语言", "tail_type": "概念"}]}
{"text": "这类语言的优点是可以时刻知道自己在图中所处的位置，以及是如何到达该位置的；缺点是用户需要“认识路”！与受到SQL影响的声明式语言SPARQL和Cypher不同，Gremlin更像一种函数式的编程语言接口。", "relation": [{"head": "Gremlin", "head_type": "产品", "relation": "等价", "tail": "一种函数式的编程语言接口", "tail_type": "概念"}]}
{"text": "（1）列出图中所有节点的属性输出：说明：V表示节点集合。", "relation": [{"head": "V", "head_type": "概念", "relation": "被定义为", "tail": "节点集合", "tail_type": "概念"}]}
{"text": "（2）列出图中所有的边输出：说明：E表示边集合。", "relation": [{"head": "E", "head_type": "概念", "relation": "被定义为", "tail": "边集合", "tail_type": "概念"}]}
{"text": "（3）查询从节点1出发的标签为“认识”的边输出：说明：v(1)选取id为1的节点；outE表示节点的出边集合，outE(’认识’)是标签为“认识”的出边集合。", "relation": [ {"head": "节点的出边集合", "head_type": "概念", "relation": "被定义为", "tail": "outE", "tail_type": "概念"}]}
{"text": "3.2常见知识图谱存储方法本节介绍三类知识图谱数据库：基于关系数据库的存储方案、面向RDF的三元组数据库和原生图数据库，多数系统给出了演示操作步骤。", "relation": [{"head": "常见知识图谱存储方法", "head_type": "概念", "relation": "包含", "tail": "基于关系数据库的存储方案", "tail_type": "概念"}, {"head": "常见知识图谱存储方法", "head_type": "概念", "relation": "包含", "tail": "面向RDF的三元组数据库", "tail_type": "概念"}, {"head": "常见知识图谱存储方法", "head_type": "概念", "relation": "包含", "tail": "原生图数据库", "tail_type": "概念"}]}
{"text": "在历史上，关系数据库曾经取代了层次数据库和网状数据库；成功吸收容纳了面向对象数据库和XML数据库，成为现今数据管理的主流数据库产品。", "relation": [{"head": "关系数据库", "head_type": "概念", "relation": "源于", "tail": "面向对象数据库", "tail_type": "概念"}, {"head": "关系数据库", "head_type": "概念", "relation": "源于", "tail": "XML数据库", "tail_type": "概念"}]}
{"text": "商业数据库包括Oracle、DB2和SQL_Server等，开源数据库包括PostgreSQL和MySQL等。", "relation": [{"head": "商业数据库", "head_type": "概念", "relation": "包含", "tail": "Oracle", "tail_type": "产品"}, {"head": "商业数据库", "head_type": "概念", "relation": "包含", "tail": "DB2", "tail_type": "产品"}, {"head": "商业数据库", "head_type": "概念", "relation": "包含", "tail": "SQL_Server", "tail_type": "产品"}, {"head": "开源数据库", "head_type": "概念", "relation": "包含", "tail": "PostgreSQL", "tail_type": "产品"}, {"head": "开源数据库", "head_type": "概念", "relation": "包含", "tail": "MySQL", "tail_type": "产品"}]}
{"text": "基于关系数据库的存储方案是目前知识图谱采用的一种主要存储方法。", "relation": [{"head": "基于关系数据库的存储方案", "head_type": "概念", "relation": "属于", "tail": "目前知识图谱采用的一种主要存储方法", "tail_type": "概念"}]}
{"text": "本小节将按照时间发展顺序简要介绍各种基于关系表的知识图谱存储结构，包括三元组表、水平表、属性表、垂直划分、六重索引和DB2RDF。", "relation": [{"head": "基于关系表的知识图谱存储结构", "head_type": "概念", "relation": "包含", "tail": "三元组表", "tail_type": "概念"}, {"head": "基于关系表的知识图谱存储结构", "head_type": "概念", "relation": "包含", "tail": "水平表", "tail_type": "概念"}, {"head": "基于关系表的知识图谱存储结构", "head_type": "概念", "relation": "包含", "tail": "属性表", "tail_type": "概念"}, {"head": "基于关系表的知识图谱存储结构", "head_type": "概念", "relation": "包含", "tail": "垂直划分", "tail_type": "概念"}, {"head": "基于关系表的知识图谱存储结构", "head_type": "概念", "relation": "包含", "tail": "六重索引", "tail_type": "概念"}, {"head": "基于关系表的知识图谱存储结构", "head_type": "概念", "relation": "包含", "tail": "DB2RDF", "tail_type": "概念"}]}
{"text": "图3-4摘自DBpedia数据集的RDF知识图谱1.三元组表三元组表是将知识图谱存储到关系数据库的最简单、最直接的办法，就是在关系数据库中建立一张具有3列的表，该表的模式为：三元组表(主语，谓语，宾语)将知识图谱中的每条三元组存储为三元组表中的一行记录。", "relation": [{"head": "三元组表", "head_type": "概念", "relation": "被定义为", "tail": "将知识图谱存储到关系数据库的最简单、最直接的办法", "tail_type": "概念"}]}
{"text": "采用三元组表存储方案的代表是RDF数据库系统3store[24]。", "relation": [{"head": "RDF数据库系统3store", "head_type": "概念", "relation": "属于", "tail": "采用三元组表存储方案的代表", "tail_type": "概念"}]}
{"text": "实际上，水平表就相当于知识图谱的邻接表。", "relation": [{"head": "水平表", "head_type": "概念", "relation": "等价", "tail": "知识图谱的邻接表", "tail_type": "概念"}]}
{"text": "不难看出，水平表的列数是知识图谱中不同谓语的数量，行数是知识图谱中不同主语的数量。", "relation": [{"head": "水平表的列数", "head_type": "概念", "relation": "被定义为", "tail": "知识图谱中不同谓语的数量", "tail_type": "概念"}, {"head": "水平表的行数", "head_type": "概念", "relation": "被定义为", "tail": "知识图谱中不同主语的数量", "tail_type": "概念"}]}
{"text": "采用水平表存储方案的代表是早期的RDF数据库系统DLDB[25]。", "relation": [{"head": "早期的RDF数据库系统DLDB", "head_type": "概念", "relation": "属于", "tail": "采用水平表存储方案的代表", "tail_type": "概念"}]}
{"text": "实际上，水平表方案是属性表存储方案的一种极端情况，即水平表是将所有主语划归为一类，因此属性表中的空值问题与水平表相比会大为缓解。", "relation": [{"head": "水平表方案", "head_type": "概念", "relation": "属于", "tail": "属性表存储方案的一种极端情况", "tail_type": "概念"}]}
{"text": "采用垂直划分存储方案的代表数据库是SW-Store[28]。", "relation": [{"head": "SW-Store", "head_type": "产品", "relation": "依靠", "tail": "垂直划分存储方案", "tail_type": "概念"}]}
{"text": "5.六重索引六重索引（SextupleIndexing）存储方案是对三元组表的扩展，是一种典型的“空间换时间”策略，其将三元组全部6种排列对应地建立为6张表，即spo(主语，谓语，宾语)、pos(谓语，宾语，主语)、osp(宾语，主语，谓语)、sop(主语，宾语，谓语)、pso(谓语，主语，宾语)和ops(宾语，谓语，主语)", "relation": [{"head": "六重索引存储方案", "head_type": "概念", "relation": "源于", "tail": "三元组表的扩展", "tail_type": "概念"}, {"head": "六重索引存储方案", "head_type": "概念", "relation": "属于", "tail": "典型的“空间换时间”策略", "tail_type": "概念"}, {"head": "spo", "head_type": "概念", "relation": "被定义为", "tail": "主语，谓语，宾语", "tail_type": "概念"}, {"head": "pos", "head_type": "概念", "relation": "被定义为", "tail": "谓语，宾语，主语", "tail_type": "概念"}, {"head": "osp", "head_type": "概念", "relation": "被定义为", "tail": "宾语，主语，谓语", "tail_type": "概念"}, {"head": "sop", "head_type": "概念", "relation": "被定义为", "tail": "主语，宾语，谓语", "tail_type": "概念"}, {"head": "pso", "head_type": "概念", "relation": "被定义为", "tail": "谓语，主语，宾语", "tail_type": "概念"}, {"head": "ops", "head_type": "概念", "relation": "被定义为", "tail": "宾语，谓语，主语", "tail_type": "概念"}]}
{"text": "不难看出，其中spo表就是原来的三元组表。", "relation": [{"head": "spo表", "head_type": "概念", "relation": "等价", "tail": "原来的三元组表", "tail_type": "概念"}]}
{"text": "使用六重索引方法的典型系统有RDF-3X[28]和Hexastore[29]。", "relation": [{"head": "使用六重索引方法的典型系统", "head_type": "概念", "relation": "包含", "tail": "RDF-3X", "tail_type": "产品"}, {"head": "使用六重索引方法的典型系统", "head_type": "概念", "relation": "包含", "tail": "Hexastore", "tail_type": "产品"}]}
{"text": "具体来说，六重索引方案的优点有：知识图谱查询中的每种三元组模式查询都可以直接使用相应的索引表进行快速的前缀范围查找，表3-3给出了全部8种三元组模式查询能够使用的索引表；可以通过不同索引表之间的连接操作直接加速知识图谱上的连接查询，如图3-12所示的链式SPARQL查询“查找生于1850年的人创立的公司的营业领域”，可以通过spo和pso表的连接快速执行三元组模式“?person_founder_?company”与“?company_industry?ind”的连接操作，避免了单表的自连接。", "relation": [{"head": "六重索引方案", "head_type": "概念", "relation": "包含", "tail": "知识图谱查询中的每种三元组模式查询", "tail_type": "概念"}]}
{"text": "DB2RDFDB2RDF是由IBM研究中心于2013年提出的一种面向实体的RDF知识图谱存储方案[30]，该方案是以往RDF关系存储方案的一种权衡折中，既具备了三元组表、属性表和垂直划分方案的部分优点，又克服了这些方案的部分缺点。", "relation": [{"head": "DB2RDFDB2RDF", "head_type": "产品", "relation": "属于", "tail": "一种面向实体的RDF知识图谱存储方案", "tail_type": "概念"}, {"head": "DB2RDFDB2RDF", "head_type": "产品", "relation": "属于", "tail": "一种权衡折中的方案", "tail_type": "概念"}]}
{"text": "三元组表的优势在于“行维度”上的灵活性，即存储模式不会随行的增加而变化；DB2RDF方案将这种灵活性扩展到“列维度”上，即将表的列作为谓语和宾语的存储位置，而不将列与谓语进行绑定。", "relation": [{"head": "三元组表", "head_type": "概念", "relation": "实现", "tail": "行维度的灵活性", "tail_type": "概念"}]}
{"text": "dph（direct_primary_hash）是存储方案的主表，该表中一行存储一个主语（主语列）及其全部谓语（predi列）和宾语（vali列）,0≤i≤k,k为图着色结果值或某个给定值。", "relation": [{"head": "dph表", "head_type": "概念", "relation": "包含", "tail": "主语", "tail_type": "概念"}, {"head": "dph表", "head_type": "概念", "relation": "包含", "tail": "谓语", "tail_type": "概念"}, {"head": "dph表", "head_type": "概念", "relation": "包含", "tail": "宾语", "tail_type": "概念"}]}
{"text": "spill列是溢出标志，即对于一行能存储下的实体，该行spill列为0，对于溢出的实体，该实体所有行的spill列为1。", "relation": [{"head": "spill列", "head_type": "概念", "relation": "被定义为", "tail": "溢出标志", "tail_type": "概念"}]}
{"text": "实际上，dph表实现了列的共享：一方面，不同实体的相同谓语总是会被分配到相同的列上；另一方面，同一列中可以存储多个不同的谓语。", "relation": [{"head": "dph表", "head_type": "概念", "relation": "实现", "tail": "列的共享", "tail_type": "概念"}]}
{"text": "正是由于DB2RDF方案具备“列共享”机制，才使得在关系表中最大列数目上限的情况下可以存储远超出该上限的谓语数目，也能够有效地解决水平表方案中存在的谓语稀疏性空值问题。", "relation": [{"head": "DB2RDF方案", "head_type": "概念", "relation": "实现", "tail": "列共享机制", "tail_type": "概念"}]}
{"text": "在真实的知识图谱中，不同主语往往具有不同的谓语集合，例如，谓语born只有人才具有，谓语employees只有公司才具有，这也是能够实现列共享的原因所在。", "relation": [{"head": "真实的知识图谱", "head_type": "概念", "relation": "包含", "tail": "不同的谓语集合", "tail_type": "概念"}]}
{"text": "为此，DB2RDF方案提供了rph（reverse_primary_hash）表和rs（reverse_secondary_hash）表，如图3-13所示。", "relation": [{"head": "DB2RDF方案", "head_type": "概念", "relation": "包含", "tail": "rph表", "tail_type": "概念"}, {"head": "DB2RDF方案", "head_type": "概念", "relation": "包含", "tail": "rs表", "tail_type": "概念"}]}
{"text": "谓语到列映射的一种方法是使用一组散列函数，将谓语映射到一组列编号，并将谓语及其宾语存储到这组列中的第一个空列上；在一个主语对应的一行中，如果存储某谓语（及其宾语）时，散列函数计算得出的这组列中的所有列都被之前存储的该主语的谓语占用了，则产生溢出，到下一行存储该谓语。", "relation": [{"head": "谓语到列映射", "head_type": "概念", "relation": "属于", "tail": "使用一组散列函数的方法", "tail_type": "概念"}]}
{"text": "将一个主语上出现的不同谓语称为共现谓语（Co-occurrence_Predicates），目标是让共现谓语着上不同颜色（映射到不同列中），非共现谓语可以着上相同颜色（映射到同一列中）。", "relation": [{"head": "共现谓语", "head_type": "概念", "relation": "英文名", "tail": "Co-occurrence_Predicates", "tail_type": "概念"}]}
{"text": "为此，构建图着色算法的冲突图（Interference_Graph）：图中节点为知识图谱中的所有谓语；每对共现谓语节点之间由一条边相连。", "relation": [{"head": "冲突图", "head_type": "概念", "relation": "源于", "tail": "图着色算法", "tail_type": "概念"}]}
{"text": "图3-15冲突图如果在大规模真实知识图谱（如DBpedia）中，图着色所需颜色数量超过了关系数据表的列数上限m，则根据某种策略（如最频繁使用的前k个谓语）选取一个谓语子集，使得该谓语子集到列的映射满足图着色要求；对于不在该子集中的谓语，再使用前面提到的散列函数组策略进行映射。", "relation": [{"head": "DBpedia", "head_type": "产品", "relation": "属于", "tail": "大规模真实知识图谱", "tail_type": "概念"}]}
{"text": "3.2.2面向RDF的三元组数据库由于RDF是W3C推荐的表示语义网上关联数据（Linked_Data）的标准格式，RDF也是表示和发布Web上知识图谱的最主要数据格式之一。", "relation": [{"head": "RDF", "head_type": "概念", "relation": "被定义为", "tail": "W3C推荐的表示语义网上关联数据的标准格式", "tail_type": "概念"}, {"head": "RDF", "head_type": "概念", "relation": "属于", "tail": "表示和发布Web上知识图谱的最主要数据格式", "tail_type": "概念"}]}
{"text": "面向RDF的三元组数据库是专门为存储大规模RDF数据而开发的知识图谱数据库，其支持RDF的标准查询语言SPARQL。", "relation": [{"head": "面向RDF的三元组数据库", "head_type": "概念", "relation": "属于", "tail": "专门为存储大规模RDF数据而开发的知识图谱数据库", "tail_type": "概念"}]}
{"text": "主要的开源RDF三元组数据库包括：Apache旗下的Jena、Eclipse旗下的RDF4J以及源自学术界的RDF-3X和gStore；主要的商业RDF三元组数据库包括：Virtuoso、AllegroGraph、GraphDB和BlazeGraph。", "relation": [{"head": "主要的开源RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "Apache旗下的Jena", "tail_type": "产品"}, {"head": "主要的开源RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "Eclipse旗下的RDF4J", "tail_type": "产品"}, {"head": "主要的开源RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "源自学术界的RDF-3X", "tail_type": "产品"}, {"head": "主要的开源RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "gStore", "tail_type": "产品"}, {"head": "主要的商业RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "Virtuoso", "tail_type": "产品"}, {"head": "主要的商业RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "AllegroGraph", "tail_type": "产品"}, {"head": "主要的商业RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "GraphDB", "tail_type": "产品"}, {"head": "主要的商业RDF三元组数据库", "head_type": "概念", "relation": "包含", "tail": "BlazeGraph", "tail_type": "产品"}]}
{"text": "1.开源RDF三元组数据库RDF4JRDF4J目前是Eclipse基金会旗下的开源孵化项目，其前身是荷兰软件公司Aduna开发的Sesame框架。", "relation": [{"head": "RDF4J", "head_type": "产品", "relation": "属于", "tail": "Eclipse基金会旗下的开源孵化项目", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "源于", "tail": "荷兰软件公司Aduna开发的Sesame框架", "tail_type": "产品"}]}
{"text": "Sesame框架的历史可以追溯到1999年，当时作为Aduna公司的一个语义Web项目进行开发，后来发展成为语义Web领域一个非常有名的管理和处理RDF的开源Java框架，功能包括RDF数据的解析、存储、推理和查询等。", "relation": [{"head": "Sesame框架", "head_type": "产品", "relation": "属于", "tail": "一个非常有名的管理和处理RDF的开源Java框架", "tail_type": "概念"}, {"head": "Sesame框架功能", "head_type": "概念", "relation": "包含", "tail": "RDF数据的解析", "tail_type": "概念"}, {"head": "Sesame框架功能", "head_type": "概念", "relation": "包含", "tail": "RDF数据的存储", "tail_type": "概念"}, {"head": "Sesame框架功能", "head_type": "概念", "relation": "包含", "tail": "RDF数据的推理", "tail_type": "概念"}, {"head": "Sesame框架功能", "head_type": "概念", "relation": "包含", "tail": "RDF数据的查询", "tail_type": "概念"}]}
{"text": "2016年5月，Sesame框架改名为RDF4J，并迁移为Eclipse开源项目继续开发。", "relation": [{"head": "RDF4J", "head_type": "产品", "relation": "源于", "tail": "Sesame框架", "tail_type": "产品"}]}
{"text": "RDF4J本身提供内存和磁盘两种RDF存储机制，支持全部的SPARQL1.1查询和更新语言，可以使用与访问本地RDF库相同的API访问远程RDF库，支持所有主流RDF数据格式，包括RDF/XML、Turtle、N-Triples、N-Quads、JSON-LD、TriG和TriX。", "relation": [{"head": "RDF4J", "head_type": "产品", "relation": "包含", "tail": "内存存储机制", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "包含", "tail": "磁盘存储机制", "tail_type": "概念"}]}
{"text": "RDF4J框架的重要特点是其模块化的软件架构设计。", "relation": [{"head": "RDF4J框架", "head_type": "产品", "relation": "包含", "tail": "具有模块化的软件架构设计", "tail_type": "概念"}]}
{"text": "（2）Rio代表“RDF_I/O”，即RDF输入/输出，包括各种RDF文件格式的解析器（Parser）和编写器（Writer），解析器负责将RDF文件解析为RDF模型中的三元组语句，编写器负责将三元组语句写为RDF文件。", "relation": [{"head": "Rio", "head_type": "概念", "relation": "等价", "tail": "RDF_I/O", "tail_type": "概念"}, {"head": "Rio", "head_type": "概念", "relation": "包含", "tail": "各种RDF文件格式的解析器（Parser）", "tail_type": "概念"}, {"head": "Rio", "head_type": "概念", "relation": "包含", "tail": "各种RDF文件格式的编写器（Writer）", "tail_type": "概念"}]}
{"text": "（3）Sail_API代表“存储和推理层API”（Storage_And_Inference_Layer_API），是实现RDF存储和推理的底层系统（System）API（即SPI），其作用是将RDF存储和推理功能从底层实现细节中抽象出来，使得底层存储和推理实现模块可以透明地被替换；Sail_API是SAIL底层存储开发者需要实现的API，普通用户无须关心；RDF4J自带了两种SailAPI实现，即基于内存的MemoryStore和基于磁盘的NativeStore。", "relation": [{"head": "Sail_API", "head_type": "概念", "relation": "等价", "tail": "存储和推理层API", "tail_type": "概念"}, {"head": "Sail_API", "head_type": "概念", "relation": "包含", "tail": "实现RDF存储和推理的底层系统API", "tail_type": "概念"}, {"head": "Sail_API", "head_type": "概念", "relation": "属于", "tail": "SAIL底层存储开发者需要实现的API", "tail_type": "概念"}]}
{"text": "（4）存储库API（Repository_API）是用户使用的RDF管理和处理高层API，提供RDF的存储、查询和推理等服务，面向终端用户，简单易用；存储库API的一种实现是基于本地SAIL实现的SailRepository，另一种是基于远程HTTP服务器实现的HttpRepository。", "relation": [{"head": "存储库API", "head_type": "概念", "relation": "属于", "tail": "用户使用的RDF管理和处理高层API", "tail_type": "概念"}, {"head": "存储库API", "head_type": "概念", "relation": "包含", "tail": "RDF的存储服务", "tail_type": "概念"}, {"head": "存储库API", "head_type": "概念", "relation": "包含", "tail": "RDF的查询服务", "tail_type": "概念"}, {"head": "存储库API", "head_type": "概念", "relation": "包含", "tail": "RDF的推理服务", "tail_type": "概念"}, {"head": "存储库API", "head_type": "概念", "relation": "属于", "tail": "基于本地SAIL实现的SailRepository", "tail_type": "概念"}, {"head": "存储库API", "head_type": "概念", "relation": "属于", "tail": "基于远程HTTP服务器实现的HttpRepository", "tail_type": "概念"}]}
{"text": "（5）架构图的顶层是用户开发的应用程序和HTTP服务器，用户应用程序直接调用存储库API;HTTP服务器实现了通过HTTP访问存储库API的Web服务，可通过HttpClient库与HTTP服务器进行远程通信，从而访问远程RDF4J存储库。", "relation": [{"head": "架构图的顶层", "head_type": "概念", "relation": "依靠", "tail": "用户开发的应用程序", "tail_type": "概念"}, {"head": "架构图的顶层", "head_type": "概念", "relation": "依靠", "tail": "HTTP服务器", "tail_type": "概念"}]}
{"text": "图3-17使用RDF4J工作台执行SPARQL查询2.开源RDF三元组数据库RDF-3XRDF-3X是由德国马克斯·普朗克计算机科学研究所研发的RDF三元组数据库系统，其最初成果发表于2008年的数据库国际会议VLDB[28]，后经功能扩展和完善，最新版本是GH-RDF3X，源代码可以从GitHub上下载。", "relation": [{"head": "RDF-3X", "head_type": "产品", "relation": "属于", "tail": "开源RDF三元组数据库", "tail_type": "概念"}, {"head": "RDF-3X", "head_type": "产品", "relation": "属于", "tail": "由德国马克斯·普朗克计算机科学研究所研发的RDF三元组数据库系统", "tail_type": "概念"}]}
{"text": "在逻辑存储上，虽然以简单的三元组表为基础，但首次提出全索引方案：建立6种三元组索引spo、sop、osp、ops、pso和pos；建立6种二元聚合索引sp、ps、so、os、po和op；建立3种一元聚合索引s、p、o。", "relation": [{"head": "全索引方案", "head_type": "概念", "relation": "实现", "tail": "6种三元组索引spo、sop、osp、ops、pso和pos", "tail_type": "概念"}, {"head": "全索引方案", "head_type": "概念", "relation": "实现", "tail": "6种二元聚合索引sp、ps、so、os、po和op", "tail_type": "概念"}, {"head": "全索引方案", "head_type": "概念", "relation": "实现", "tail": "3种一元聚合索引s、p、o", "tail_type": "概念"}]}
{"text": "图3-18使用spo索引进行三元组模式查找RDF-3X的查询处理器首先对SPARQL查询进行转化，生成若干查询执行计划；对于仅包含一个三元组模式的查询，可以通过一次相应索引查找操作完成；对于由多个三元组模式组成的查询，需要对多个连接的顺序进行优化。", "relation": [{"head": "RDF-3X的查询处理器", "head_type": "概念", "relation": "依靠", "tail": "spo索引", "tail_type": "概念"}, {"head": "查询", "head_type": "概念", "relation": "包含", "tail": "一个三元组模式", "tail_type": "概念"}]}
{"text": "RDF-3X采用的是一种自底向上的动态规划优化算法，其优化过程充分考虑了SPARQL查询的特点，并且最大限度地保持了有利于用全索引方案进行归并连接的连接顺序。", "relation": [{"head": "RDF-3X", "head_type": "产品", "relation": "依靠", "tail": "动态规划优化算法", "tail_type": "概念"}]}
{"text": "同时，RDF-3X还开发了基于代价模型的选择度评估（SelectivityEstimates）机制，采用选择度直方图和频繁连接路径相结合的方法进行查询执行计划的选择度评估。", "relation": [{"head": "RDF-3X", "head_type": "产品", "relation": "研究", "tail": "基于代价模型的选择度评估机制", "tail_type": "概念"}, {"head": "选择度评估机制", "head_type": "概念", "relation": "依靠", "tail": "选择度直方图和频繁连接路径相结合的方法", "tail_type": "概念"}]}
{"text": "RDF-3X是命令行程序，使用RDF-3X装载RDF文件music_1000_triples.nt的命令如图3-19所示，其中的rdf3xload是命令名称，testds是数据库名称；进行SPARQL查询的命令如图3-20所示，rdf3query是命令名称，sparql.rq是SPARQL查询文件名称。", "relation": [{"head": "RDF-3X", "head_type": "产品", "relation": "属于", "tail": "命令行程序", "tail_type": "概念"}]}
{"text": "由于Franz公司有着深厚的人工智能背景，早期一直开发Common_Lisp和Prolog语言的实现工具，这使得AllegroGraph对语义推理功能具有较为完善的支持。", "relation": [{"head": "Franz公司", "head_type": "产品", "relation": "研究", "tail": "Common_Lisp和Prolog语言的实现工具", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "包含", "tail": "较为完善的语义推理功能", "tail_type": "概念"}]}
{"text": "AllegroGraph除了三元组数据库的基本功能外，还支持动态物化的RDFS++推理机、OWL2_RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析库、可视化RDF图浏览器等。", "relation": [{"head": "AllegroGraph的功能", "head_type": "产品", "relation": "包含", "tail": "动态物化的RDFS++推理机", "tail_type": "概念"}, {"head": "AllegroGraph的功能", "head_type": "产品", "relation": "包含", "tail": "OWL2_RL推理机", "tail_type": "概念"}, {"head": "AllegroGraph的功能", "head_type": "产品", "relation": "包含", "tail": "Prolog规则推理系统", "tail_type": "概念"}, {"head": "AllegroGraph的功能", "head_type": "产品", "relation": "包含", "tail": "时空推理机制", "tail_type": "概念"}, {"head": "AllegroGraph的功能", "head_type": "产品", "relation": "包含", "tail": "社会网络分析库", "tail_type": "概念"}, {"head": "AllegroGraph的功能", "head_type": "产品", "relation": "包含", "tail": "可视化RDF图浏览器", "tail_type": "概念"}]}
{"text": "6.商业RDF三元组数据库GraphDBGraphDB是RDF三元组数据库，其前身OWLIM一直是支持W3C语义Web标准的主流产品。", "relation": [{"head": "GraphDB", "head_type": "产品", "relation": "属于", "tail": "商业RDF三元组数据库", "tail_type": "概念"}, {"head": "OWLIM", "head_type": "产品", "relation": "源于", "tail": "GraphDB", "tail_type": "产品"}]}
{"text": "GraphDB目前有社区免费版、标准版和企业版，其中企业版支持多台机器的集群分布式部署。", "relation": [{"head": "GraphDB", "head_type": "产品", "relation": "包含", "tail": "社区免费版", "tail_type": "产品"}, {"head": "GraphDB", "head_type": "产品", "relation": "包含", "tail": "标准版", "tail_type": "产品"}, {"head": "GraphDB", "head_type": "产品", "relation": "包含", "tail": "企业版", "tail_type": "产品"}]}
{"text": "图3-26GraphDB的高层架构对于GraphDB的各部分组件自顶向下进行介绍：（1）Workbench是GraphDB的Web管理工具；（2）Engine是查询处理和推理引擎，由查询优化器（Query_Optimiser）、推理机（Reasoner）、存储层（Storage）和插件管理器（Plugin_Manager）组成；●查询优化器能够在多种查询执行计划中挑选出较高效的一种，查询经过解析后会交由查询优化器进行优化；●推理机执行基于RDF规则的前向链推理，由显式三元组推导出全部导出三元组，导出三元组会随显式三元组的更新而同步更新；●存储层使用pos和pso两种三元组索引、psco和pocs两种带有上下文信息的四元组索引以及字面值（Literal）索引存储RDF数据；实体池（Entity_Pool）是GraphDB存储层的核心部件，起到将RDF实体（URI、空节点和字面值）映射到内部整数ID的字典编码器的作用，同时还实现了对事务管理的支持机制。", "relation": [{"head": "Engine", "head_type": "产品", "relation": "属于", "tail": "查询处理和推理引擎", "tail_type": "概念"}, {"head": "Engine", "head_type": "产品", "relation": "包含", "tail": "查询优化器", "tail_type": "概念"}, {"head": "Engine", "head_type": "产品", "relation": "包含", "tail": "推理机", "tail_type": "概念"}, {"head": "Engine", "head_type": "产品", "relation": "包含", "tail": "存储层", "tail_type": "概念"}, {"head": "Engine", "head_type": "产品", "relation": "包含", "tail": "插件管理", "tail_type": "概念"}, {"head": "查询优化器", "head_type": "概念", "relation": "实现", "tail": "在多种查询执行计划中挑选出较高效的一种"}, {"head": "推理机", "head_type": "概念", "relation": "实现", "tail": "基于RDF规则的前向链推理", "tail_type": "概念"}, {"head": "存储层", "head_type": "概念", "relation": "实现", "tail": "pos和pso两种三元组索引", "tail_type": "概念"}, {"head": "存储层", "head_type": "概念", "relation": "实现", "tail": "psco和pocs两种带有上下文信息的四元组索引", "tail_type": "概念"}, {"head": "实体池", "head_type": "概念", "relation": "属于", "tail": "GraphDB存储层的核心部件", "tail_type": "概念"}, {"head": "GraphDB存储层的核心部件", "head_type": "概念", "relation": "实现", "tail": "对事务管理的支持机制", "tail_type": "概念"}]}
{"text": "（3）Connectors是GraphDB连接外部工具的桥梁，包括用于建立快速关键字查找功能的Lucene和用于建立搜索引擎的Solr和Elasticsearch。", "relation": [{"head": "Connectors", "head_type": "产品", "relation": "属于", "tail": "GraphDB连接外部工具的桥梁", "tail_type": "概念"}, {"head": "Connectors", "head_type": "产品", "relation": "包含", "tail": "用于建立快速关键字查找功能的Lucene", "tail_type": "产品"}, {"head": "Connectors", "head_type": "产品", "relation": "包含", "tail": "用于建立搜索引擎的Solr和Elasticsearch", "tail_type": "产品"}]}
{"text": "（4）插件管理器在Engine内起到插件管理作用，既包括GraphDB内部实现的插件，也包括各种外部工具连接器。", "relation": [{"head": "插件管理器", "head_type": "概念", "relation": "包含", "tail": "GraphDB内部实现的插件", "tail_type": "概念"}, {"head": "插件管理器", "head_type": "概念", "relation": "包括", "tail": "各种外部工具连接器", "tail_type": "概念"}]}
{"text": "既可以将Blazegraph作为War包部署为Web程序，也可以将其配置为单机或分布式数据库服务器。", "relation": [{"head": "Blazegraph", "head_type": "产品", "relation": "等价", "tail": "War包部署为Web程序", "tail_type": "概念"}, {"head": "Blazegraph", "head_type": "产品", "relation": "等价", "tail": "单机数据库服务器", "tail_type": "概念"}, {"head": "Blazegraph", "head_type": "产品", "relation": "等价", "tail": "分布式数据库服务器", "tail_type": "概念"}]}
{"text": "图3-27Blazegraph的Web用户界面8.商业RDF三元组数据库StardogStardog是由美国Stardog_Union公司开发的RDF三元组数据库，其首个公开发布版本是2012年2月发布的Stardog0.9。", "relation": [{"head": "Stardog", "head_type": "产品", "relation": "属于", "tail": "商业RDF三元组数据库", "tail_type": "概念"}]}
{"text": "虽然Stardog发布较晚，但其对OWL2推理机制具有良好的支持，同时具备全文搜索、GraphQL查询、路径查询、融合机器学习任务等功能，能够支持多种不同编程语言和Web访问接口，使得Stardog成为一个知识图谱数据存储和查询平台。", "relation": [{"head": "Stardog", "head_type": "产品", "relation": "实现", "tail": "全文搜索功能", "tail_type": "概念"}, {"head": "Stardog", "head_type": "产品", "relation": "实现", "tail": "GraphQL查询功能", "tail_type": "概念"}, {"head": "Stardog", "head_type": "产品", "relation": "实现", "tail": "路径查询功能", "tail_type": "概念"}, {"head": "Stardog", "head_type": "产品", "relation": "实现", "tail": "融合机器学习任务功能", "tail_type": "概念"}]}
{"text": "图3-29使用Stardog_Studio执行SPARQL查询3.2.3原生图数据库1.最流行的图数据库Neo4jNeo4j的1.0版本发布于2010年。", "relation": [{"head": "Neo4j", "head_type": "产品", "relation": "属于", "tail": "最流行的图数据库", "tail_type": "概念"}]}
{"text": "Neo4j基于属性图模型，其存储管理层为属性图结构中的节点、节点属性、边、边属性等设计了专门的存储方案。", "relation": [{"head": "Neo4j", "head_type": "产品", "relation": "源于", "tail": "属性图模型", "tail_type": "概念"}]}
{"text": "同时，Neo4j还具备OLTP数据库必需的ACID事务处理功能。", "relation": [{"head": "Neo4j", "head_type": "产品", "relation": "实现", "tail": "OLTP数据库必需的ACID事务处理功能", "tail_type": "概念"}]}
{"text": "Neo4j浏览器是功能完善的Neo4j可视化交互式客户端工具，可以用于执行Cypher语言。", "relation": [{"head": "Neo4j浏览器", "head_type": "产品", "relation": "属于", "tail": "功能完善的Neo4j可视化交互式客户端工具", "tail_type": "概念"}]}
{"text": "同时，JanusGraph也是OLTP图数据库，其支持多用户并发访问和实时图遍历查询。", "relation": [{"head": "JanusGraph", "head_type": "产品", "relation": "属于", "tail": "OLTP图数据库", "tail_type": "概念"}, {"head": "OLTP图数据库", "head_type": "概念", "relation": "实现", "tail": "多用户并发访问和实时图遍历查询", "tail_type": "概念"}]}
{"text": "另一方面，JanusGraph还具备基于Hadoop_MapReduce的图分析引擎，其可以将Gremlin导航查询自动转化为MapReduce任务。", "relation": [{"head": "JanusGraph", "head_type": "概念", "relation": "包含", "tail": "基于Hadoop_MapReduce的图分析引擎", "tail_type": "概念"}]}
{"text": "从数据管理角度来看，OrientDB是一个功能上相对全面的数据库管理系统，除对图数据基本的存储和查询外，还支持完整的事务处理ACID特性、基于多主机复制模式（Multi-Master_Replication）的分布式部署、对于多种操作系统的支持（由于使用Java开发）和数据库安全性支持等。", "relation": [{"head": "OrientDB", "head_type": "产品", "relation": "属于", "tail": "一个功能上相对全面的数据库管理系统", "tail_type": "概念"}, {"head": "数据库管理系统", "head_type": "概念", "relation": "实现", "tail": "完整的事务处理ACID特性", "tail_type": "概念"}, {"head": "数据库管理系统", "head_type": "概念", "relation": "实现", "tail": "基于多主机复制模式的分布式部署", "tail_type": "概念"}]}
{"text": "官方测评显示，关系数据库Oracle_12c配上空间和图数据扩展组件（Spatial_and_Graph）可以管理的三元组数量高达1.08万亿条[34]！当然，这样的性能效果是在Oracle专用硬件上获得的，所需软硬件成本投入很大。", "relation": [{"head": "关系数据库Oracle_12c", "head_type": "产品", "relation": "包含", "tail": "空间和图数据扩展组件（Spatial_and_Graph）", "tail_type": "概念"}]}
{"text": "如果需要管理几亿到十几亿以上大规模的RDF三元组，则可尝试部署具备分布式存储与查询能力的数据库系统（如商业版的GraphDB和BlazeGraph、开源的JanusGraph等）。", "relation": [{"head": "数据库系统", "head_type": "概念", "relation": "实现", "tail": "分布式存储与查询能力", "tail_type": "概念"}]}
{"text": "虽然不同图数据库的具体存储方案各有差异，但一般认为具有“无索引邻接”特性（Index-FreeAdjacency）的图数据库才称为原生图数据库[35]。", "relation": [{"head": "原生图数据库", "head_type": "概念", "relation": "实现", "tail": "无索引邻接特性（Index-FreeAdjacency）", "tail_type": "概念"}]}
{"text": "在实现了“无索引邻接”的图数据库中，每个节点维护着指向其邻接节点的直接引用，这相当于每个节点都可看作是其邻接节点的一个“局部索引”，用其查找邻接节点比使用“全局索引”更能节省时间。", "relation": [{"head": "每个节点", "head_type": "概念", "relation": "等价", "tail": "其邻接节点的一个局部索引", "tail_type": "概念"}]}
{"text": "需要注意的是，每个边记录实际上维护着两个双向链表，一个是起始节点上的边，一个是终止节点上的边，可以将边记录想象为被起始节点和终止节点共同拥有，双向链表的优势在于不仅可在查找节点上的边时进行双向扫描，而且支持在两个节点间高效率地添加和删除边。", "relation": [{"head": "双向链表", "head_type": "概念", "relation": "实现", "tail": "在两个节点间高效率地添加和删除边", "tail_type": "概念"}]}
{"text": "3.3.2知识图谱数据库的索引图数据上的索引一种是对节点或边上属性数据的索引，一种是对图结构的索引；前者可应用关系数据库中已有的B+树索引技术直接实现，而后者仍是业界没有达成共识的、开放的研究问题。", "relation": [{"head": "知识图谱数据库", "head_type": "概念", "relation": "实现", "tail": "图数据上的索引", "tail_type": "概念"}, {"head": "索引", "head_type": "概念", "relation": "依靠", "tail": "关系数据库中已有的B+树索引技术", "tail_type": "概念"}]}
{"text": "2.图结构索引图结构索引是为图数据中的点边结构信息建立索引的方法。", "relation": [{"head": "图结构索引", "head_type": "概念", "relation": "属于", "tail": "为图数据中的点边结构信息建立索引的方法", "tail_type": "概念"}]}
{"text": "大体上，图结构索引分为“基于路径的”和“基于子图的”两种。", "relation": [{"head": "图结构索引", "head_type": "概念", "relation": "包含", "tail": "“基于路径的”", "tail_type": "概念"}, {"head": "图结构索引", "head_type": "概念", "relation": "包含", "tail": "“基于子图的“", "tail_type": "概念"}]}
{"text": "（1）基于路径的图索引。", "relation": [{"head": "基于路径的图索引", "head_type": "概念", "relation": "属于", "tail": "一种典型的基于路径的图索引叫作GraphGrep", "tail_type": "概念"}]}
{"text": "一种典型的基于路径的图索引叫作GraphGrep[36]。", "relation": [{"head": "一种典型的基于路径的图索引", "head_type": "概念", "relation": "英文名", "tail": "GraphGrep", "tail_type": "概念"}]}
{"text": "一种叫作gIndex[37]的索引方法，首先利用数据挖掘方法，在图数据中发现出现次数超过一定阈值的频繁子图，再将去掉冗余之后的频繁子图作为关键字建立子图索引。", "relation": [{"head": "gIndex", "head_type": "产品", "relation": "属于", "tail": "一种索引方法", "tail_type": "概念"}]}
{"text": "3.4开源工具实践3.4.1三元组数据库Apache_Jena1.开源工具简介Apache_Jena是Apache顶级项目，其前身为惠普实验室开发的Jena工具包。", "relation": [{"head": "Apache_Jena", "head_type": "产品", "relation": "属于", "tail": "三元组数据库", "tail_type": "概念"}, {"head": "Apache_Jena", "head_type": "产品", "relation": "属于", "tail": "Apache顶级项目", "tail_type": "概念"}, {"head": "Jena工具包", "head_type": "产品", "relation": "源于", "tail": "Apache_Jena", "tail_type": "产品"}]}
{"text": "Jena是语义Web领域主要的开源框架和RDF三元组库，较好地遵循W3C标准，其功能包括：RDF数据管理、RDFS和OWL本体管理、SPARQL查询处理等。", "relation": [{"head": "Jena", "head_type": "产品", "relation": "属于", "tail": "语义Web领域主要的开源框架和RDF三元组库", "tail_type": "概念"}, {"head": "Jena", "head_type": "产品", "relation": "实现", "tail": "RDF数据管理功能", "tail_type": "概念"}, {"head": "Jena", "head_type": "产品", "relation": "实现", "tail": "RDFS和OWL本体管理功能", "tail_type": "概念"}, {"head": "Jena", "head_type": "产品", "relation": "实现", "tail": "SPARQL查询处理功能", "tail_type": "概念"}]}
{"text": "Jena具备一套原生存储引擎，可对RDF三元组进行基于磁盘或内存的存储管理；同时具有一套基于规则的推理引擎，用于执行RDFS和OWL本体推理任务。", "relation": [{"head": "Jena", "head_type": "产品", "relation": "包含", "tail": "一套原生存储引擎", "tail_type": "概念"}, {"head": "原生存储引擎", "head_type": "概念", "relation": "实现", "tail": "RDF三元组进行基于磁盘或内存的存储管理", "tail_type": "概念"}, {"head": "Jena", "head_type": "产品", "relation": "包含", "tail": "一套基于规则的推理引擎", "tail_type": "概念"}, {"head": "推理引擎", "head_type": "概念", "relation": "实现", "tail": "RDFS和OWL本体推理任务", "tail_type": "概念"}]}
{"text": "Jena对外界应用程序的API包括实现基本三元组管理功能的RDFAPI、实现RDFS和OWL本体推理功能的本体API和实现查询处理功能的SPARQL_API。", "relation": [{"head": "Jena对外界应用程序的API", "head_type": "概念", "relation": "包括", "tail": "实现基本三元组管理功能的RDF_API"}, {"head": "Jena对外界应用程序的API", "relation": "包含", "tail": "实现RDFS和OWL本体推理功能的本体API", "tail_type": "概念"}, {"head": "Jena对外界应用程序的API", "head_type": "概念", "relation": "包含", "tail": "实现查询处理功能的SPARQL_API", "tail_type": "概念"}]}
{"text": "Jena还提供了支持各种RDF三元组格式的解析器和编写器，支持的三元组格式包括：RDF/XML、Turtle、N-Triple和RDFa。", "relation": [{"head": "Jena", "head_type": "产品", "relation": "包含", "tail": "支持各种RDF三元组格式的解析器和编写器", "tail_type": "概念"}, {"head": "支持的三元组格式", "head_type": "概念", "relation": "包含", "tail": "RDF/XML", "tail_type": "概念"}, {"head": "支持的三元组格式", "head_type": "概念", "relation": "包含", "tail": "Turtle", "tail_type": "概念"}, {"head": "支持的三元组格式", "head_type": "概念", "relation": "包含", "tail": "N-Triple", "tail_type": "概念"}, {"head": "支持的三元组格式", "head_type": "概念", "relation": "包含", "tail": "RDFa", "tail_type": "概念"}]}
{"text": "图3-42Apache_Jena框架实质上，Jena是一个Java框架类库。", "relation": [{"head": "Jena", "head_type": "产品", "relation": "属于", "tail": "一个Java框架类库", "tail_type": "概念"}]}
{"text": "Jena为了用户使用方便，提供了一个名为Fuseki的独立RDF数据库Web应用程序。", "relation": [{"head": "Jena", "head_type": "产品", "relation": "包含", "tail": "一个名为Fuseki的独立RDF数据库Web应用程序", "tail_type": "产品"}]}
{"text": "Fuseki是基于Jena的SPARQL服务器，可以作为独立的服务由命令行启动，也可以作为操作系统服务或Java_Web应用程序。", "relation": [{"head": "Fuseki", "head_type": "产品", "relation": "属于", "tail": "基于Jena的SPARQL服务器", "tail_type": "产品"}]}
{"text": "Fuseki底层存储基于TDB，具有SPARQL查询处理的Web用户界面，同时提供服务器监控和管理功能界面。", "relation": [{"head": "Fuseki底层存储", "head_type": "概念", "relation": "依靠", "tail": "TDB", "tail_type": "概念"}, {"head": "Fuseki", "head_type": "产品", "relation": "包含", "tail": "SPARQL查询处理的Web用户界面", "tail_type": "概念"}, {"head": "Fuseki", "head_type": "产品", "relation": "包含", "tail": "服务器监控界面", "tail_type": "概念"}, {"head": "Fuseki", "head_type": "产品", "relation": "包含", "tail": "管理功能界面", "tail_type": "概念"}]}
{"text": "3.其他类似工具RDF4J是Eclipse基金会旗下的开源孵化项目，其前身是荷兰软件公司Aduna开发的Sesame框架，其功能包括：RDF数据的解析、存储、推理和查询等。", "relation": [{"head": "RDF4J", "head_type": "产品", "relation": "属于", "tail": "Eclipse基金会旗下的开源孵化项目", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "实现", "tail": "RDF数据的解析功能", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "实现", "tail": "RDF数据的存储功能", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "实现", "tail": "RDF数据的推理功能", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "实现", "tail": "RDF数据的查询功能", "tail_type": "概念"}]}
{"text": "RDF4J提供内存和磁盘两种RDF存储机制，支持SPARQL1.1查询和更新语言。", "relation": [{"head": "RDF4J", "head_type": "产品", "relation": "实现", "tail": "内存RDF存储机制", "tail_type": "概念"}, {"head": "RDF4J", "head_type": "产品", "relation": "实现", "tail": "磁盘RDF存储机制", "tail_type": "概念"}]}
{"text": "gStore是由北京大学开发的基于图的RDF三元组数据库。", "relation": [{"head": "gStore", "head_type": "产品", "relation": "属于", "tail": "北京大学开发的基于图的RDF三元组数据库", "tail_type": "概念"}]}
{"text": "AllegroGraph是Franz公司开发的RDF三元组数据库。", "relation": [{"head": "AllegroGraph", "head_type": "产品", "relation": "属于", "tail": "Franz公司开发的RDF三元组数据库", "tail_type": "概念"}]}
{"text": "除了三元组数据库的基本功能，AllegroGraph_RDFS++推理机、OWL2_RL推理机、Prolog规则推理系统、时空推理机制、社会网络分析还支持动态物化的库、可视化RDF图浏览器等。", "relation": [{"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "RDFS++推理机", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "OWL2_RL推理机", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "Prolog规则推理系统", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "时空推理机制", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "社会网络分析", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "动态物化的库", "tail_type": "概念"}, {"head": "AllegroGraph", "head_type": "产品", "relation": "实现", "tail": "可视化RDF图浏览器", "tail_type": "概念"}]}
{"text": "GraphDB是由Ontotext软件公司开发的RDF三元组数据库。", "relation": [{"head": "GraphDB", "head_type": "产品", "relation": "属于", "tail": "Ontotext软件公司开发的RDF三元组数据库", "tail_type": "概念"}]}
{"text": "3.4.2面向RDF的三元组数据库gStore1.开源工具简介gStore是由北京大学计算机科学技术研究所数据管理实验室自2011年开始研发的面向RDF知识图谱的开源图数据库系统，遵循Apache开源协议。", "relation": [{"head": "gStore", "head_type": "产品", "relation": "属于", "tail": "北京大学计算机科学技术研究所数据管理实验室自2011年开始研发的面向RDF知识图谱的开源图数据库系统", "tail_type": "概念"}]}
{"text": "不同于传统基于关系数据库的RDF数据管理方法，gStore原生基于图数据模型，在存储RDF数据时维持并根据其图结构构建了基于二进制位图索引的新型索引结构——VS树。", "relation": [{"head": "gStore", "head_type": "产品", "relation": "依靠", "tail": "图数据模型", "tail_type": "概念"}]}
