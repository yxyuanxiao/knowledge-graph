{"text": "第2章知识图谱表示与建模漆桂林东南大学，潘志霖阿伯丁大学，陈华钧浙江大学知识图谱表示（Knowledge_Graph_Representation）指的是用什么语言对知识图谱进行建模，从而可以方便知识计算。","relation": [{"head": "知识图谱表示", "head_type": "概念", "relation": "被定义为", "tail": "用什么语言对知识图谱进行建模", "tail_type": "概念"}]}
{"text": "从图的角度来看，知识图谱是一个语义网络，即一种用互联的节点和弧表示知识的一个结构[1]。","relation": [{"head": "知识图谱", "head_type": "概念", "relation": "属于", "tail": "语义网络", "tail_type": "概念"}, {"head": "语义网络", "head_type": "概念", "relation": "实现", "tail": "知识的一个结构", "tail_type": "概念"}]}
{"text": "语义网络中的节点可以代表一个概念（concept）、一个属性（attribute）、一个事件（event）或者一个实体（entity）；而弧表示节点之间的关系，弧的标签指明了关系的类型。","relation": [{"head": "节点", "head_type": "概念", "relation": "被定义为", "tail": "概念（concept）", "tail_type": "概念"}, {"head": "节点", "head_type": "概念", "relation": "被定义为", "tail": "属性（attribute）", "tail_type": "概念"}, {"head": "节点", "head_type": "概念", "relation": "被定义为", "tail": "事件（event）", "tail_type": "概念"}, {"head": "节点", "head_type": "概念", "relation": "被定义为", "tail": "实体（entity）", "tail_type": "概念"}, {"head": "弧", "head_type": "概念", "relation": "被定义为", "tail": "节点之间的关系", "tail_type": "概念"}, {"head": "弧的标签", "head_type": "概念", "relation": "被定义为", "tail": "关系的类型", "tail_type": "概念"}]}
{"text": "语义网络中的语义主要体现在图中边的含义。","relation": [{"head": "语义网络中的语义", "head_type": "概念", "relation": "源于", "tail": "图中边的含义", "tail_type": "概念"}]}
{ "text": "为了给这些边赋予语义，研究人员提出了术语语言（Terminological_Language），并最终提出了描述逻辑（Description_Logic），描述逻辑是一阶谓词逻辑的一个子集，推理复杂度是可判定的。","relation": [{"head": "描述逻辑", "head_type": "概念", "relation": "属于", "tail": "一阶谓词逻辑的一个子集", "tail_type": "概念"}]}
{ "text": "W3C采用了以描述逻辑为逻辑基础的本体语言OWL作为定义Web术语的标准语言。","relation": [{"head": "本体语言OWL", "head_type": "概念", "relation": "属于", "tail": "定义Web术语的标准语言", "tail_type": "概念"}]}
{"text": "目前基于向量的知识表示开始流行，这类表示将知识图谱三元组中的主谓宾表示成数值向量，通过向量的知识表示，可以采用统计或者神经网络的方法进行推理，对知识图谱中的实体之间的关系进行预测。","relation": [{"head": "向量的知识表示的推理", "head_type": "概念", "relation": "依靠", "tail": "统计或者神经网络的方法", "tail_type": "概念"}]}
{"text": "2.1什么是知识表示20世纪90年代，MIT_AI实验室的R.Davis定义了知识表示的五大用途或特点：●客观事物的机器标示（A_KR_is_a_Surrogate），即知识表示首先需要定义客观实体的机器指代或指称。","relation": [{"head": "知识表示的五大用途或特点", "head_type": "概念", "relation": "包含", "tail": "客观事物的机器标示", "tail_type": "概念"}]}
{"text": "●一组本体约定和概念模型（A_KR_is_a_Set_of_Ontological_Commitments），即知识表示还需要定义用于描述客观事物的概念和类别体系。","relation": [{"head": "知识表示的五大用途或特点", "head_type": "概念", "relation": "包含", "tail": "一组本体约定和概念模型", "tail_type": "概念"}]}
{"text": "●支持推理的表示基础（A_KR_is_a_Theory_of_Intelligent_Reasoning），即知识表示还需要提供机器推理的模型与方法。","relation": [{"head": "知识表示的五大用途或特点", "head_type": "概念", "relation": "包含", "tail": "支持推理的表示基础", "tail_type": "概念"}]}
{"text": "●用于高效计算的数据结构（A_KR_is_a_medium_for_Efficient_Computation），即知识表示也是一种用于高效计算的数据结构。","relation": [{"head": "知识表示的五大用途或特点", "head_type": "概念", "relation": "包含", "tail": "用于高效计算的数据结构", "tail_type": "概念"}]}
{"text": "●人可理解的机器语言（A_KR_is_a_Medium_of_Human_Expression），即知识表示还必须接近于人的认知，是人可理解的机器语言。","relation": [{"head": "知识表示的五大用途或特点", "head_type": "概念", "relation": "包含", "tail": "人可理解的机器语言", "tail_type": "概念"}]}
{"text": "典型的语义网络如WordNet属于词典类的知识库，主要定义名词、动词、形容词和副词之间的语义关系。","relation": [{"head": "WordNet", "head_type": "产品", "relation": "属于", "tail": "词典类的知识库", "tail_type": "概念"}, {"head": "WordNet", "head_type": "产品", "relation": "实现", "tail": "名词、动词、形容词和副词之间的语义关系", "tail_type": "概念"}]}
{"text": "传统的专家系统通常包含知识库和推理引擎（InferenceEngine）两个核心模块。","relation": [{"head": "传统的专家系统", "head_type": "概念", "relation": "包含", "tail": "知识库核心模块", "tail_type": "概念"}, {"head": "传统的专家系统", "head_type": "概念", "relation": "包含", "tail": "推理引擎核心模块", "tail_type": "概念"}]}
{"text": "描述逻辑是目前大多数本体语言（如OWL）的理论基础。","relation": [{"head": "描述逻辑", "head_type": "概念", "relation": "属于", "tail": "目前大多数本体语言（如OWL）的理论基础", "tail_type": "概念"}]}
{"text": "描述逻辑主要用于刻画概念（Concepts）、属性（Roles）、个体（Individual）、关系（Relationships）、元语（Axioms，即逻辑描述Logic_Statement）等知识表达要素。","relation": [{"head": "知识表达要素", "head_type": "概念", "relation": "包含", "tail": "概念（Concepts）", "tail_type": "概念"}, {"head": "知识表达要素", "head_type": "概念", "relation": "包含", "tail": "属性（Roles）", "tail_type": "概念"}, {"head": "知识表达要素", "head_type": "概念", "relation": "包含", "tail": "个体（Individual）", "tail_type": "概念"}, {"head": "知识表达要素", "head_type": "概念", "relation": "包含", "tail": "关系（Relationships）", "tail_type": "概念"}, {"head": "知识表达要素", "head_type": "概念", "relation": "包含", "tail": "元语（Axioms，即逻辑描述Logic_Statement）", "tail_type": "概念"}, {"head": "描述逻辑", "head_type": "概念", "relation": "实现", "tail": "刻画知识表达要素", "tail_type": "概念"}]}
{"text": "与传统专家系统的知识表示语言不同，描述逻辑家族更关心知识表示能力和推理计算复杂性之间的关系，并深入研究了各种表达构件的组合带来的查询、分类、一致性检测等推理计算的计算复杂度问题。","relation": [{"head": "描述逻辑家族", "head_type": "概念", "relation": "研究", "tail": "知识表示能力和推理计算复杂性之间的关系", "tail_type": "概念"}, {"head": "描述逻辑家族", "head_type": "概念", "relation": "研究", "tail": "各种表达构件的组合带来的查询、分类、一致性检测等推理计算的计算复杂度问题", "tail_type": "概念"}]}
{"text": "语义网的基础数据模型RDF受到了元数据模型、框架系统和面向对象语言等多方面的影响，其最初是为人们在Web上发布结构化数据提供一个标准的数据描述框架。","relation": [{"head": "语义网的基础数据模型RDF", "head_type": "概念", "relation": "属于", "tail": "为人们在Web上发布结构化数据提供一个标准的数据描述框架", "tail_type": "概念"}]}
{"text": "无论是早期专家系统时代的知识表示方法，还是语义网时代的知识表示模型，都属于以符号逻辑为基础的知识表示方法。", "relation": [{"head": "早期专家系统时代的知识表示方法", "head_type": "概念", "relation": "属于", "tail": "以符号逻辑为基础的知识表示方法", "tail_type": "概念"}, {"head": "语义网时代的知识表示模型", "head_type": "概念", "relation": "属于", "tail": "以符号逻辑为基础的知识表示方法", "tail_type": "概念"}]}
{"text": "符号知识表示的特点是易于刻画显式、离散的知识，因而具有内生的可解释性。", "relation": [{"head": "符号知识表示的特点", "head_type": "概念", "relation": "包含", "tail": "内生的可解释性", "tail_type": "概念"}, {"head": "符号知识表示的特点", "head_type": "概念", "relation": "包含", "tail": "易于刻画显式、离散的知识", "tail_type": "概念"}]}
{"text": "但由于人类知识还包含大量不易于符号化的隐性知识，完全基于符号逻辑的知识表示通常由于知识的不完备而失去鲁棒性，特别是推理很难达到实用。", "relation": [{"head": "人类知识", "head_type": "概念", "relation": "包含", "tail": "不易于符号化的隐性知识", "tail_type": "概念"}]}
{"text": "这种基于连续向量的知识表示可以实现通过数值运算来发现新事实和新关系，并能更有效发现更多的隐式知识和潜在假设，这些隐式知识通常是人的主观不易于观察和总结出来的。", "relation": [{"head": "基于连续向量的知识表示", "head_type": "概念", "relation": "研究", "tail": "新事实和新关系", "tail_type": "概念"}]}
{"text": "一方面，现代知识图谱受到规模化扩展的影响，通常采用以三元组为基础的较为简单实用的知识表示方法，并弱化了对强逻辑表示的要求；另一方面，由于知识图谱是很多搜索、问答和大数据分析系统的重要数据基础，基于向量的知识图谱表示使得这些数据更易于和深度学习模型集成，使得基于向量的知识图谱表示越来越受到重视。", "relation": [{"head": "现代知识图谱", "head_type": "概念", "relation": "依靠", "tail": "以三元组为基础的知识表示方法", "tail_type": "概念"}, {"head": "知识图谱", "head_type": "概念", "relation": "属于", "tail": "搜索、问答和大数据分析系统的重要数据基础", "tail_type": "概念"}]}
{"text": "人类智能往往依赖有意或无意运用已知的知识。", "relation": [{"head": "人类智能", "head_type": "概念", "relation": "依靠", "tail": "已知的知识", "tail_type": "概念"}]}
{"text": "2.2.1一阶谓词逻辑一阶谓词逻辑（或简称一阶逻辑）（First_Order_Logic）是公理系统的标准形式逻辑。", "relation": [{"head": "一阶谓词逻辑", "head_type": "概念", "relation": "被定义为", "tail": "公理系统的标准形式逻辑", "tail_type": "概念"}]}
{"text": "一个子句是文字的析取。", "relation": [{"head": "一个子句", "head_type": "概念", "relation": "属于", "tail": "文字的析取", "tail_type": "概念"}]}
{"text": "霍恩子句是带有最多一个肯定（positive）文字的子句，肯定文字指的是没有否定符号的文字。", "relation": [{"head": "霍恩子句", "head_type": "概念", "relation": "被定义为", "tail": "带有最多一个肯定文字的子句", "tail_type": "概念"}]}
{"text": "霍恩逻辑（Horn_Logic）是一阶逻辑的子集。", "relation": [{"head": "霍恩逻辑", "head_type": "概念", "relation": "被定义为", "tail": "一阶逻辑的子集", "tail_type": "概念"}]}
{"text": "基于霍恩逻辑的知识库是一个霍恩规则的集合。", "relation": [{"head": "基于霍恩逻辑的知识库", "head_type": "概念", "relation": "被定义为", "tail": "一个霍恩规则的集合", "tail_type": "概念"}]}
{"text": "2.霍恩逻辑的缺点●有限的表达能力。", "relation": [{"head": "霍恩逻辑的缺点", "head_type": "概念", "relation": "包含", "tail": "有限的表达能力", "tail_type": "概念"}]}
{"text": "语义网络又称联想网络，它在形式上是一个带标识的有向图。", "relation": [{"head": "语义网络", "head_type": "概念", "relation": "中文名", "tail": "联想网络", "tail_type": "概念"}, {"head": "联想网络", "head_type": "概念", "relation": "属于", "tail": "一个带标识的有向图", "tail_type": "概念"}]}
{"text": "语义网络的单元是三元组：（节点1，联想弧，节点2）。", "relation": [{"head": "三元组", "head_type": "概念", "relation": "被定义为", "tail": "（节点1，联想弧，节点2）", "tail_type": "概念"}]}
{"text": "语义网络是一种结构化的知识表示方法，对数据子图特别有效。", "relation": [{"head": "语义网络", "head_type": "概念", "relation": "属于", "tail": "一种结构化的知识表示方法", "tail_type": "概念"}]}
{"text": "框架是一种描述对象（事物、事件或概念等）属性的数据结构。", "relation": [{"head": "框架", "head_type": "概念", "relation": "属于", "tail": "一种描述对象（事物、事件或概念等）属性的数据结构", "tail_type": "概念"}]}
{"text": "在框架理论中，类是知识表示的基本单位。", "relation": [{"head": "类", "head_type": "概念", "relation": "被定义为", "tail": "知识表示的基本单位", "tail_type": "概念"}]}
{"text": "除此之外，框架还允许给属性设默认值，以及设立触发器以维护框架。", "relation": [{"head": "框架", "head_type": "概念", "relation": "实现", "tail": "给属性设默认值", "tail_type": "概念"}]}
{"text": "表2-1带变量框架实例表2-2变量赋值框架实例1.框架的优点1）结构性：能把事物的属性以及事物间的各种语义联想显式地表示出来。", "relation": [{"head": "框架的优点", "head_type": "概念", "relation": "包含", "tail": "结构性", "tail_type": "概念"}]}
{"text": "2）框架对于知识的描述比较全面，支持默认值以及触发器。", "relation": [{"head": "框架的优点", "head_type": "概念", "relation": "包含", "tail": "支持默认值", "tail_type": "概念"}, {"head": "框架的优点", "head_type": "概念", "relation": "包含", "tail": "支持触发器", "tail_type": "概念"}]}
{"text": "2.2.5描述逻辑描述逻辑是一阶逻辑的一个可判定子集。", "relation": [{"head": "描述逻辑", "head_type": "概念", "relation": "被定义为", "tail": "一阶逻辑的一个可判定子集", "tail_type": "概念"}]}
{"text": "描述逻辑可以被看成是利用一阶逻辑对语义网络和框架进行形式化后的产物。", "relation": [{"head": "描述逻辑", "head_type": "概念", "relation": "属于", "tail": "利用一阶逻辑对语义网络和框架进行形式化后的产物", "tail_type": "概念"}]}
{"text": "一元谓词称为类，二元谓词称为关系。", "relation": [{"head": "一元谓词", "head_type": "概念", "relation": "被定义为", "tail": "类", "tail_type": "概念"}, {"head": "二元谓词", "head_type": "概念", "relation": "被定义为", "tail": "关系", "tail_type": "概念"}]}
{"text": "描述逻辑的重要特征是同时具有很强的表达能力和可判定性。", "relation": [{"head": "描述逻辑的重要特征", "head_type": "概念", "relation": "包含", "tail": "具有很强的表达能力", "tail_type": "概念"}, {"head": "描述逻辑的重要特征", "head_type": "概念", "relation": "包含", "tail": "具有很强的可判定性", "tail_type": "概念"}]}
{"text": "2.3.1RDF和RDFSRDF是W3C的RDF工作组制定的关于知识图谱的国际标准。", "relation": [{"head": "RDF", "head_type": "概念", "relation": "属于", "tail": "W3C的RDF工作组制定的关于知识图谱的国际标准", "tail_type": "概念"}]}
{"text": "RDF是W3C一系列语义网标准的核心，如图2-4所示。", "relation": [{"head": "RDF", "head_type": "概念", "relation": "属于", "tail": "W3C一系列语义网标准的核心", "tail_type": "概念"}]}
{"text": "●表示组（Representation）包括URI/IRI、XML和RDF。", "relation": [{"head": "表示组", "head_type": "概念", "relation": "包含", "tail": "URI/IRI", "tail_type": "概念"}, {"head": "表示组", "head_type": "概念", "relation": "包含", "tail": "XML", "tail_type": "概念"}, {"head": "表示组", "head_type": "概念", "relation": "包含", "tail": "RDF", "tail_type": "概念"}]}
{"text": "●推理组（Reasoning）包括RDF-S、本体OWL、规则RIF和统一逻辑。", "relation": [{"head": "推理组", "head_type": "概念", "relation": "包含", "tail": "RDF-S", "tail_type": "概念"}, {"head": "推理组", "head_type": "概念", "relation": "包含", "tail": "本体OWL", "tail_type": "概念"}, {"head": "推理组", "head_type": "概念", "relation": "包含", "tail": "规则RIF", "tail_type": "概念"}, {"head": "推理组", "head_type": "概念", "relation": "包含", "tail": "统一逻辑", "tail_type": "概念"}]}
{"text": "目前，跟知识图谱最相关的有：图2-4W3C的语义网标准栈及其分组2006年，人们开始用RDF发布和链接数据，从而生成知识图谱，比较知名的有DBpedia、Yago和Freebase。", "relation": [{"head": "用RDF发布和链接数据，从而生成的知识图谱", "head_type": "概念", "relation": "包含", "tail": "DBpedia", "tail_type": "产品"}, {"head": "用RDF发布和链接数据，从而生成的知识图谱", "head_type": "概念", "relation": "包含", "tail": "Yago", "tail_type": "产品"}, {"head": "用RDF发布和链接数据，从而生成的知识图谱", "head_type": "概念", "relation": "包含", "tail": "Freebase", "tail_type": "产品"}]}
{"text": "RDF中的主语是一个个体（Individual），个体是类的实例。", "relation": [{"head": "RDF中的主语", "head_type": "概念", "relation": "被定义为", "tail": "一个个体（Individual）", "tail_type": "概念"}]}
{"text": "RDF中的谓语是一个属性。", "relation": [{"head": "RDF中的谓语", "head_type": "概念", "relation": "被定义为", "tail": "一个属性", "tail_type": "概念"}]}
{"text": "换言之，RDF中的宾语可以是一个个体，例如（IBM-Talk,speaker,Jeff）也可以是一个数据类型的实例，例如（IBM-Talk,talkDate,“05-10-2012”^xsd:date）。", "relation": [{"head": "RDF中的宾语", "head_type": "概念", "relation": "被定义为", "tail": "一个个体", "tail_type": "概念"}, {"head": "RDF中的宾语", "head_type": "概念", "relation": "被定义为", "tail": "一个数据类型的实例", "tail_type": "概念"}]}
{"text": "在RDF中，三元组中的主谓宾都有一个全局标识URI，包括以上例子中的Jeff、IBM_Talk和KG，如图2-7所示。", "relation": [{"head": "三元组中的主谓宾", "head_type": "概念", "relation": "包含", "tail": "全局标识URI", "tail_type": "概念"}]}
{"text": "空白节点的前缀为“_”。", "relation": [{"head": "空白节点的前缀", "head_type": "概念", "relation": "被定义为", "tail": "“_”", "tail_type": "概念"}]}
{"text": "采用开放世界假设意味着RDF图谱可以被分布式储存，如图2-11所示。", "relation": [{"head": "开放世界假设", "head_type": "概念", "relation": "实现", "tail": "RDF图谱可以被分布式储存", "tail_type": "概念"}]}
{"text": "RDFSchema（RDF模式，简称RDFS）提供了对类和属性的简单描述，从而给RDF数据提供词汇建模的语言。", "relation": [{"head": "RDFS", "head_type": "概念", "relation": "实现", "tail": "对类和属性的简单描述", "tail_type": "概念"}]}
{"text": "RDFS提供了最基本的对类和属性的描述元语：●rdf:type：用于指定个体的类；●rdfs:subClassOf：用于指定类的父类；●rdfs:subPropertyOf：用于指定属性的父属性；●rdfs:domain：用于指定属性的定义域；●rdfs:range：用于指定属性的值域。", "relation": [{"head": "rdfs:type", "head_type": "概念", "relation": "被定义为", "tail": "指定个体的类", "tail_type": "概念"}, {"head": "rdfs:subClassOf", "head_type": "概念", "relation": "被定义为", "tail": "指定类的父类", "tail_type": "概念"}, {"head": "rdfs:subPropertyOf", "head_type": "概念", "relation": "被定义为", "tail": "指定属性的父属性", "tail_type": "概念"}, {"head": "rdfs:domain", "head_type": "概念", "relation": "被定义为", "tail": "指定属性的定义域", "tail_type": "概念"}, {"head": "rdfs:range", "head_type": "概念", "relation": "被定义为", "tail": "指定属性的值域", "tail_type": "概念"}]}
{"text": "RDF_Schema通过这样的方式描述不同词汇集的元数据之间的关系，从而为网络上统一格式的元数据交换打下基础。", "relation": [{"head": "RDF_Schema", "head_type": "概念", "relation": "研究", "tail": "不同词汇集的元数据之间的关系", "head_type": "概念"}]}
{"text": "1.OWL的语言特征如图2-15所示，OWL1.0有OWL_Lite、OWL_DL、OWL_Full三个子语言，三个子语言的特征和使用限制举例如表2-4所示。", "relation": [{"head": "OWL1.0", "head_type": "概念", "relation": "包含", "tail": "OWL_Lite子语言", "head_type": "产品"}, {"head": "OWL1.0", "head_type": "概念", "relation": "包含", "tail": "OWL_DL子语言", "head_type": "产品"}, {"head": "OWL1.0", "head_type": "概念", "relation": "包含", "tail": "OWL_Full子语言", "head_type": "产品"}]}
{"text": "OWL2的三大子语言是OWL_2_RL、OWL_2_QL和OWL_2_EL。", "relation": [{"head": "OWL2的子语言", "head_type": "概念", "relation": "包含", "tail": "OWL_2_RL", "head_type": "产品"}, {"head": "OWL2的子语言", "head_type": "概念", "relation": "包含", "tail": "OWL_2_QL", "head_type": "产品"}, {"head": "OWL2的子语言", "head_type": "概念", "relation": "包含", "tail": "OWL_2_EL", "head_type": "产品"}]}
{"text": "OWL_2_QL是OWL2子语言中最为简单的，QL代表Query_Language，所以OWL_2_QL是专为基于本体的查询设计的。", "relation": [{"head": "OWL_2_QL", "head_type": "概念", "relation": "属于", "tail": "基于本体的查询设计", "tail_type": "概念"}]}
{"text": "它是基于描述逻辑DL-Lite定义的。", "relation": [{"head": "OWL_2_QL", "head_type": "概念", "relation": "源于", "tail": "基于描述逻辑DL-Lite", "tail_type": "概念"}]}
{"text": "表2-6OWL_2_QL词汇总结另外一个能够提供多项式推理的OWL是OWL_2_EL。", "relation": [{"head": "OWL_2_EL", "head_type": "产品", "relation": "属于", "tail": "能够提供多项式推理的OWL", "tail_type": "概念"}]}
{"text": "与OWL_2_QL不同，OWL_2_EL专为概念术语描述、本体的分类推理而设计，广泛应用在生物医疗领域，如临床医疗术语本体SNOMED_CT。", "relation": [{"head": "临床医疗术语本体SNOMED_CT", "head_type": "产品", "relation": "源于", "tail": "OWL_2_EL", "tail_type": "产品"}]}
{"text": "OWL_2_EL的分类复杂度是Ptime-Complete，它是基于描述逻辑语言EL++定义的。", "relation": [{"head": "OWL_2_EL", "head_type": "产品", "relation": "源于", "tail": "描述逻辑语言EL++", "tail_type": "产品"}]}
{"text": "OWL_2_RL扩展了RDFS的表达能力，在RDFS的基础上引入属性的特殊特性（函数性、互反性和对称性），允许声明等价性，允许属性的局部约束。", "relation": [{"head": "OWL_2_RL", "head_type": "产品", "relation": "实现", "tail": "RDFS的表达能力的扩展", "tail_type": "概念"}, {"head": "OWL_2_RL", "head_type": "产品", "relation": "实现", "tail": "属性的特殊特性（函数性、互反性和对称性）", "tail_type": "概念"}]}
{"text": "OWL_2_RL的推理是一种前向链推理，即将推理规则应用到OWL_2_RL本体，得到新的知识，即OWL_2_RL推理是针对实例数据的推理。", "relation": [{"head": "OWL_2_RL推理", "head_type": "概念", "relation": "属于", "tail": "前向链推理", "tail_type": "概念"}, {"head": "OWL_2_RL推理", "head_type": "概念", "relation": "属于", "tail": "针对实例数据的推理", "tail_type": "概念"}]}
{"text": "2.3.3知识图谱查询语言的表示RDF支持类似数据库的查询语言，叫作SPARQL[1]，它提供了查询RDF数据的标准语法、处理SPARQL查询的规则以及结果返回形式。", "relation": [{"head": "类似数据库的查询语言", "head_type": "概念", "relation": "被定义为", "tail": "SPARQL", "tail_type": "产品"}]}
{"text": "被谷歌知识图谱以及Schema.Org采用的语义Markup语言主要包括JSON-LD、RDFa和HTML5MicroData。", "relation": [{"head": "被谷歌知识图谱以及Schema.Org", "head_type": "概念", "relation": "依靠", "tail": "Markup语言", "tail_type": "产品"}, {"head": "Markup语言", "head_type": "产品", "relation": "包含", "tail": "JSON-LD", "tail_type": "产品"}, {"head": "Markup语言", "head_type": "产品", "relation": "包含", "tail": "RDFa", "tail_type": "产品"}, {"head": "Markup语言", "head_type": "产品", "relation": "包含", "tail": "HTML5MicroData", "tail_type": "产品"}]}
{"text": "1.JSON-LDJSON-LD（JavaScript_Object_Notation_for_Linked_Data）是一种基于JSON表示和传输链接数据的方法。", "relation": [{"head": "JSON-LD", "head_type": "产品", "relation": "属于", "tail": "一种基于JSON表示和传输链接数据的方法", "tail_type": "概念"}]}
{"text": "Stores），而是以简2.RDFaRDFa（Resource_Description_Framework_in_attributes）是一种早期网页语义标记语言。", "relation": [{"head": "RDFa", "head_type": "产品", "relation": "属于", "tail": "一种早期网页语义标记语言", "tail_type": "概念"}]}
{"text": "RDFa也是W3C推荐标准。", "relation": [{"head": "RDFa", "head_type": "产品", "relation": "被定义为", "tail": "W3C推荐标准", "tail_type": "概念"}]}
{"text": "3.HTML5_MicrodataMicrodata（微数据）是在网页标记语言中嵌入机器可读的属性数据。", "relation": [{"head": "HTML5_MicrodataMicrodata", "head_type": "产品", "relation": "属于", "tail": "在网页标记语言中嵌入机器可读的属性数据", "tail_type": "概念"}]}
{"text": "微数据是给那些已经在页面上可见的数据施加额外的语义，当HTML的词汇不够用时，使用微数据可以取得较好的效果。", "relation": [{"head": "微数据", "head_type": "概念", "relation": "实现", "tail": "给那些已经在页面上可见的数据施加额外的语义", "tail_type": "概念"}]}
{"text": "2.4.1FreebaseFreebase的知识表示框架主要包含如下几个要素：对象-Object、事实-Facts、类型-ID，称为MIDTypes和属性-Properties。", "relation": [{"head": "FreebaseFreebase的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "对象-Object", "tail_type": "概念"}, {"head": "FreebaseFreebase的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "事实-Facts", "tail_type": "概念"}, {"head": "FreebaseFreebase的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "类型-ID（MIDTypes）", "tail_type": "概念"}, {"head": "FreebaseFreebase的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "属性-Properties", "tail_type": "概念"}]}
{"text": "“Object”代表实体。", "relation": [{"head": "“Object”", "head_type": "概念", "relation": "被定义为", "tail": "实体", "tail_type": "概念"}]}
{"text": "每一个“Object”有唯一的（Machine_ID）。", "relation": [{"head": "每一个“Object”", "head_type": "概念", "relation": "包含", "tail": "唯一的（Machine_ID）", "tail_type": "概念"}]}
{"text": "一个“Object”可以有一个或多个“Types”。", "relation": [{"head": "一个“Object”", "head_type": "概念", "relation": "包含", "tail": "一个或多个“Types”", "tail_type": "概念"}]}
{"text": "图2-16Freebase的知识表示结构示例2.4.2WikidataWikidata的知识表示框架主要包含如下要素：页面-Pages、实体-Entities、条目-Items、属性-Properties、陈述-Statements、修饰-Qualifiers、引用-Reference等。", "relation": [{"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "页面-Pages", "tail_type": "概念"}, {"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "实体-Entities", "tail_type": "概念"}, {"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "条目-Items", "tail_type": "概念"}, {"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "属性-Properties", "tail_type": "概念"}, {"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "陈述-Statements", "tail_type": "概念"}, {"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "修饰-Qualifiers", "tail_type": "概念"}, {"head": "Wikidata的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "引用-Reference", "tail_type": "概念"},]}
{"text": "Wikidata起源于Wikipedia，因此与Wikipedia一样，以页面“Page”为基本的组织单元。", "relation": [{"head": "Wikidata", "head_type": "产品", "relation": "源于", "tail": "Wikipedia", "tail_type": "产品"}]}
{"text": "每一个Entity都有一个独立的维基页面。", "relation": [{"head": "每一个Entity", "head_type": "概念", "relation": "包含", "tail": "一个独立的维基页面", "tail_type": "概念"}]}
{"text": "Entities主要有两类：Items和Properties。", "relation": [{"head": "Entities", "head_type": "概念", "relation": "包含", "tail": "Items", "tail_type": "概念"}, {"head": "Entities", "head_type": "概念", "relation": "包含", "tail": "Properties", "tail_type": "概念"}]}
{"text": "Properties和Statements分别等价于RDF中的Property和Statement。", "relation": [{"head": "Properties", "head_type": "概念", "relation": "等价", "tail": "RDF中的Property", "tail_type": "概念"}, {"head": "Statements", "head_type": "概念", "relation": "等价", "tail": "RDF中的Statement", "tail_type": "概念"}]}
{"text": "通常一个Item的页面还包含多个别名-aliases和多个指向Wikipedia的外部链接-Sitelinks。", "relation": [{"head": "一个Item的页面", "head_type": "概念", "relation": "包含", "tail": "多个别名-aliases", "tail_type": "概念"}, {"head": "一个Item的页面", "head_type": "概念", "relation": "包含", "tail": "多个指向Wikipedia的外部链接-Sitelinks", "tail_type": "概念"}]}
{"text": "每个Entities有多个Statements。", "relation": [{"head": "每个Entities", "head_type": "概念", "relation": "包含", "tail": "多个Statements", "tail_type": "概念"}]}
{"text": "一个Statement包含一个Property、一个或多个Values、一个或多个Qualifiers、一个或多个References、一个标识重要性程度的Rank。", "relation": [{"head": "一个Statement", "head_type": "概念", "relation": "包含", "tail": "一个Property", "tail_type": "概念"}, {"head": "一个Statement", "head_type": "概念", "relation": "包含", "tail": "一个或多个Values", "tail_type": "概念"}, {"head": "一个Statement", "head_type": "概念", "relation": "包含", "tail": "一个或多个Qualifiers", "tail_type": "概念"}, {"head": "一个Statement", "head_type": "概念", "relation": "包含", "tail": "一个或多个References", "tail_type": "概念"}, {"head": "一个Statement", "head_type": "概念", "relation": "包含", "tail": "一个标识重要性程度的Rank", "tail_type": "概念"}]}
{"text": "Wikidata支持多种数值类型，包括其自有的Item类型、RDF_Literal、URL、媒体类型Commons_Media，以及Time、Globe_coordinates和Quantity三种复杂类型。", "relation": [{"head": "Wikidata", "head_type": "产品", "relation": "实现", "tail": "多种数值类型", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "自有的Item类型", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "RDF_Literal", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "URL", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "媒体类型Commons_Media", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "Time", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "Globe_coordinates", "tail_type": "概念"}, {"head": "多种数值类型", "head_type": "概念", "relation": "包含", "tail": "Quantity三种复杂类型", "tail_type": "概念"}]}
{"text": "Wikidata允许给每个Statement增加三种权重：normal（缺省）、preferred和deprecated。", "relation": [{"head": "Wikidata", "head_type": "产品", "relation": "实现", "tail": "给每个Statement增加三种权重", "tail_type": "概念"}, {"head": "三种权重", "head_type": "概念", "relation": "包含", "tail": "normal（缺省）", "tail_type": "概念"}, {"head": "三种权重", "head_type": "概念", "relation": "包含", "tail": "preferred", "tail_type": "概念"}, {"head": "三种权重", "head_type": "概念", "relation": "包含", "tail": "deprecated", "tail_type": "概念"}]}
{"text": "Wikidata定义了三种Snacks作为Statement的具体描述结构：PropertyValueSnack、PropertyNoValueSnack、PropertySomeValueSnack。",
"relation": [{"head": "三种Snacks", "head_type": "概念", "relation": "被定义为", "tail": "Wikidata的Statement的具体描述结构", "tail_type": "概念"}, {"head": "Statement的具体描述结构", "head_type": "概念", "relation": "包含", "tail": "PropertyValueSnack", "tail_type": "概念"}, {"head": "Statement的具体描述结构", "head_type": "概念", "relation": "包含", "tail": "PropertyNoValueSnack", "tail_type": "概念"}, {"head": "Statement的具体描述结构", "head_type": "概念", "relation": "包含", "tail": "PropertySomeValueSnack", "tail_type": "概念"}]}
{"text": "of_England_had_no_I_Wikidata的URI机制遵循了Linked_Open_Data的URI原则，采用统一的URI机制：Item，如Q49，或者一个http://www.wikidata.org/entity/<id>。", "relation": [{"head": "Wikidata的URI机制", "head_type": "概念", "relation": "依靠", "tail": "Linked_Open_Data的URI原则", "tail_type": "概念"}]}
{"text": "2.4.3ConceptNet5ConceptNet5的知识表示框架主要包含如下要素：概念-Concepts、词-Words、短语-Phrases、断言-Assertions、关系-Relations、边-Edges。", "relation": [{"head": "ConceptNet5的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "概念-Concepts", "tail_type": "概念"}, {"head": "ConceptNet5的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "词-Words", "tail_type": "概念"}, {"head": "ConceptNet5的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "短语-Phrases", "tail_type": "概念"}, {"head": "ConceptNet5的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "断言-Assertions", "tail_type": "概念"}, {"head": "ConceptNet5的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "关系-Relations", "tail_type": "概念"}, {"head": "ConceptNet5的知识表示框架", "head_type": "概念", "relation": "包含", "tail": "边-Edges", "tail_type": "概念"}]}
{"text": "一个Concepts包含多条边，而一条边可能有多个产生来源。",
"relation": [{"head": "Concepts", "head_type": "概念", "relation": "包含", "tail": "多条边", "tail_type": "概念"}, {"head": "一条边", "head_type": "概念", "relation": "包含", "tail": "一个或多个产生来源", "tail_type": "概念"}]}
{"text": "ConceptNet5中的关系包含21个预定义的、多语言通用的关系，如IsA、UsedFor等，以及从自然语言文本中抽取的更加接近自然语言描述的非形式化的关系，如of,caused_by等。", "relation": [{"head": "ConceptNet5中的关系", "head_type": "概念", "relation": "包含", "tail": "21个预定义的、多语言通用的关系", "tail_type": "概念"}, {"head": "ConceptNet5中的关系", "head_type": "概念", "relation": "包含", "tail": "从自然语言文本中抽取的非形式化的关系", "tail_type": "概念"}]}
{"text": "2.5.1知识图谱表示的挑战在前面提到的一些知识图谱的表示方法中，其基础大多是以三元组的方法对知识进行组织。", "relation": [{"head": "知识图谱的表示方法", "head_type": "概念", "relation": "源于", "tail": "三元组的方法", "tail_type": "概念"}]}
{"text": "1.独热编码传统的独热编码（One-Hot_Encoding）方法是将一个词表示成一个很长的向量，该向量的维度是整个词表的大小。", "relation": [{"head": "向量的维度", "head_type": "概念", "relation": "被定义为", "tail": "整个词表的大小", "tail_type": "概念"}]}
{"text": "2.词袋模型词袋模型（Bag-of-Words,BoW）是一种对文本中词的表示方法。", "relation": [{"head": "词袋模型", "head_type": "概念", "relation": "属于", "tail": "一种对文本中词的表示方法", "tail_type": "概念"}]}
{"text": "图2-19独热编码示例1图2-20独热编码示例23.词向量上面对词的表示方法并没有考虑语义层面的信息，为了更多地表示词与词之间的语义相似程度，提出词的分布式表示，也就是基于上下文的稠密向量表示法，通常称为词向量或词嵌入（Word_Embedding）。", "relation": [{"head": "分布式表示", "head_type": "概念", "relation": "属于", "tail": "基于上下文的稠密向量表示法", "tail_type": "概念"}]}
{"text": "产生词向量的手段主要有三种：●Count-based。基于预测的方法基于任务的方法", "relation": [{"head": "产生词向量的手段", "head_type": "概念", "relation": "包含", "tail": "基于计数的方法", "tail_type": "概念"}, {"head": "产生词向量的手段", "head_type": "概念", "relation": "包含", "tail": "基于预测的方法", "tail_type": "概念"}, {"head": "产生词向量的手段", "head_type": "概念", "relation": "包含", "tail": "基于任务的方法", "tail_type": "概念"}]}
{"text": "基于计数的方法，简单说就是记录文本中词的出现次数。", "relation": [{"head": "基于计数的方法", "head_type": "概念", "relation": "依靠", "tail": "记录文本中词的出现次数", "tail_type": "概念"}]}
{"text": "基于预测的方法，既可以通过上下文预测中心词，也可以通过中心词预测上下文。",
"relation": [{"head": "基于预测的方法", "head_type": "概念", "relation": "实现", "tail": "通过上下文预测中心词", "tail_type": "概念"}, {"head": "基于预测的方法", "head_type": "概念", "relation": "实现", "tail": "通过中心词预测上下文", "tail_type": "概念"}]}
{"text": "CBoW也就是连续词袋模型（Continuous_Bag-of-Words），和之前提到的BoW相似之处在于该模型也不用考虑词序的信息。",
"relation": [{"head": "CBoW", "head_type": "产品", "relation": "中文名", "tail": "连续词袋模型", "tail_type": "概念"}]}
{"text": "其主要思想是，用上下文预测中心词，从而训练出的词向量包含了一定的上下文信息。", "relation": [{"head": "训练出的词向量", "head_type": "概念", "relation": "包含", "tail": "一定的上下文信息", "tail_type": "概念"}]}
{"text": "Skip-gram的思想与CBoW恰恰相反，其考虑用中心词来预测上下文词。",
"relation": [{"head": "Skip-gram", "head_type": "产品", "relation": "实现", "tail": "用中心词来预测上下文词", "tail_type": "概念"}]}
{"text": "TransE[12]便是受到了词向量中平移不变性的启发，在TransE中，把实体和关系都表示为向量，对于某一个具体的关系（head,relation,tail），把关系的向量表示解释成头实体的向量到尾实体的向量的转移向量（Translation_vector）。", "relation": [{"head": "TransE[12]", "head_type": "产品", "relation": "源于", "tail": "词向量中平移不变性", "tail_type": "概念"}, {"head": "关系的向量表示", "head_type": "概念", "relation": "被定义为", "tail": "头实体的向量到尾实体的向量的转移向量", "tail_type": "概念"}]}
{"text": "该方向的模型主要是RESCAL[13]以及它的延伸模型。", "relation": [{"head": "该方向的模型", "head_type": "概念", "relation": "包含", "tail": "RESCAL[13]以及它的延伸模型", "tail_type": "产品"}]}
{"text": "在基于路径的TransE，也就是PTransE[17]中，考虑了相加、相乘和RNN三种用关系表达关系路径的方法：p=r1+r2+⋯+rlp=r1∙r2∙⋯∙rlci=f（W[ci−1;ri]）.在基于RNN的方法中，令c1=r1并且一直遍历路径中的关系，直到最终p=cn。", "relation": [{"head": "PTransE", "head_type": "产品", "relation": "被定义为", "tail": "基于路径的TransE", "tail_type": "概念"}]}
{"text": "文本描述（Textual_Descriptions）指的是在一些知识图谱中，对实体有一些简要的文本描述，如图2-24所示，这些描述本身具有一定的语义信息，对提高嵌入的质量有一定的提升。", "relation": [{"head": "文本描述", "head_type": "概念", "relation": "被定义为", "tail": "在一些知识图谱中，对实体有一些简要的文本描述", "tail_type": "概念"}, {"head": "这些描述", "head_type": "概念", "relation": "包含", "tail": "一定的语义信息", "tail_type": "概念"}]}
{"text": "除了某些知识库本身具有的文本描述，也可以使用外部的文本信息和语料库。", "relation": [{"head": "知识库", "head_type": "概念", "relation": "包含", "tail": "文本描述", "tail_type": "概念"}]}
{"text": "Guo[19]提出了一种以规则为指导的知识图谱嵌入方法，其中提出的软规则（Soft_rule）指的是使用AMIE+规则学习方法在知识图谱中挖掘的带有置信度的规则，该方法的整体框架是一个迭代的过程，其中包含两个部分，称为软标签预测阶段（Soft_Label_Prediction）和嵌入修正阶段（Embedding_Rectification）。", "relation": [{"head": "该方法的整体框架", "head_type": "概念", "relation": "属于", "tail": "一个迭代的过程", "tail_type": "概念"}, {"head": "该方法的整体框架", "head_type": "概念", "relation": "包含", "tail": "两个部分", "tail_type": "概念"}, {"head": "两个部分", "head_type": "概念", "relation": "包含", "tail": "软标签预测阶段（Soft_Label_Prediction）", "tail_type": "概念"}, {"head": "两个部分", "head_type": "概念", "relation": "包含", "tail": "嵌入修正阶段（Embedding_Rectification）", "tail_type": "概念"}]}
{"text": "1.链接预测链接预测（Link_Prediction）指通过一个已知的实体和关系预测另一个实体，或者通过两个实体预测关系。", "relation": [{"head": "链接预测", "head_type": "概念", "relation": "被定义为", "tail": "通过一个已知的实体和关系预测另一个实体", "tail_type": "概念"}, {"head": "链接预测", "head_type": "概念", "relation": "实现", "tail": "通过两个实体预测关系", "tail_type": "概念"}]}
{"text": "简单来说，也就是（h,r,?）,（?,r,t）,（h,?,t）三种知识图谱的补全任务，被称为链接预测。", "relation": [{"head": "（h,r,?）,（?,r,t）,（h,?,t）三种知识图谱的补全任务", "head_type": "概念", "relation": "被定义为", "tail": "链接预测", "tail_type": "概念"}]}
{"text": "一般来说，会用链接预测的正确答案的排序评估某种嵌入模型在链接预测上的能力，比较常见的参数有平均等级（Mean_Rank）、平均倒数等级（Mean_Reciprocal_Rank）和命中前n（Hist@n）。", "relation": [{"head": "比较常见的参数", "head_type": "概念", "relation": "包含", "tail": "平均等级（Mean_Rank）", "tail_type": "概念"}, {"head": "比较常见的参数", "head_type": "概念", "relation": "包含", "tail": "平均倒数等级（Mean_Reciprocal_Rank）", "tail_type": "概念"}, {"head": "比较常见的参数", "head_type": "概念", "relation": "包含", "tail": "命中前n（Hist@n）", "tail_type": "概念"}]}
{"text": "2.三元组分类三元组分类（Triple_Classification）指的是给定一个完整的三元组，判断三元组的真假。", "relation": [{"head": "三元组分类", "head_type": "概念", "relation": "被定义为", "tail": "给定一个完整的三元组，判断三元组的真假", "tail_type": "概念"}]}
{"text": "3.实体对齐实体对齐（Entity_Resolution）也称为实体解析，任务是验证两个实体是否指代或者引用的是同一个事物或对象。", "relation": [{"head": "实体对齐", "head_type": "概念", "relation": "被定义为", "tail": "验证两个实体是否指代或者引用的是同一个事物或对象", "tail_type": "概念"}]}
{"text": "在知识图谱嵌入的发展下，推荐系统也尝试借助知识图谱的信息提高推荐系统的能力。", "relation": [{"head": "推荐系统", "head_type": "概念", "relation": "依靠", "tail": "知识图谱的信息", "tail_type": "概念"}]}
{"text": "Protégé软件是斯坦福大学医学院生物信息研究中心基于Java语言开发的本体编辑和本体开发工具，也是基于知识的编辑器，属于开放源代码软件。", "relation": [{"head": "Protégé软件", "head_type": "产品", "relation": "属于", "tail": "斯坦福大学医学院生物信息研究中心基于Java语言开发的本体编辑和本体开发工具", "tail_type": "概念"}, {"head": "Protégé软件", "head_type": "产品", "relation": "属于", "tail": "基于知识的编辑器", "tail_type": "概念"}, {"head": "Protégé软件", "head_type": "产品", "relation": "属于", "tail": "开放源代码软件", "tail_type": "概念"}]}
{"text": "●Protégé可以通过两种方式进行扩展：插件和基于Java的API。", "relation": [{"head": "Protégé", "head_type": "产品", "relation": "包含", "tail": "两种扩展方式", "tail_type": "概念"}, {"head": "扩展方式", "head_type": "概念", "relation": "包含", "tail": "插件", "tail_type": "概念"}, {"head": "扩展方式", "head_type": "概念", "relation": "包含", "tail": "基于Java的API", "tail_type": "概念"}]}
{"text": "Protégé的常见用途包括：类建模、实例编辑、模型处理和模型交换。", "relation": [{"head": "Protégé的常见用途", "head_type": "概念", "relation": "包含", "tail": "模型交换", "tail_type": "概念"}, {"head": "Protégé的常见用途", "head_type": "概念", "relation": "包含", "tail": "类建模", "tail_type": "概念"}, {"head": "Protégé的常见用途", "head_type": "概念", "relation": "包含", "tail": "实例编辑", "tail_type": "概念"}, {"head": "Protégé的常见用途", "head_type": "概念", "relation": "包含", "tail": "模型处理", "tail_type": "概念"}]}
