{"text": "与传统互联网中的文档检索不同，语义搜索需要处理粒度更细的结构化语义数据，因此也面临着前所未有的挑战[4]。", "relation": [{"head": "语义搜索", "head_type": "概念", "relation": "依靠", "tail": "处理粒度更细的结构化语义数据", "tail_type": "概念"}]}
{"text": "以SPARQL查询为代表的结构化查询语言的出现，为支持知识图谱的语义搜索提供了基础。", "relation": [{"head": "SPARQL查询", "head_type": "概念", "relation": "实现", "tail": "提供基础给代表的结构化查询语言的出现", "tail_type": "概念"}]}
{"text": "其中，最广泛的信息检索主要是面向文档为单位的检索（Document_Retrieval）。", "relation": [{"head": "最广泛的信息检索", "head_type": "概念", "relation": "等价", "tail": "面向文档为单位的检索", "tail_type": "概念"}]}
{"text": "语义关注的是能用于搜索的资源的含义。", "relation": [{"head": "语义", "head_type": "概念", "relation": "研究", "tail": "能用于搜索的资源的含义", "tail_type": "概念"}]}

{"text": "其中，语言学模型主要侧重对词语级别的关系建模、分类以及构建同义词库，而概念模型主要侧重对论域中的语法元素的关系建模，以及从语法元素到论域的映射。", "relation": [{"head": "语言学模型", "head_type": "概念", "relation": "研究", "tail": "对词语级别的关系建模、分类以及构建同义词库", "tail_type": "概念"}, {"head": "概念模型", "head_type": "", "relation": "研究", "tail": "对论域中的语法元素的关系建模", "tail_type": "概念"}, {"head": "概念模型", "head_type": "概念", "relation": "研究", "tail": "从语法元素到论域的映射", "tail_type": "概念"}]}
{"text": "通过在检索过程中结合使用这些表达能力更强的类型数据，纯粹面向文档的检索系统已经包含了一定程度的语义使用，已经变成了轻量级的语义搜索系统。", "relation": [
{"head": "纯粹面向文档的检索系统", "head_type": "概念", "relation": "等价", "tail": "轻量级的语义搜索系统", "tail_type": "概念"}]}
{"text": "目前，大量的语义网络搜索系统已经被构建，其目的是利用互联网上大量的RDF数据及表达Web上可用的OWL本体。", "relation": [{"head": "语义网络搜索系统", "head_type": "概念", "relation": "研究", "tail": "利用互联网上大量的RDF数据及表达Web上可用的OWL本体", "tail_type": "概念"}]}
{"text": "目前，最先进的语义搜索系统结合了一系列技术，包括结构化查询语言的构建、基于统计的信息检索排序方法、有效索引和查询处理的数据库方法以及复杂推理等技术。", "relation": [{"head": "语义搜索系统", "head_type": "概念", "relation": "依靠", "tail": "结构化查询语言的构建", "tail_type": "概念"}, {"head": "语义搜索系统", "head_type": "概念", "relation": "依靠", "tail": "基于统计的信息检索排序方法", "tail_type": "概念"}, {"head": "语义搜索系统", "head_type": "概念", "relation": "依靠", "tail": "有效索引和查询处理的数据库方法", "tail_type": "概念"}, {"head": "语义搜索系统", "head_type": "概念", "relation": "依靠", "tail": "复杂推理", "tail_type": "概念"}]}
{"text": "多个RDF三元组组成的集合构成了RDF数据集。", "relation": [{"head": "RDF三元组", "head_type": "概念", "relation": "属于", "tail": "RDF数据集", "tail_type": "概念"}]}
{"text": "目前，RDF已经成为知识图谱的主要描述格式，越来越多的知识图谱数据以RDF三元组的形式发布出来。", "relation": [{"head": "RDF", "head_type": "概念", "relation": "等价", "tail": "知识图谱的主要描述格式", "tail_type": "概念"}]}
{"text": "精确查询并获取知识图谱中三元组中的有关信息是语义搜索的核心。", "relation": [{"head": "精确查询", "head_type": "概念", "relation": "等价", "tail": "语义搜索的核心", "tail_type": "概念"}]}
{"text": "SPARQL查询语言是面向RDF图的结构化查询语言，目前已被W3C推荐为RDF数据的标准查询语言[2]，其地位和查询形式都类似于关系数据库的SQL语言。", "relation": [{"head": "SPARQL查询语言", "head_type": "概念", "relation": "等价", "tail": "面向RDF图的结构化查询语言", "tail_type": "概念"}, {"head": "SPARQL查询语言", "head_type": "概念", "relation": "等价", "tail": "RDF数据的标准查询语言", "tail_type": "概念"}]}
{"text": "SPARQL查询的核心处理单元是类似RDF三元组形式的三元组模式（TriplePattern），不同之处在于SPARQL的三元组模式中，主语、谓语或宾语可以是变量（以“?”开头标识）。",
"relation": [{"head": "SPARQL查询的核心处理单元", "head_type": "概念", "relation": "等价", "tail": "类似RDF三元组形式的三元组模式（TriplePattern）", "tail_type": "概念"}, {"head": "SPARQL的三元组模式中的主语、谓语或宾语", "head_type": "概念", "relation": "等价", "tail": "变量", "tail_type": "概念"}, {"head": "三元组模式", "head_type": "概念", "relation": "英文名", "tail": "TriplePattern", "tail_type": "概念"}]}
{"text": "其中，SELECT是唯一可以返回知识图谱中图模式匹配具体结果给用户的形式，也是最常用的查询语句；ASK查询语句主要用于测试知识图谱中是否存在满足给定查询约束条件的数据，结果以Yes或No的形式返回，除此之外没有额外的信息返回；CONSTRUCT查询语句主要用于将图模式匹配结果生成新的RDF图；DESCRIBE查询语句用于查询与指定IRI相关的数据，注意和SELECT有区别。", "relation": [{"head": "SELECT", "head_type": "概念", "relation": "等价", "tail": "唯一可以返回知识图谱中图模式匹配具体结果给用户的形式", "tail_type": "概念"}, {"head": "SELECT", "head_type": "概念", "relation": "等价", "tail": "最常用的查询语句", "tail_type": "概念"}, {"head": "ASK查询语句", "head_type": "概念", "relation": "研究", "tail": "测试知识图谱中是否存在满足给定查询约束条件的数据", "tail_type": "概念"}, {"head": "CONSTRUCT查询语句", "head_type": "概念", "relation": "实现", "tail": "将图模式匹配结果生成新的RDF图", "tail_type": "概念"}, {"head": "DESCRIBE查询语句", "head_type": "概念", "relation": "实现", "tail": "查询与指定IRI相关的数据", "tail_type": "概念"}]}
{"text": "原生存储（Native_Stores）即直接以RDF图形式的存储方式。", "relation": [{"head": "原生存储", "head_type": "概念", "relation": "等价", "tail": "直接以RDF图形式的存储方式", "tail_type": "概念"}]}
{"text": "数据Web的查询及答案在通常情况下都涉及多个数据源，如图7-8所示。", "relation": [{"head": "数据Web的查询及答案", "head_type": "概念", "relation": "依靠", "tail": "多个数据源", "tail_type": "概念"}]}
{"text": "Hermes系统[13]就是一个典型的多数据源语义数据搜索框架，如图7-9所示，包括数据源融合，用户意图理解以及搜索和优化。", "relation": [{"head": "Hermes系统", "head_type": "产品", "relation": "等价", "tail": "一个典型的多数据源语义数据搜索框架", "tail_type": "概念"}, {"head": "Hermes系统", "head_type": "产品", "relation": "包含", "tail": "数据源融合、用户意图理解以及搜索和优化", "tail_type": "概念"}]}
{"text": "此类常见的交互范式主要包括：关键词查询、自然语言查询、分面查询、表单查询、可视化查询以及混合方式查询等[15]。", "relation": [{"head": "交互范式", "head_type": "概念", "relation": "包含", "tail": "关键词查询", "tail_type": "概念"}, {"head": "交互范式", "head_type": "概念", "relation": "包含", "tail": "自然语言查询", "tail_type": "概念"}, {"head": "交互范式", "head_type": "概念", "relation": "包含", "tail": "分面查询", "tail_type": "概念"}, {"head": "交互范式", "head_type": "概念", "relation": "包含", "tail": "表单查询", "tail_type": "概念"}, {"head": "交互范式", "head_type": "概念", "relation": "包含", "tail": "可视化查询", "tail_type": "概念"}, {"head": "交互范式", "head_type": "概念", "relation": "包含", "tail": "混合方式查询等", "tail_type": "概念"}]}
{"text": "知识图谱上的关键词查询主要可以分为两类[17]：基于关键词直接在知识图谱上搜索答案；基于关键词生成结构化的查询，进而提交给查询引擎得到结果。", "relation": [{"head": "关键词查询", "head_type": "概念", "relation": "包含", "tail": "基于关键词直接在知识图谱上搜索答案", "tail_type": "概念"}, {"head": "关键词查询", "head_type": "概念", "relation": "包含", "tail": "基于关键词生成结构化的查询", "tail_type": "概念"}]}
{"text": "基于关键词直接在知识图谱上搜索答案主要可以解决简单的语义搜索，即查询答案仅仅出现在单条知识图谱三元组中，对于复杂的语义查询往往无法适用。", "relation": [{"head": "基于关键词直接在知识图谱上搜索答案", "head_type": "概念", "relation": "实现", "tail": "解决简单的语义搜索", "tail_type": "概念"}]}
{"text": "进行映射的主要原因是用户输入的关键词和知识图谱上的实体关系往往存在语义鸿沟，例如，关键词“妻子”在知识图谱可能对应的是“配偶”。", "relation": [{"head": "映射", "head_type": "概念", "relation": "源于", "tail": "用户输入的关键词和知识图谱上的实体关系往往存在语义鸿沟", "tail_type": "概念"}]}
{"text": "典型的定义将分面描述为属性或一组分类体系（category），或将分面定义为某个主题的维度或侧面。", "relation": [{"head": "分面", "head_type": "概念", "relation": "被定义为", "tail": "属性或一组分类体系（category）", "tail_type": "概念"}, {"head": "分面", "head_type": "概念", "relation": "被定义为", "tail": "某个主题的维度或侧面", "tail_type": "概念"}]}
{"text": "此外，每一个当前浏览的知识图谱实体可能有大量分面，还需要对分面进行排序和分面隐藏。", "relation": [{"head": "分面", "head_type": "概念", "relation": "依靠", "tail": "排序和分面隐藏", "tail_type": "概念"}]}
{"text": "知识图谱表示学习旨在通过机器学习技术，将知识图谱中的实体和关系投射到连续低维的向量空间中，同时保持原有知识图谱的基本结构和性质[20]。", "relation": [{"head": "知识图谱表示学习", "head_type": "概念", "relation": "研究", "tail": "通过机器学习技术，将知识图谱中的实体和关系投射到连续低维的向量空间中，同时保持原有知识图谱的基本结构和性质[20]", "tail_type": "概念"}]}
{"text": "在知识图谱表示学习技术出现之前，通常以图数据库的形式组织和存储知识图谱。", "relation": [{"head": "知识图谱组织", "head_type": "概念", "relation": "依靠", "tail": "图数据库的形式", "tail_type": "概念"}, {"head": "以储知识图谱", "head_type": "概念", "relation": "依靠", "tail": "图数据库的形式存", "tail_type": "概念"}]}
{"text": "知识图谱的向量空间可以帮助模型省略消歧的过程，方法是将每一个候选实体集合中的实体平均实值向量作为查询图生成时的实体表示，进而并不需要某一个具体的实体向量。", "relation": [{"head": "知识图谱的向量空间", "head_type": "概念", "relation": "实现", "tail": "模型省略消歧的过程", "tail_type": "概念"}]}

{"text": "该搜索引擎可以按照名称搜索实体、实体属性、多跳搜索以及搜索符合多对属性要求的实体。", "relation": [{"head": "搜索引擎搜索实体", "head_type": "概念", "relation": "依靠", "tail": "名称搜索", "tail_type": "概念"}, {"head": "搜索引擎搜索实体", "head_type": "概念", "relation": "依靠", "tail": "实体属性搜索", "tail_type": "概念"}, {"head": "搜索引擎搜索实体", "head_type": "概念", "relation": "依靠", "tail": "多跳搜索", "tail_type": "概念"}, {"head": "搜索引擎搜索实体", "head_type": "概念", "relation": "依靠", "tail": "搜索符合多对属性要求的实体", "tail_type": "概念"}]}
{"text": "表示学习技术可以让语义检索绕过对查询本身的修改拓展，直接得到近似结果，在提高效率和精度的同时又带来结果的可解释问题。", "relation": [{"head": "表示学习技术", "head_type": "概念", "relation": "实现", "tail": "语义检索绕过对查询本身的修改拓展,直接得到近似结果", "tail_type": "概念"}, {"head": "表示学习技术", "head_type": "概念", "relation": "实现", "tail": "提高效率和精度", "tail_type": "概念"}]}
{"text": "该数据集由三元组组成，每个三元组描述一个人物实体的某个属性。", "relation": [{"head": "数据集", "head_type": "概念", "relation": "包含", "tail": "三元组", "tail_type": "概念"}, {"head": "三元组", "head_type": "概念", "relation": "研究", "tail": "人物实体的某个属性", "tail_type": "概念"}]}
{"text": "Elasticsearch使用RESTful_API可以方便地交互，通过Elasticsearch的mapping文件可以创建index和type，并指定每个字段在Elasticsearch中存储的类型。", "relation": [{"head": "Elasticsearch", "head_type": "产品", "relation": "依靠", "tail": "RESTful_API", "tail_type": "产品"}, {"head": "Elasticsearch的mapping文件", "head_type": "概念", "relation": "实现", "tail": "创建index和type", "tail_type": "概念"}, {"head": "mapping文件", "head_type": "概念", "relation": "实现", "tail": "指定每个字段在Elasticsearch中存储的类型", "tail_type": "概念"}]}
{"text": "注意：Elasticsearch的查询除了常见的get请求方式，即将参数和参数值作为链接的一部分提交，也支持如上所示将查询参数写入一个JSON结构体，用该请求体查询的方式。", "relation": [{"head": "Elasticsearch的查询", "head_type": "概念", "relation": "实现", "tail": "支持将查询参数写入一个JSON结构体", "tail_type": "概念"}]}